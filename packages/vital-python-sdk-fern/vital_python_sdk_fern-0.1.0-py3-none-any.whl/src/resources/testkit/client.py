# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import VitalEnvironment
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.consent import Consent
from ...types.http_validation_error import HttpValidationError
from ...types.patient_address_compatible import PatientAddressCompatible
from ...types.patient_details import PatientDetails
from ...types.physician_create_request_base import PhysicianCreateRequestBase
from ...types.post_order_response import PostOrderResponse
from ...types.shipping_address import ShippingAddress

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TestkitClient:
    def __init__(self, *, environment: VitalEnvironment = VitalEnvironment.PRODUCTION, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def register(
        self,
        *,
        user_id: str,
        sample_id: str,
        patient_details: PatientDetails,
        patient_address: PatientAddressCompatible,
        physician: typing.Optional[PhysicianCreateRequestBase] = OMIT,
        consents: typing.Optional[typing.List[Consent]] = OMIT,
    ) -> PostOrderResponse:
        _request: typing.Dict[str, typing.Any] = {
            "user_id": user_id,
            "sample_id": sample_id,
            "patient_details": patient_details,
            "patient_address": patient_address,
        }
        if physician is not OMIT:
            _request["physician"] = physician
        if consents is not OMIT:
            _request["consents"] = consents
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v3/order/testkit/register"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostOrderResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_order(self, *, user_id: str, lab_test_id: str, shipping_details: ShippingAddress) -> PostOrderResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v3/order/testkit"),
            json=jsonable_encoder(
                {"user_id": user_id, "lab_test_id": lab_test_id, "shipping_details": shipping_details}
            ),
            headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostOrderResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_shipment_for_order(self, order_id: str, team_id: str) -> str:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v3/order/testkit/process/{team_id}/{order_id}"),
            headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTestkitClient:
    def __init__(self, *, environment: VitalEnvironment = VitalEnvironment.PRODUCTION, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def register(
        self,
        *,
        user_id: str,
        sample_id: str,
        patient_details: PatientDetails,
        patient_address: PatientAddressCompatible,
        physician: typing.Optional[PhysicianCreateRequestBase] = OMIT,
        consents: typing.Optional[typing.List[Consent]] = OMIT,
    ) -> PostOrderResponse:
        _request: typing.Dict[str, typing.Any] = {
            "user_id": user_id,
            "sample_id": sample_id,
            "patient_details": patient_details,
            "patient_address": patient_address,
        }
        if physician is not OMIT:
            _request["physician"] = physician
        if consents is not OMIT:
            _request["consents"] = consents
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "v3/order/testkit/register"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostOrderResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_order(
        self, *, user_id: str, lab_test_id: str, shipping_details: ShippingAddress
    ) -> PostOrderResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "v3/order/testkit"),
                json=jsonable_encoder(
                    {"user_id": user_id, "lab_test_id": lab_test_id, "shipping_details": shipping_details}
                ),
                headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PostOrderResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_shipment_for_order(self, order_id: str, team_id: str) -> str:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", f"v3/order/testkit/process/{team_id}/{order_id}"),
                headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
