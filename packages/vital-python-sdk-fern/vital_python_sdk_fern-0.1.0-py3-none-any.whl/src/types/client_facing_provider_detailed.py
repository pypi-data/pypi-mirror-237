# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .client_facing_resource import ClientFacingResource
from .source_auth_type import SourceAuthType


class ClientFacingProviderDetailed(pydantic.BaseModel):
    name: str = pydantic.Field(description=("Name of source of information\n"))
    slug: str = pydantic.Field(description=("Slug for designated source\n"))
    description: str = pydantic.Field(description=("Description of source of information\n"))
    logo: typing.Optional[str] = pydantic.Field(description=("URL for source logo\n"))
    auth_type: typing.Optional[SourceAuthType]
    supported_resources: typing.Optional[typing.List[ClientFacingResource]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
