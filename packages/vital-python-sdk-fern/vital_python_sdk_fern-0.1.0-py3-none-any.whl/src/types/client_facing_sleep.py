# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .client_facing_sleep_stream import ClientFacingSleepStream
from .client_facing_source import ClientFacingSource


class ClientFacingSleep(pydantic.BaseModel):
    user_id: str = pydantic.Field(
        description=(
            "User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.\n"
        )
    )
    id: str
    date: dt.datetime = pydantic.Field(
        description=(
            "Date of the specified record, formatted as ISO8601 datetime string in UTC 00:00. Deprecated in favour of calendar_date.\n"
        )
    )
    calendar_date: str = pydantic.Field(
        description=("Date of the sleep summary in the YYYY-mm-dd format. This generally matches the sleep end date.\n")
    )
    bedtime_start: dt.datetime = pydantic.Field(description=("UTC Time when the sleep period started\n"))
    bedtime_stop: dt.datetime = pydantic.Field(description=("UTC Time when the sleep period ended\n"))
    timezone_offset: typing.Optional[int] = pydantic.Field(
        description=(
            "Timezone offset from UTC as seconds. For example, EEST (Eastern European Summer Time, +3h) is 10800. PST (Pacific Standard Time, -8h) is -28800::seconds\n"
        )
    )
    duration: int = pydantic.Field(
        description=(
            "Total duration of the sleep period (sleep.duration = sleep.bedtime_end - sleep.bedtime_start)::seconds\n"
        )
    )
    total: int = pydantic.Field(
        description=(
            "Total amount of sleep registered during the sleep period (sleep.total = sleep.rem + sleep.light + sleep.deep)::seconds\n"
        )
    )
    awake: int = pydantic.Field(
        description=("Total amount of awake time registered during the sleep period::seconds\n")
    )
    light: int = pydantic.Field(
        description=("Total amount of light sleep registered during the sleep period::seconds\n")
    )
    rem: int = pydantic.Field(
        description=("Total amount of REM sleep registered during the sleep period, minutes::seconds\n")
    )
    deep: int = pydantic.Field(
        description=("Total amount of deep (N3) sleep registered during the sleep period::seconds\n")
    )
    score: typing.Optional[int] = pydantic.Field(
        description=(
            "A value between 1 and 100 representing how well the user slept. Currently only available for Withings, Oura, Whoop and Garmin::scalar\n"
        )
    )
    hr_lowest: typing.Optional[int] = pydantic.Field(
        description=(
            "The lowest heart rate (5 minutes sliding average) registered during the sleep period::beats per minute\n"
        )
    )
    hr_average: typing.Optional[int] = pydantic.Field(
        description=("The average heart rate registered during the sleep period::beats per minute\n")
    )
    efficiency: typing.Optional[float] = pydantic.Field(
        description=(
            "Sleep efficiency is the percentage of the sleep period spent asleep (100% * sleep.total / sleep.duration)::perc\n"
        )
    )
    latency: typing.Optional[int] = pydantic.Field(
        description=(
            "Detected latency from bedtime_start to the beginning of the first five minutes of persistent sleep::seconds\n"
        )
    )
    temperature_delta: typing.Optional[float] = pydantic.Field(
        description=("Skin temperature deviation from the long-term temperature average::celcius\n")
    )
    skin_temperature: typing.Optional[float] = pydantic.Field(description=("The skin temperature::celcius\n"))
    average_hrv: typing.Optional[float] = pydantic.Field(
        description=("The average heart rate variability registered during the sleep period::rmssd\n")
    )
    respiratory_rate: typing.Optional[float] = pydantic.Field(
        description=("Average respiratory rate::breaths per minute\n")
    )
    source: ClientFacingSource = pydantic.Field(description=("Source the data has come from.\n"))
    sleep_stream: typing.Optional[ClientFacingSleepStream]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
