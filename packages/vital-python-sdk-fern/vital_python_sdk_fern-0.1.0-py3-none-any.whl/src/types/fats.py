# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class Fats(pydantic.BaseModel):
    saturated: typing.Optional[float] = pydantic.Field(description=("Amount of saturated fats in grams (g)\n"))
    monounsaturated: typing.Optional[float] = pydantic.Field(
        description=("Amount of monounsaturated fats in grams (g)\n")
    )
    polyunsaturated: typing.Optional[float] = pydantic.Field(
        description=("Amount of polyunsaturated fats in grams (g)\n")
    )
    omega_3: typing.Optional[float] = pydantic.Field(
        alias="omega3", description=("Amount of Omega-3 fatty acids in grams (g)\n")
    )
    omega_6: typing.Optional[float] = pydantic.Field(
        alias="omega6", description=("Amount of Omega-6 fatty acids in grams (g)\n")
    )
    total: typing.Optional[float] = pydantic.Field(description=("Total amount of fats in grams (g)\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
