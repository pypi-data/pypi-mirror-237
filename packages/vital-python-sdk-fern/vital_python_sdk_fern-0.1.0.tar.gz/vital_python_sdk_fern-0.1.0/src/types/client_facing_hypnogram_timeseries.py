# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class ClientFacingHypnogramTimeseries(pydantic.BaseModel):
    id: typing.Optional[int] = pydantic.Field(description=("Deprecated\n"))
    timezone_offset: typing.Optional[int] = pydantic.Field(
        description=(
            "Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.\n"
        )
    )
    type: typing.Optional[str] = pydantic.Field(
        description=("The reading type of the measurement. This is applicable only to Cholesterol, IGG and IGE.\n")
    )
    unit: str = pydantic.Field(description=("enum: 1: deep, 2: light, 3: rem, 4: awake, -1: missing_data.\n"))
    timestamp: dt.datetime = pydantic.Field(description=("Depracated. The start time (inclusive) of the interval.\n"))
    start: dt.datetime = pydantic.Field(description=("The start time (inclusive) of the interval.\n"))
    end: dt.datetime = pydantic.Field(description=("The end time (exclusive) of the interval.\n"))
    value: float = pydantic.Field(
        description=(
            'Hypnogram for sleep stages {"deep": 1, "light": 2, "rem": 3, "awake": 4, "manual": 5, "missing_data": -1}\n'
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
