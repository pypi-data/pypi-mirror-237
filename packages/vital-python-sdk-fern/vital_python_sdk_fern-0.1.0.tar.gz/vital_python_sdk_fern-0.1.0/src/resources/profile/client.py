# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import VitalEnvironment
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.client_facing_profile import ClientFacingProfile
from ...types.http_validation_error import HttpValidationError
from ...types.raw_profile import RawProfile


class ProfileClient:
    def __init__(self, *, environment: VitalEnvironment = VitalEnvironment.PRODUCTION, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def get(self, user_id: str, *, provider: typing.Optional[str] = None) -> ClientFacingProfile:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v2/summary/profile/{user_id}"),
            params={"provider": provider},
            headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientFacingProfile, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_raw(self, user_id: str, *, provider: typing.Optional[str] = None) -> RawProfile:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v2/summary/profile/{user_id}/raw"),
            params={"provider": provider},
            headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RawProfile, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncProfileClient:
    def __init__(self, *, environment: VitalEnvironment = VitalEnvironment.PRODUCTION, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def get(self, user_id: str, *, provider: typing.Optional[str] = None) -> ClientFacingProfile:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", f"v2/summary/profile/{user_id}"),
                params={"provider": provider},
                headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientFacingProfile, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_raw(self, user_id: str, *, provider: typing.Optional[str] = None) -> RawProfile:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", f"v2/summary/profile/{user_id}/raw"),
                params={"provider": provider},
                headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RawProfile, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
