# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import VitalEnvironment
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.client_facing_diagnosis_information import ClientFacingDiagnosisInformation
from ...types.client_facing_payor_search_response import ClientFacingPayorSearchResponse
from ...types.http_validation_error import HttpValidationError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InsuranceClient:
    def __init__(self, *, environment: VitalEnvironment = VitalEnvironment.PRODUCTION, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def search_payor_info(
        self, *, insurance_name: str, insurance_state: typing.Optional[str] = OMIT
    ) -> typing.List[ClientFacingPayorSearchResponse]:
        _request: typing.Dict[str, typing.Any] = {"insurance_name": insurance_name}
        if insurance_state is not OMIT:
            _request["insurance_state"] = insurance_state
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v3/insurance/search/payor"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingPayorSearchResponse], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search_diagnosis(self, *, diagnosis_query: str) -> typing.List[ClientFacingDiagnosisInformation]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "v3/insurance/search/diagnosis"),
            params={"diagnosis_query": diagnosis_query},
            headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingDiagnosisInformation], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncInsuranceClient:
    def __init__(self, *, environment: VitalEnvironment = VitalEnvironment.PRODUCTION, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def search_payor_info(
        self, *, insurance_name: str, insurance_state: typing.Optional[str] = OMIT
    ) -> typing.List[ClientFacingPayorSearchResponse]:
        _request: typing.Dict[str, typing.Any] = {"insurance_name": insurance_name}
        if insurance_state is not OMIT:
            _request["insurance_state"] = insurance_state
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "v3/insurance/search/payor"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingPayorSearchResponse], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search_diagnosis(self, *, diagnosis_query: str) -> typing.List[ClientFacingDiagnosisInformation]:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", "v3/insurance/search/diagnosis"),
                params={"diagnosis_query": diagnosis_query},
                headers=remove_none_from_headers({"x-vital-api-key": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ClientFacingDiagnosisInformation], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
