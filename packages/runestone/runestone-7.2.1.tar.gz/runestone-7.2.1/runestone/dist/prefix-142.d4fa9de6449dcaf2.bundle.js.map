{"version":3,"file":"prefix-142.d4fa9de6449dcaf2.bundle.js","mappings":"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","sources":["webpack://WebComponents/./runestone/webwork/js/webwork.js"],"sourcesContent":["import RunestoneBase from \"../../common/js/runestonebase\";\n\nwindow.wwList = {}; // Multiple Choice dictionary\n\nclass WebWork extends RunestoneBase {\n    constructor(opts) {\n        super(opts);\n        this.useRunestoneServices = true;\n        this.multipleanswers = false;\n        this.divid = opts.orig.id;\n        this.correct = null;\n        this.optional = false;\n        this.answerList = [];\n        this.correctList = [];\n        this.question = null;\n        this.caption = \"WebWork\";\n        this.containerDiv = opts.orig;\n        //this.addCaption(\"runestone\");\n        if (this.divid !== \"fakeww-ww-rs\") {\n            this.checkServer(\"webwork\", true);\n        }\n    }\n\n    restoreAnswers(data) {\n        // Restore answers from storage retrieval done in RunestoneBase\n        // sometimes data.answer can be null\n        if (!data.answer) {\n            data.answer = \"\";\n        }\n        // data.answers comes from postgresql as a JSON column type so no need to parse it.\n        this.answers = data.answer;\n        this.correct = data.correct;\n        this.percent = data.percent;\n        console.log(\n            `about to decorate the status of WW ${this.divid} ${this.correct}`\n        );\n        this.decorateStatus();\n    }\n\n    checkLocalStorage() {\n        // Repopulates MCMA questions with a user's previous answers,\n        // which were stored into local storage.\n        var storedData;\n        var answers;\n        if (this.graderactive) {\n            return;\n        }\n        var len = localStorage.length;\n        var ex = localStorage.getItem(this.localStorageKey());\n\n        if (ex !== null) {\n            try {\n                storedData = JSON.parse(ex);\n                // Save the answers so that when the question is activated we can restore.\n                this.answers = storedData.answer;\n                this.correct = storedData.correct;\n                this.percent = storedData.percent;\n                // We still decorate the webwork question even if it is not active.\n                this.decorateStatus();\n            } catch (err) {\n                // error while parsing; likely due to bad value stored in storage\n                console.log(err.message);\n                localStorage.removeItem(this.localStorageKey());\n                return;\n            }\n        }\n    }\n\n    setLocalStorage(data) {\n        var timeStamp = new Date();\n        var storageObj = {\n            answer: data.answer,\n            timestamp: timeStamp,\n            correct: data.correct,\n        };\n        localStorage.setItem(\n            this.localStorageKey(),\n            JSON.stringify(storageObj)\n        );\n    }\n\n    // This is called when the runestone_ww_check event is triggered by the webwork problem\n    // Note the webwork problem is in an iframe so we rely on this event and the data\n    // compiled and passed along with the event to \"grade\" the answer.\n    processCurrentAnswers(data) {\n        let correctCount = 0;\n        let qCount = 0;\n        let actString = \"check:\";\n        this.answerObj = {};\n        this.lastAnswerRaw = data;\n        this.answerObj.answers = {};\n        this.answerObj.mqAnswers = {};\n        // data.inputs_\n        for (let k of Object.keys(data.rh_result.answers)) {\n            qCount += 1;\n            if (data.rh_result.answers[k].score == 1) {\n                correctCount += 1;\n            }\n            this.answerObj.answers[\n                k\n            ] = `${data.rh_result.answers[k].original_student_ans}`;\n            let mqKey = `MaThQuIlL_${k}`;\n            this.answerObj.mqAnswers[mqKey] = data.inputs_ref[mqKey];\n            actString += `actual:${data.rh_result.answers[k].original_student_ans}:expected:${data.rh_result.answers[k].correct_value}:`;\n        }\n        let pct = correctCount / qCount;\n        // If this.percent is set, then runestonebase will transmit it as part of\n        // the logBookEvent API.\n        this.percent = pct;\n        this.actString =\n            actString + `correct:${correctCount}:count:${qCount}:pct:${pct}`;\n        if (pct == 1.0) {\n            this.correct = true;\n        } else {\n            this.correct = false;\n        }\n        let ls = {};\n        ls.answer = this.answerObj;\n        ls.correct = this.correct;\n        ls.percent = this.percent;\n        this.setLocalStorage(ls);\n        this.decorateStatus();\n    }\n\n    async logCurrentAnswer(sid) {\n        this.logBookEvent({\n            event: \"webwork\",\n            div_id: this.divid, //todo unmangle problemid\n            act: this.actString,\n            correct: this.correct,\n            answer: JSON.stringify(this.answerObj),\n        });\n    }\n\n    checkCurrentAnswer() {}\n}\n\n//\n// These are functions that get called in response to webwork generated events.\n// submitting the work, or showing an answer.\nfunction logWebWork(e, data) {\n    if (eBookConfig.useRunestoneServices) {\n        let wwObj = wwList[data.inputs_ref.problemUUID.replace(\"-ww-rs\", \"\")];\n        if (wwObj) {\n            wwObj.processCurrentAnswers(data);\n            wwObj.logCurrentAnswer();\n        } else {\n            console.log(\n                `Error: Could not find webwork object ${data.inputs_ref.problemUUID}`\n            );\n        }\n    }\n}\n\nfunction logShowCorrect(e, data) {\n    if (eBookConfig.useRunestoneServices) {\n        let wwObj = wwList[data.inputs_ref.problemUUID.replace(\"-ww-rs\", \"\")];\n        if (wwObj) {\n            wwObj.logBookEvent({\n                event: \"webwork\",\n                div_id: data.inputs_ref.problemUUID,\n                act: \"show\",\n            });\n        } else {\n            console.log(\n                `Error: Could not find webwork object ${data.inputs_ref.problemUUID}`\n            );\n        }\n    }\n}\n\nasync function getScores(sid, wwId) {}\n\nif (typeof window.component_factory === \"undefined\") {\n    window.component_factory = {};\n}\n\nwindow.component_factory.webwork = function (opts) {\n    return new WebWork();\n};\n\n$(function () {\n    $(\"body\").on(\"runestone_ww_check\", logWebWork);\n    $(\"body\").on(\"runestone_show_correct\", logShowCorrect);\n});\n\n$(document).on(\"runestone:login-complete\", function () {\n    $(\"[data-component=webwork]\").each(function (index) {\n        // MC\n        var opts = {\n            orig: this,\n            useRunestoneServices: eBookConfig.useRunestoneServices,\n        };\n        if ($(this).closest(\"[data-component=timedAssessment]\").length == 0) {\n            // If this element exists within a timed component, don't render it here\n            window.wwList[this.id] = new WebWork(opts);\n        }\n    });\n});\n"],"names":["window","wwList","WebWork","constructor","opts","super","this","useRunestoneServices","multipleanswers","divid","orig","id","correct","optional","answerList","correctList","question","caption","containerDiv","checkServer","restoreAnswers","data","answer","answers","percent","console","log","decorateStatus","checkLocalStorage","storedData","graderactive","localStorage","length","ex","getItem","localStorageKey","JSON","parse","err","message","removeItem","setLocalStorage","timeStamp","Date","storageObj","timestamp","setItem","stringify","processCurrentAnswers","correctCount","qCount","actString","answerObj","lastAnswerRaw","mqAnswers","k","Object","keys","rh_result","score","original_student_ans","mqKey","inputs_ref","correct_value","pct","ls","logCurrentAnswer","sid","logBookEvent","event","div_id","act","checkCurrentAnswer","logWebWork","e","eBookConfig","wwObj","problemUUID","replace","logShowCorrect","component_factory","webwork","$","on","document","each","index","closest"],"sourceRoot":""}