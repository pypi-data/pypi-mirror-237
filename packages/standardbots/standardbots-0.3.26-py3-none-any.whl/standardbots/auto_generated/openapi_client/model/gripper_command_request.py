# coding: utf-8

"""
    Standard Bots RO1 Robotics API

    Standard Bots RO1 Robotics API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@standardbots.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from standardbots.auto_generated.openapi_client import schemas  # noqa: F401


class GripperCommandRequest(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Control the gripper (end effector) of the robot

    """


    class MetaOapg:
        required = {
            "kind",
        }
        
        class properties:
            
            
            class kind(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "onrobot_2fg7": "FG7",
                        "onrobot_3fg15": "FG15",
                    }
                
                @schemas.classproperty
                def FG7(cls):
                    return cls("onrobot_2fg7")
                
                @schemas.classproperty
                def FG15(cls):
                    return cls("onrobot_3fg15")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'kind':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class onrobot_2fg7(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    required = {
                        "grip_direction",
                    }
                    
                    class properties:
                        
                        
                        class grip_direction(
                            schemas.AnyTypeSchema,
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "inward": "INWARD",
                                    "outward": "OUTWARD",
                                }
                            
                            @schemas.classproperty
                            def INWARD(cls):
                                return cls("inward")
                            
                            @schemas.classproperty
                            def OUTWARD(cls):
                                return cls("outward")
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'grip_direction':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class control_kind(
                            schemas.AnyTypeSchema,
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "move": "MOVE",
                                    "force_grip": "FORCE_GRIP",
                                }
                            
                            @schemas.classproperty
                            def MOVE(cls):
                                return cls("move")
                            
                            @schemas.classproperty
                            def FORCE_GRIP(cls):
                                return cls("force_grip")
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'control_kind':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                    
                        @staticmethod
                        def target_force() -> typing.Type['ForceUnit']:
                            return ForceUnit
                    
                        @staticmethod
                        def target_grip_width() -> typing.Type['LinearUnit']:
                            return LinearUnit
                        __annotations__ = {
                            "grip_direction": grip_direction,
                            "control_kind": control_kind,
                            "target_force": target_force,
                            "target_grip_width": target_grip_width,
                        }
            
                
                grip_direction: MetaOapg.properties.grip_direction
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["grip_direction"]) -> MetaOapg.properties.grip_direction: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["control_kind"]) -> MetaOapg.properties.control_kind: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["target_force"]) -> 'ForceUnit': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["target_grip_width"]) -> 'LinearUnit': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["grip_direction", "control_kind", "target_force", "target_grip_width", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["grip_direction"]) -> MetaOapg.properties.grip_direction: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["control_kind"]) -> typing.Union[MetaOapg.properties.control_kind, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["target_force"]) -> typing.Union['ForceUnit', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["target_grip_width"]) -> typing.Union['LinearUnit', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["grip_direction", "control_kind", "target_force", "target_grip_width", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    grip_direction: typing.Union[MetaOapg.properties.grip_direction, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    control_kind: typing.Union[MetaOapg.properties.control_kind, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    target_force: typing.Union['ForceUnit', schemas.Unset] = schemas.unset,
                    target_grip_width: typing.Union['LinearUnit', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'onrobot_2fg7':
                    return super().__new__(
                        cls,
                        *_args,
                        grip_direction=grip_direction,
                        control_kind=control_kind,
                        target_force=target_force,
                        target_grip_width=target_grip_width,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class onrobot_3fg15(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    required = {
                        "grip_direction",
                    }
                    
                    class properties:
                        
                        
                        class grip_direction(
                            schemas.AnyTypeSchema,
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "inward": "INWARD",
                                    "outward": "OUTWARD",
                                }
                            
                            @schemas.classproperty
                            def INWARD(cls):
                                return cls("inward")
                            
                            @schemas.classproperty
                            def OUTWARD(cls):
                                return cls("outward")
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'grip_direction':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                    
                        @staticmethod
                        def target_force() -> typing.Type['ForceUnit']:
                            return ForceUnit
                    
                        @staticmethod
                        def target_grip_diameter() -> typing.Type['LinearUnit']:
                            return LinearUnit
                        
                        
                        class control_kind(
                            schemas.AnyTypeSchema,
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "move": "MOVE",
                                    "force_grip": "FORCE_GRIP",
                                    "flexible_force_grip": "FLEXIBLE_FORCE_GRIP",
                                }
                            
                            @schemas.classproperty
                            def MOVE(cls):
                                return cls("move")
                            
                            @schemas.classproperty
                            def FORCE_GRIP(cls):
                                return cls("force_grip")
                            
                            @schemas.classproperty
                            def FLEXIBLE_FORCE_GRIP(cls):
                                return cls("flexible_force_grip")
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'control_kind':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "grip_direction": grip_direction,
                            "target_force": target_force,
                            "target_grip_diameter": target_grip_diameter,
                            "control_kind": control_kind,
                        }
            
                
                grip_direction: MetaOapg.properties.grip_direction
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["grip_direction"]) -> MetaOapg.properties.grip_direction: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["target_force"]) -> 'ForceUnit': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["target_grip_diameter"]) -> 'LinearUnit': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["control_kind"]) -> MetaOapg.properties.control_kind: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["grip_direction", "target_force", "target_grip_diameter", "control_kind", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["grip_direction"]) -> MetaOapg.properties.grip_direction: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["target_force"]) -> typing.Union['ForceUnit', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["target_grip_diameter"]) -> typing.Union['LinearUnit', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["control_kind"]) -> typing.Union[MetaOapg.properties.control_kind, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["grip_direction", "target_force", "target_grip_diameter", "control_kind", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    grip_direction: typing.Union[MetaOapg.properties.grip_direction, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    target_force: typing.Union['ForceUnit', schemas.Unset] = schemas.unset,
                    target_grip_diameter: typing.Union['LinearUnit', schemas.Unset] = schemas.unset,
                    control_kind: typing.Union[MetaOapg.properties.control_kind, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'onrobot_3fg15':
                    return super().__new__(
                        cls,
                        *_args,
                        grip_direction=grip_direction,
                        target_force=target_force,
                        target_grip_diameter=target_grip_diameter,
                        control_kind=control_kind,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "kind": kind,
                "onrobot_2fg7": onrobot_2fg7,
                "onrobot_3fg15": onrobot_3fg15,
            }

    
    kind: MetaOapg.properties.kind
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onrobot_2fg7"]) -> MetaOapg.properties.onrobot_2fg7: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onrobot_3fg15"]) -> MetaOapg.properties.onrobot_3fg15: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["kind", "onrobot_2fg7", "onrobot_3fg15", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onrobot_2fg7"]) -> typing.Union[MetaOapg.properties.onrobot_2fg7, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onrobot_3fg15"]) -> typing.Union[MetaOapg.properties.onrobot_3fg15, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["kind", "onrobot_2fg7", "onrobot_3fg15", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        kind: typing.Union[MetaOapg.properties.kind, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        onrobot_2fg7: typing.Union[MetaOapg.properties.onrobot_2fg7, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        onrobot_3fg15: typing.Union[MetaOapg.properties.onrobot_3fg15, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GripperCommandRequest':
        return super().__new__(
            cls,
            *_args,
            kind=kind,
            onrobot_2fg7=onrobot_2fg7,
            onrobot_3fg15=onrobot_3fg15,
            _configuration=_configuration,
            **kwargs,
        )

from standardbots.auto_generated.openapi_client.model.force_unit import ForceUnit
from standardbots.auto_generated.openapi_client.model.linear_unit import LinearUnit
