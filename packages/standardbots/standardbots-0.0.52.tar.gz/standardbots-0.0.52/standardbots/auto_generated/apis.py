# Code autogenerated by StandardBots
import urllib3
from enum import Enum
import json
from contextlib import contextmanager
from typing import Dict, Generic, TypeVar, Union

from . import models

class RobotKind(Enum):
  Live = "live"
  Simulated = "simulated"

GenericResponseType = TypeVar('GenericResponseType')
OkResponseType = TypeVar('OkResponseType')

class Response(Generic[GenericResponseType, OkResponseType]):
  data: GenericResponseType
  status: int
  response: urllib3.HTTPResponse
  def __init__(self, data: GenericResponseType, status: int, response: urllib3.HTTPResponse):
    self.data = data
    self.status = status
    self.response = response

  def ok(self) -> OkResponseType:
    if self.status != 200:
      raise Exception("Request failed with status " + str(self.status))
    return self.data

  def assert_status(self, status: int):
    if self.status != status:
      raise Exception("Expecting status " + str(self.status) + ", but found " + str(self.status))

class RequestManager:
  token: str
  host: str
  robot_kind: RobotKind
  def __init__(
    self,
    http: urllib3.PoolManager,
    token: str,
    host: str,
    robot_kind: RobotKind
  ):
    self.http = http
    self.token = token
    self.host = host
    self.robot_kind = robot_kind

  def request(self, method: str, url: str, **kwargs):
    return self.http.request(method, self.host + url, **kwargs)

  def json_headers(self) -> Dict[str, str]:
    return {
      "Content-Type": "application/json",
      "Authorization": "Bearer " + self.token,
      "robot_kind": self.robot_kind.value,
    }
  
  def close(self):
    self.http.clear()

class Default:
  _request_manager: RequestManager

  def __init__(self, request_manager: RequestManager):
    self._request_manager = request_manager

class Robot:
  _request_manager: RequestManager
  class Configuration:
    def __init__(self, request_manager: RequestManager):
      self._request_manager = request_manager


    def get_health(
      self,
    ) -> Response[
      None,
      None
    ]:
      """
      Get the current health of the robot
      """
      path = "/api/v1/health"
      response = self._request_manager.request(
        "get",
        path,
        headers=self._request_manager.json_headers(),
      )

      return Response(
        None,
        response.status,
        response
      )

    def set_configuration_control_state(
      self,
      body: models.RobotControlMode,
    ) -> Response[
      Union[
        models.RobotControlMode,
        None
      ],
      models.RobotControlMode
    ]:
      """
      Set the system which is controlling the robot
      """
      path = "/api/v1/configuration/control-mode"
      response = self._request_manager.request(
        "post",
        path,
        headers=self._request_manager.json_headers(),
        body=json.dumps(models.serialize_robot_control_mode(body)),
      )
      parsed = None
      if response.status == 200:
        parsed = models.parse_robot_control_mode(json.loads(response.data))

      return Response(
        parsed,
        response.status,
        response
      )

    def get_configuration_state_control(
      self,
    ) -> Response[
      Union[
        models.RobotControlMode,
        None
      ],
      models.RobotControlMode
    ]:
      """
      Get the system which is controlling the robot
      """
      path = "/api/v1/configuration/control-mode"
      response = self._request_manager.request(
        "get",
        path,
        headers=self._request_manager.json_headers(),
      )
      parsed = None
      if response.status == 200:
        parsed = models.parse_robot_control_mode(json.loads(response.data))

      return Response(
        parsed,
        response.status,
        response
      )

    def get_configuration_gripper(
      self,
    ) -> Response[
      Union[
        models.GripperConfiguration,
        None
      ],
      models.GripperConfiguration
    ]:
      """
      Get the current gripper configuration
      """
      path = "/api/v1/configuration/devices/gripper"
      response = self._request_manager.request(
        "get",
        path,
        headers=self._request_manager.json_headers(),
      )
      parsed = None
      if response.status == 200:
        parsed = models.parse_gripper_configuration(json.loads(response.data))

      return Response(
        parsed,
        response.status,
        response
      )

  class Control:
    def __init__(self, request_manager: RequestManager):
      self._request_manager = request_manager


    def get_arm_position(
      self,
    ) -> Response[
      Union[
        models.CombinedArmPosition,
        None
      ],
      models.CombinedArmPosition
    ]:
      """
      Get the current position of the robot arm
      """
      path = "/api/v1/control/position"
      response = self._request_manager.request(
        "get",
        path,
        headers=self._request_manager.json_headers(),
      )
      parsed = None
      if response.status == 200:
        parsed = models.parse_combined_arm_position(json.loads(response.data))

      return Response(
        parsed,
        response.status,
        response
      )

    def move_robot(
      self,
      body: models.MoveRequest,
    ) -> Response[
      Union[
        models.MoveRobotEvent,
        None
      ],
      models.MoveRobotEvent
    ]:
      """
      Control the position of the RO1 Robot arm.

      """
      path = "/api/v1/control/position"
      response = self._request_manager.request(
        "post",
        path,
        headers=self._request_manager.json_headers(),
        body=json.dumps(models.serialize_move_request(body)),
      )
      parsed = None
      if response.status == 200:
        parsed = models.parse_move_robot_event(json.loads(response.data))

      return Response(
        parsed,
        response.status,
        response
      )

    def control_brakes(
      self,
      body: models.ControlBrakesRequest,
    ) -> Response[
      Union[
        models.BrakesState,
        None
      ],
      models.BrakesState
    ]:
      """
      Control Joint Brakes in the robot

      """
      path = "/api/v1/control/brakes"
      response = self._request_manager.request(
        "post",
        path,
        headers=self._request_manager.json_headers(),
        body=json.dumps(models.serialize_control_brakes_request(body)),
      )
      parsed = None
      if response.status == 200:
        parsed = models.parse_brakes_state(json.loads(response.data))

      return Response(
        parsed,
        response.status,
        response
      )

    def get_brakes(
      self,
    ) -> Response[
      Union[
        models.ControlBrakesRequest,
        None
      ],
      models.ControlBrakesRequest
    ]:
      """
      Get the current state of the robot brakes

      """
      path = "/api/v1/control/brakes"
      response = self._request_manager.request(
        "get",
        path,
        headers=self._request_manager.json_headers(),
      )
      parsed = None
      if response.status == 200:
        parsed = models.parse_control_brakes_request(json.loads(response.data))

      return Response(
        parsed,
        response.status,
        response
      )

    def engage_emergency_stop(
      self,
      body: models.EngageEmergencyStopRequest,
    ) -> Response[
      None,
      None
    ]:
      """
      Engage Emergency braking system.
&gt; **⚠️ Warning:** This will immediately stop the robot and may cause damage to the robot or surrounding environment.

      """
      path = "/api/v1/control/emergency-stop"
      response = self._request_manager.request(
        "post",
        path,
        headers=self._request_manager.json_headers(),
        body=json.dumps(models.serialize_engage_emergency_stop_request(body)),
      )

      return Response(
        None,
        response.status,
        response
      )

    def control_gripper(
      self,
      body: models.GripperCommandRequest,
    ) -> Response[
      None,
      None
    ]:
      """
      Control the gripper (end effector) of the robot

      """
      path = "/api/v1/control/devices/gripper"
      response = self._request_manager.request(
        "post",
        path,
        headers=self._request_manager.json_headers(),
        body=json.dumps(models.serialize_gripper_command_request(body)),
      )

      return Response(
        None,
        response.status,
        response
      )

  class RoutineEditor:
    def __init__(self, request_manager: RequestManager):
      self._request_manager = request_manager


    def list_routines(
      self,
      limit: int,
      offset: int,
    ) -> Response[
      None,
      None
    ]:
      """
      List routines defined in Routine Editor UI
      """
      path = "/api/v1/routine-editor/routines"
      response = self._request_manager.request(
        "get",
        path,
        headers=self._request_manager.json_headers(),
        fields={
          "limit": models.serialize_int(limit),
          "offset": models.serialize_int(offset),
        }
      )

      return Response(
        None,
        response.status,
        response
      )

    def get_routine(
      self,
      routine_id: str,
    ) -> Response[
      Union[
        models.Routine,
        None
      ],
      models.Routine
    ]:
      """
      Get routine data by ID
      """
      path = "/api/v1/routine-editor/routines/{routineId}"
      path = path.replace("{routineId}", str(routine_id))
      response = self._request_manager.request(
        "get",
        path,
        headers=self._request_manager.json_headers(),
      )
      parsed = None
      if response.status == 200:
        parsed = models.parse_routine(json.loads(response.data))

      return Response(
        parsed,
        response.status,
        response
      )

    def load_runtime_variable(
      self,
      variable_id: str,
    ) -> Response[
      Union[
        models.RuntimeVariable,
        models.ErrorResponse,
        None
      ],
      models.RuntimeVariable
    ]:
      """
      Returns current state of a variable
      """
      path = "/api/v1/routine-editor/runtime/variables/{variableId}"
      path = path.replace("{variableId}", str(variable_id))
      response = self._request_manager.request(
        "get",
        path,
        headers=self._request_manager.json_headers(),
      )
      parsed = None
      if response.status == 200:
        parsed = models.parse_runtime_variable(json.loads(response.data))
      if response.status == 503:
        parsed = models.parse_error_response(json.loads(response.data))

      return Response(
        parsed,
        response.status,
        response
      )

    def update_runtime_variable(
      self,
      body: models.RuntimeVariable,
      variable_id: str,
    ) -> Response[
      Union[
        models.RuntimeVariable,
        None
      ],
      models.RuntimeVariable
    ]:
      """
      Update the value of a variable
      """
      path = "/api/v1/routine-editor/runtime/variables/{variableId}"
      path = path.replace("{variableId}", str(variable_id))
      response = self._request_manager.request(
        "post",
        path,
        headers=self._request_manager.json_headers(),
        body=json.dumps(models.serialize_runtime_variable(body)),
      )
      parsed = None
      if response.status == 200:
        parsed = models.parse_runtime_variable(json.loads(response.data))

      return Response(
        parsed,
        response.status,
        response
      )

  configuration: Configuration
  control: Control
  routine_editor: RoutineEditor

  def __init__(self, request_manager: RequestManager):
    self._request_manager = request_manager
    self.configuration = Robot.Configuration(request_manager)
    self.control = Robot.Control(request_manager)
    self.routine_editor = Robot.RoutineEditor(request_manager)




class StandardBotsRobot(Default):
  RobotKind = RobotKind

  robot: Robot
  def __init__(
    self,
    url: str,
    token: str,
    robot_kind: RobotKind = RobotKind.Live,
    pools: int = 10
  ):
    super().__init__(RequestManager(
      urllib3.PoolManager(num_pools=2),
      token=token,
      host=url,
      robot_kind=robot_kind,
    ))
    self.robot = Robot(self._request_manager)

  @contextmanager
  def connection(self):
    yield
    self._request_manager.close()

