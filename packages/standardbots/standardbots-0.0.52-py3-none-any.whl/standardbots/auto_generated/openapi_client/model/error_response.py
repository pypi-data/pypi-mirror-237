# coding: utf-8

"""
    Standard Bots RO1 Robotics API

    Standard Bots RO1 Robotics API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@standardbots.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from standardbots.auto_generated.openapi_client import schemas  # noqa: F401


class ErrorResponse(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Error Response
    """


    class MetaOapg:
        required = {
            "code",
            "message",
        }
        
        class properties:
            
            
            class code(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "authorization_required": "AUTHORIZATION_REQUIRED",
                        "routine_must_be_running": "ROUTINE_MUST_BE_RUNNING",
                        "api_control_required": "API_CONTROL_REQUIRED",
                        "robot_brakes_disengage_failed": "ROBOT_BRAKES_DISENGAGE_FAILED",
                        "robot_brakes_engage_failed": "ROBOT_BRAKES_ENGAGE_FAILED",
                        "request_failed_validation": "REQUEST_FAILED_VALIDATION",
                        "brakes_must_be_engaged": "BRAKES_MUST_BE_ENGAGED",
                        "brakes_must_be_disengaged": "BRAKES_MUST_BE_DISENGAGED",
                    }
                
                @schemas.classproperty
                def AUTHORIZATION_REQUIRED(cls):
                    return cls("authorization_required")
                
                @schemas.classproperty
                def ROUTINE_MUST_BE_RUNNING(cls):
                    return cls("routine_must_be_running")
                
                @schemas.classproperty
                def API_CONTROL_REQUIRED(cls):
                    return cls("api_control_required")
                
                @schemas.classproperty
                def ROBOT_BRAKES_DISENGAGE_FAILED(cls):
                    return cls("robot_brakes_disengage_failed")
                
                @schemas.classproperty
                def ROBOT_BRAKES_ENGAGE_FAILED(cls):
                    return cls("robot_brakes_engage_failed")
                
                @schemas.classproperty
                def REQUEST_FAILED_VALIDATION(cls):
                    return cls("request_failed_validation")
                
                @schemas.classproperty
                def BRAKES_MUST_BE_ENGAGED(cls):
                    return cls("brakes_must_be_engaged")
                
                @schemas.classproperty
                def BRAKES_MUST_BE_DISENGAGED(cls):
                    return cls("brakes_must_be_disengaged")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            message = schemas.AnyTypeSchema
            __annotations__ = {
                "code": code,
                "message": message,
            }

    
    code: MetaOapg.properties.code
    message: MetaOapg.properties.message
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["code", "message", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["code", "message", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        code: typing.Union[MetaOapg.properties.code, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        message: typing.Union[MetaOapg.properties.message, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ErrorResponse':
        return super().__new__(
            cls,
            *_args,
            code=code,
            message=message,
            _configuration=_configuration,
            **kwargs,
        )
