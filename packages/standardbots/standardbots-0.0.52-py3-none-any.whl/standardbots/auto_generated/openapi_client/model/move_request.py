# coding: utf-8

"""
    Standard Bots RO1 Robotics API

    Standard Bots RO1 Robotics API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@standardbots.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from standardbots.auto_generated.openapi_client import schemas  # noqa: F401


class MoveRequest(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Move the robot
    """


    class MetaOapg:
        required = {
            "kind",
        }
        
        class properties:
            
            
            class kind(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "tooltip_positions": "TOOLTIP_POSITIONS",
                        "tooltip_position": "TOOLTIP_POSITION",
                        "joint_rotations": "JOINT_ROTATIONS",
                        "joint_rotation": "JOINT_ROTATION",
                    }
                
                @schemas.classproperty
                def TOOLTIP_POSITIONS(cls):
                    return cls("tooltip_positions")
                
                @schemas.classproperty
                def TOOLTIP_POSITION(cls):
                    return cls("tooltip_position")
                
                @schemas.classproperty
                def JOINT_ROTATIONS(cls):
                    return cls("joint_rotations")
                
                @schemas.classproperty
                def JOINT_ROTATION(cls):
                    return cls("joint_rotation")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'kind':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            tooltip_positions = schemas.AnyTypeSchema
        
            @staticmethod
            def tooltip_position() -> typing.Type['ArmTooltipPosition']:
                return ArmTooltipPosition
            joint_rotations = schemas.AnyTypeSchema
        
            @staticmethod
            def joint_rotation() -> typing.Type['ArmJointRotations']:
                return ArmJointRotations
            
            
            class response(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    required = {
                        "kind",
                    }
                    
                    class properties:
                        
                        
                        class kind(
                            schemas.AnyTypeSchema,
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "sync": "SYNC",
                                    "event_stream": "EVENT_STREAM",
                                }
                            
                            @schemas.classproperty
                            def SYNC(cls):
                                return cls("sync")
                            
                            @schemas.classproperty
                            def EVENT_STREAM(cls):
                                return cls("event_stream")
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'kind':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class event_stream(
                            schemas.AnyTypeSchema,
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "subscriptions",
                                }
                                
                                class properties:
                                    subscriptions = schemas.AnyTypeSchema
                                    __annotations__ = {
                                        "subscriptions": subscriptions,
                                    }
                        
                            
                            subscriptions: MetaOapg.properties.subscriptions
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["subscriptions"]) -> MetaOapg.properties.subscriptions: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["subscriptions", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["subscriptions"]) -> MetaOapg.properties.subscriptions: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subscriptions", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                subscriptions: typing.Union[MetaOapg.properties.subscriptions, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'event_stream':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    subscriptions=subscriptions,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "kind": kind,
                            "event_stream": event_stream,
                        }
            
                
                kind: MetaOapg.properties.kind
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["event_stream"]) -> MetaOapg.properties.event_stream: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["kind", "event_stream", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["event_stream"]) -> typing.Union[MetaOapg.properties.event_stream, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["kind", "event_stream", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    kind: typing.Union[MetaOapg.properties.kind, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    event_stream: typing.Union[MetaOapg.properties.event_stream, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'response':
                    return super().__new__(
                        cls,
                        *_args,
                        kind=kind,
                        event_stream=event_stream,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "kind": kind,
                "tooltip_positions": tooltip_positions,
                "tooltip_position": tooltip_position,
                "joint_rotations": joint_rotations,
                "joint_rotation": joint_rotation,
                "response": response,
            }

    
    kind: MetaOapg.properties.kind
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tooltip_positions"]) -> MetaOapg.properties.tooltip_positions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tooltip_position"]) -> 'ArmTooltipPosition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["joint_rotations"]) -> MetaOapg.properties.joint_rotations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["joint_rotation"]) -> 'ArmJointRotations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["response"]) -> MetaOapg.properties.response: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["kind", "tooltip_positions", "tooltip_position", "joint_rotations", "joint_rotation", "response", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tooltip_positions"]) -> typing.Union[MetaOapg.properties.tooltip_positions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tooltip_position"]) -> typing.Union['ArmTooltipPosition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["joint_rotations"]) -> typing.Union[MetaOapg.properties.joint_rotations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["joint_rotation"]) -> typing.Union['ArmJointRotations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["response"]) -> typing.Union[MetaOapg.properties.response, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["kind", "tooltip_positions", "tooltip_position", "joint_rotations", "joint_rotation", "response", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        kind: typing.Union[MetaOapg.properties.kind, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        tooltip_positions: typing.Union[MetaOapg.properties.tooltip_positions, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        tooltip_position: typing.Union['ArmTooltipPosition', schemas.Unset] = schemas.unset,
        joint_rotations: typing.Union[MetaOapg.properties.joint_rotations, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        joint_rotation: typing.Union['ArmJointRotations', schemas.Unset] = schemas.unset,
        response: typing.Union[MetaOapg.properties.response, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MoveRequest':
        return super().__new__(
            cls,
            *_args,
            kind=kind,
            tooltip_positions=tooltip_positions,
            tooltip_position=tooltip_position,
            joint_rotations=joint_rotations,
            joint_rotation=joint_rotation,
            response=response,
            _configuration=_configuration,
            **kwargs,
        )

from standardbots.auto_generated.openapi_client.model.arm_joint_rotations import ArmJointRotations
from standardbots.auto_generated.openapi_client.model.arm_tooltip_position import ArmTooltipPosition
