# coding: utf-8

"""
    Standard Bots RO1 Robotics API

    Standard Bots RO1 Robotics API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@standardbots.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from standardbots.auto_generated.openapi_client import schemas  # noqa: F401


class CombinedArmPosition(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "joint_rotations",
            "tooltip_position",
        }
        
        class properties:
            joint_rotations = schemas.AnyTypeSchema
        
            @staticmethod
            def tooltip_position() -> typing.Type['ArmTooltipPosition']:
                return ArmTooltipPosition
            __annotations__ = {
                "joint_rotations": joint_rotations,
                "tooltip_position": tooltip_position,
            }

    
    joint_rotations: MetaOapg.properties.joint_rotations
    tooltip_position: 'ArmTooltipPosition'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["joint_rotations"]) -> MetaOapg.properties.joint_rotations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tooltip_position"]) -> 'ArmTooltipPosition': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["joint_rotations", "tooltip_position", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["joint_rotations"]) -> MetaOapg.properties.joint_rotations: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tooltip_position"]) -> 'ArmTooltipPosition': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["joint_rotations", "tooltip_position", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        joint_rotations: typing.Union[MetaOapg.properties.joint_rotations, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        tooltip_position: 'ArmTooltipPosition',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CombinedArmPosition':
        return super().__new__(
            cls,
            *_args,
            joint_rotations=joint_rotations,
            tooltip_position=tooltip_position,
            _configuration=_configuration,
            **kwargs,
        )

from standardbots.auto_generated.openapi_client.model.arm_tooltip_position import ArmTooltipPosition
