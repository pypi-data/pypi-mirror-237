# coding: utf-8

"""
    Standard Bots RO1 Robotics API

    Standard Bots RO1 Robotics API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@standardbots.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from standardbots.auto_generated.openapi_client import schemas  # noqa: F401


class OnRobot2FG7GripperCommandRequest(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Control the OnRobot 2FG7 gripper (end effector) of the robot

    """


    class MetaOapg:
        required = {
            "grip_direction",
        }
        
        class properties:
            
            
            class grip_direction(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "inward": "INWARD",
                        "outward": "OUTWARD",
                    }
                
                @schemas.classproperty
                def INWARD(cls):
                    return cls("inward")
                
                @schemas.classproperty
                def OUTWARD(cls):
                    return cls("outward")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'grip_direction':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class control_kind(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "move": "MOVE",
                        "force_grip": "FORCE_GRIP",
                    }
                
                @schemas.classproperty
                def MOVE(cls):
                    return cls("move")
                
                @schemas.classproperty
                def FORCE_GRIP(cls):
                    return cls("force_grip")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'control_kind':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def target_force() -> typing.Type['CommonForceUnit']:
                return CommonForceUnit
        
            @staticmethod
            def target_grip_width() -> typing.Type['CommonLinearUnit']:
                return CommonLinearUnit
            __annotations__ = {
                "grip_direction": grip_direction,
                "control_kind": control_kind,
                "target_force": target_force,
                "target_grip_width": target_grip_width,
            }

    
    grip_direction: MetaOapg.properties.grip_direction
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grip_direction"]) -> MetaOapg.properties.grip_direction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["control_kind"]) -> MetaOapg.properties.control_kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_force"]) -> 'CommonForceUnit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_grip_width"]) -> 'CommonLinearUnit': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["grip_direction", "control_kind", "target_force", "target_grip_width", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grip_direction"]) -> MetaOapg.properties.grip_direction: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["control_kind"]) -> typing.Union[MetaOapg.properties.control_kind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_force"]) -> typing.Union['CommonForceUnit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_grip_width"]) -> typing.Union['CommonLinearUnit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["grip_direction", "control_kind", "target_force", "target_grip_width", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        grip_direction: typing.Union[MetaOapg.properties.grip_direction, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        control_kind: typing.Union[MetaOapg.properties.control_kind, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        target_force: typing.Union['CommonForceUnit', schemas.Unset] = schemas.unset,
        target_grip_width: typing.Union['CommonLinearUnit', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnRobot2FG7GripperCommandRequest':
        return super().__new__(
            cls,
            *_args,
            grip_direction=grip_direction,
            control_kind=control_kind,
            target_force=target_force,
            target_grip_width=target_grip_width,
            _configuration=_configuration,
            **kwargs,
        )

from standardbots.auto_generated.openapi_client.model.common_force_unit import CommonForceUnit
from standardbots.auto_generated.openapi_client.model.common_linear_unit import CommonLinearUnit
