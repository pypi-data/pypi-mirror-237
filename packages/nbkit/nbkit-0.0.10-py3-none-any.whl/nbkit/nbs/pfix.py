# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/nbs/04_pfix.ipynb.

# %% auto 0
__all__ = ['NotebookPrefixer']

# %% ../../nbs/nbs/04_pfix.ipynb 4
import os, pwd
from typing import  Optional
from dataclasses import dataclass, field
from atyp import IntQ, StrQ, BoolQ

# %% ../../nbs/nbs/04_pfix.ipynb 5
from .utils.file import next_nbnum

# %% ../../nbs/nbs/04_pfix.ipynb 7
@dataclass
class NotebookPrefixer:
    '''A utility class to manage notebook numbering and prefixing.

    This class provides a way to find the next available notebook number in a directory. 
    It can either return the smallest missing prefix or the next maximum prefix, depending on the parameters. 
    It allows for both class-level and instance-level usage.

    Attributes
    ----------
    prefix_dir : str, default: os.getcwd()
        The directory path to search for notebook files. Defaults to the current working directory.
    
    prefix_nb : str, default: None
        A specific notebook prefix_nb to search for.
    
    maximum : bool, default: False
        If True, returns the next maximum prefix. If False, returns the smallest missing prefix.
        Does not show in representation.
    
    pad : int, default: 2
        Number of digits to pad the notebook number with. Does not show in representation.

    Methods
    -------
    next(prefix_dir: str, prefix_nb: StrQ = None, maximum: bool = False, pad: int = 2) -> int:
        Class method. Get the next available notebook number in a given directory.
        
    __call__(prefix_dir: StrQ = None, prefix_nb: StrQ = None, maximum: bool = False, pad: int = 2) -> int:
        Instance method. Get the next available notebook number in a given directory.

    Examples
    --------
    Using class method:
        >>> NotebookPrefixer.next('/path/to/notebooks')
        '03'

        >>> NotebookPrefixer.next('/Users/User/Projects/nbkit/nbs', prefix_nb='pfix')
        '04'

    Using instance:
        >>> nbdir = NotebookPrefixer('/path/to/notebooks')
        >>> nbdir()
        '03'

    '''
    prefix_dir: StrQ = field(default=None, repr=False, metadata={'help': (
        'The directory to use for the determining the prefix number if different than the dirprefix_nb of `path`.'
    )})

    prefix_nb: StrQ = field(default=None, repr=False, metadata={'help': (
        'The prefix_nb of a notebook to extract the prefix from in the specified directory.'
    )})

    maximum: BoolQ = field(default=False, repr=False, metadata={'help': (
        'Whether or not to use the maximum available numeric prefix or the first missing one.'
        'e.g. ("01", "05", "07") the difference is "08" vs "02"'
    )})

    pad: IntQ = field(default=2, repr=False, metadata={'help': (
        'The number of `0`s to pad the nbdev prefix with'
        'e.g. ("01", "02") if `pad=2`., ("001", "002") if `pad=3`.'
    )})

    @classmethod
    def next(prefix_dir: str, prefix_nb: StrQ = None, maximum: bool = False, pad: int = 2) -> int:
        '''Get the next available notebook number in a given directory.

        Parameters
        ----------
        prefix_dir : str
            The directory path to search for notebook files.
            
        prefix_nb : str, optional
            A specific notebook name to search for.

        maximum : bool, default: False
            If True, returns the next maximum prefix. If False, returns the smallest missing prefix.

        pad : int, default: 2
            Number of digits to pad the notebook number with.

        Returns
        -------
        int
            The next available or specific notebook number.

        Examples
        --------
        >>> next_nbnum('/path/to/notebooks')
        '03'
        >>> next_nbnum('/path/to/notebooks', maximum=True)
        '04'
        >>> next_nbnum('/path/to/notebooks', prefix_nb='my_notebook')
        '02'
        '''
        return next_nbnum(prefix_dir, name=prefix_nb, maximum=maximum, pad=pad)
    
    def __call__(
        self, 
        prefix_dir: StrQ = None, prefix_nb: StrQ = None, 
        maximum: bool = False, pad: int = 2
    ) -> int:
        '''Get the next available notebook number in a given directory.

        Parameters
        ----------
        prefix_dir : str
            The directory path to search for notebook files.
            
        prefix_nb : str, optional
            A specific notebook name to search for.

        maximum : bool, default: False
            If True, returns the next maximum prefix. If False, returns the smallest missing prefix.

        pad : int, default: 2
            Number of digits to pad the notebook number with.

        Returns
        -------
        int
            The next available or specific notebook number.

        Examples
        --------
        >>> next_nbnum('/path/to/notebooks')
        '03'
        >>> next_nbnum('/path/to/notebooks', maximum=True)
        '04'
        >>> next_nbnum('/path/to/notebooks', prefix_nb='my_notebook')
        '02'
        '''
        prefix_dir = prefix_dir or self.prefix_dir
        prefix_nb = prefix_nb or self.prefix_nb
        maximum = maximum if maximum is not None else self.maximum
        pad = pad or self.pad
        return next_nbnum(prefix_dir, name=prefix_nb, maximum=maximum, pad=pad)
