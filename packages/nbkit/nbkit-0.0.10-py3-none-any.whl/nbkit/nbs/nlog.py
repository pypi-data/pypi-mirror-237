# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/nbs/06_nlog.ipynb.

# %% auto 0
__all__ = ['NotebookLogger']

# %% ../../nbs/nbs/06_nlog.ipynb 4
import sys, logging
from dataclasses import dataclass

from atyp import IntQ, StrQ
from ispec import getsigkws

# %% ../../nbs/nbs/06_nlog.ipynb 6
@dataclass
class NotebookLogger(logging.Logger):
    '''Custom logger for Jupyter Notebooks with built-in stream handlers.
    
    Attributes
    ----------
    name : Optional[str]
        Name for the logger instance (default is 'NotebookLogger').
    level : Optional[int]
        Logging level, either as integer or string representation (default is logging.INFO).
    format : Optional[str]
        Logging message format (default is '%(asctime)s - %(levelname)s - %(message)s').
    
    Methods
    -------
    __post_init__:
        Initializes the logger, configuring handlers for stdout and stderr.
    __del__:
        Removes attached handlers during destruction of the object.
    '''
    name: StrQ  = 'NotebookLogger'
    level: IntQ = logging.INFO
    format: StrQ = '%(asctime)s - %(levelname)s - %(message)s'
    
    def __post_init__(self, *args, **kwargs):
        '''Post-initialization of the logger, which is invoked after dataclass instantiation.
        
        Parameters
        ----------
        *args:
            Positional arguments passed to the constructor (unused).

        **kwargs:
            Keyword arguments passed to the constructor.
        '''
        if isinstance(self.level, str):
            self.level = logging.getLevelNamesMapping()[self.level.upper()]

        kwargs.update(name=self.name, level=self.level)
        
        logkws = getsigkws(logging.Logger, **kwargs)   
        super().__init__(**logkws)
        
        fmtkws = getsigkws(logging.Formatter, **{**kwargs, **dict(fmt=self.format)})  
        self.formatter = logging.Formatter(**fmtkws)

        self._stdout = sys.stdout
        self._stderr = sys.stderr

        # Add the stream handler to the Jupyter logger
        self._stream_handler = logging.StreamHandler(self._stdout)
        self._stream_handler.setFormatter(self.formatter)
        self.addHandler(self._stream_handler)
        
        self._stderr_handler = logging.StreamHandler(self._stderr)
        self._stderr_handler.setLevel(logging.ERROR)
        self._stderr_handler.setFormatter(self.formatter)
        self.addHandler(self._stderr_handler)

    def __del__(self):
        '''Destructor method to remove all attached handlers.'''
        self.removeHandler(self._stream_handler)
        self.removeHandler(self._stderr_handler)
