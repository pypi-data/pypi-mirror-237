# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/nbs/utils/07_bool.ipynb.

# %% auto 0
__all__ = ['is_kwcell', 'is_kwpath', 'is_kwidx', 'is_code_cell', 'has_cells', 'is_nbdev', 'has__', 'is_ipy']

# %% ../../../nbs/nbs/utils/07_bool.ipynb 4
import os, re, pathlib
from nbformat import NotebookNode
from nlit.exts import EXT_IPYNB

# %% ../../../nbs/nbs/utils/07_bool.ipynb 5
from .cons import (CODE, CELLS,)
from .pttn import NBDEV_ND

# %% ../../../nbs/nbs/utils/07_bool.ipynb 8
def is_kwcell(**kwargs) -> bool:
    cell = kwargs.get('cell', None)
    return isinstance(cell, NotebookNode) and hasattr(cell, 'source') and hasattr(cell, 'cell_type')

def is_kwpath(**kwargs) -> bool:
    path = kwargs.get('path', None)
    return isinstance(path, (pathlib.Path, str)) and path.endswith(EXT_IPYNB) and os.path.exists(path)

def is_kwidx(**kwargs) -> bool:
    idx = kwargs.get('idx', None)
    return isinstance(idx, int) and idx >= 0


# %% ../../../nbs/nbs/utils/07_bool.ipynb 10
def is_code_cell(cell: NotebookNode) -> bool: 
    '''Check if the cell is a code cell.

    Parameters
    ----------
    cell : NotebookNode
        A Jupyter Notebook cell object.

    Returns
    -------
    bool
        True if it's a code cell, False otherwise.
    '''
    return hasattr(cell, 'cell_type') and cell.cell_type == CODE

def has_cells(nb: NotebookNode) -> bool:
    '''Check if the notebook has cells.

    Parameters
    ----------
    nb : NotebookNode
        A Jupyter Notebook object.

    Returns
    -------
    bool
        True if notebook has cells, False otherwise.
    '''
    return hasattr(nb, CELLS)

# %% ../../../nbs/nbs/utils/07_bool.ipynb 12
def is_nbdev(file: str) -> bool:
    '''Check if the file string following the nbdev naming convention.

    Parameters
    ----------
    file : str
        A Jupyter Notebook filename.

    Returns
    -------
    bool
        True if in nbdev format, False otherwise.
    '''
    return re.match(NBDEV_ND, file) is not None

# %% ../../../nbs/nbs/utils/07_bool.ipynb 13
def has__(file: str) -> bool:
    '''Check if the file string has an underscore.

    Parameters
    ----------
    file : str
        A Jupyter Notebook filename.

    Returns
    -------
    bool
        True if in `_` in file, False otherwise.
    '''
    return '_' in file

def is_ipy(file: str) -> bool:
    '''Check if the file string ends with `.ipynb`.

    Parameters
    ----------
    file : str
        A Jupyter Notebook filename.

    Returns
    -------
    bool
        True if in `.ipynb` in file, False otherwise.
    '''
    return file.endswith(EXT_IPYNB)
