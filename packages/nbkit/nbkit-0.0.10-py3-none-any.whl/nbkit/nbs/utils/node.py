# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/nbs/utils/10_node.ipynb.

# %% auto 0
__all__ = ['nb_add_head', 'nb_add_section', 'nb_add_tail', 'fmt_cell_type', 'fmt_cell_content', 'cell_to_html',
           'read_cell_to_html', 'fmt_cell', 'fmt_cells']

# %% ../../../nbs/nbs/utils/10_node.ipynb 4
import nbformat as nbf

from nbformat import NotebookNode
from pygments import highlight

from typing import List, Union, Iterable, Optional, overload

# %% ../../../nbs/nbs/utils/10_node.ipynb 5
from .cons import (CELLS, NBDEV_DEFAULT_EXP, AUTORELOAD, NBDEV_SHOWDOC, NBDEV_EXPORT)
from .tmpl import (H4, PRE, SECTION)
from .tsub import fmt_h1, fmt_h2, fmt_href
from .defs import getdef, getlexfmt
from .bool import is_code_cell, is_kwcell, is_kwpath, is_kwidx, has_cells
from .file import read_cell

# %% ../../../nbs/nbs/utils/10_node.ipynb 7
def nb_add_head(nb: NotebookNode, module: str, notebooks: List[str]):
    '''Add header and initial cells to a notebook.

    Parameters
    ----------
    nb : NotebookNode
        The notebook to modify.

    module : str
        The name of the module.

    notebooks : List[str]
        List of notebooks to be included in the header.
        
    Returns
    -------
    NotebookNode
        Modified notebook with added header and initial cells.
    '''
    # Add the first four cells
    header = fmt_h1(module, notebooks)
    nb[CELLS].append(nbf.v4.new_markdown_cell(header))
    nb[CELLS].append(nbf.v4.new_code_cell(f'{NBDEV_DEFAULT_EXP} {module}'))
    nb[CELLS].append(nbf.v4.new_code_cell(AUTORELOAD))
    nb[CELLS].append(nbf.v4.new_code_cell(NBDEV_SHOWDOC))
    return nb

def nb_add_section(nb: NotebookNode, section: str, path: str) -> NotebookNode:
    '''Add a new section to a notebook.

    Parameters
    ----------
    nb : NotebookNode
        The notebook to which the section will be added.
        
    section : str
        The name of the section.

    Returns
    -------
    NotebookNode
        The updated notebook with the new section.
    '''
    nb[CELLS].append(nbf.v4.new_markdown_cell(SECTION.substitute(header=fmt_h2(section), href=fmt_href(section, path))))
    return nb

# %% ../../../nbs/nbs/utils/10_node.ipynb 8
def nb_add_tail(nb: NotebookNode) -> NotebookNode:
    '''Add a tail cell to a notebook `nbdev.nbdev_export( )`

    Parameters
    ----------
    nb : NotebookNode
        The notebook to which the tail will be added.

    Returns
    -------
    NotebookNode
        The updated notebook with the new tail cell.
    '''
    nb[CELLS].append(nbf.v4.new_code_cell(NBDEV_EXPORT))
    return nb

# %% ../../../nbs/nbs/utils/10_node.ipynb 11
def fmt_cell_type(cell: NotebookNode, **kwargs) -> str:
    '''Format cell type for display.

    Parameters
    ----------
    cell : NotebookNode
        The cell to format.

    **kwargs : dict
        Additional keyword arguments.
        
    Returns
    -------
    str
        Formatted cell type string.
    '''
    fmtstr = H4.substitute(cell_type=cell.cell_type)
    return fmtstr

def fmt_cell_content(cell: NotebookNode, **kwargs) -> str:
    '''Format cell content for display.

    Parameters
    ----------
    cell : NotebookNode
        The cell to format.
        
    **kwargs : dict
        Additional keyword arguments.
        
    Other Parameters
    ----------------
    lexer : Optional[PythonLexer], optional
        A Pygments lexer object.

    formatter : Optional[HtmlFormatter], optional
        A Pygments HtmlFormatter object.

    Returns
    -------
    str
        Formatted cell content string.
    '''
    lex, fmt = getlexfmt(**kwargs)
    return highlight(cell.source, lex, fmt) if is_code_cell(cell) else PRE.substitute(source=cell.source)

# %% ../../../nbs/nbs/utils/10_node.ipynb 13
def cell_to_html(cell: NotebookNode, **kwargs) -> List[str]:
    '''Format entire cell for display.

    Parameters
    ----------
    cell : NotebookNode
        The cell to format.

    **kwargs : dict
        Additional keyword arguments.

    Other Parameters
    ----------------
    html : Optional[List[str]], optional
        A list of HTML strings to add onto.

    lexer : Optional[PythonLexer], optional
        A Pygments lexer object.

    formatter : Optional[HtmlFormatter], optional
        A Pygments HtmlFormatter object.
        
    Returns
    -------
    List[str]
        List of formatted strings.
    '''
    # html = getdef('html', **kwargs)
    html, lex, fmt = getdef('html', **kwargs), *getlexfmt(**kwargs)
    kwargs.update(html=html, lexer=lex, formatter=fmt)
    
    typestr = fmt_cell_type(cell, **kwargs)
    codestr = fmt_cell_content(cell, **kwargs)
    html.extend([typestr, codestr])
    return html


def read_cell_to_html(path: str, idx: int, **kwargs) -> List[str]:
    '''Generate HTML content for a specific cell in a notebook file.

    Parameters
    ----------
    path : str
        The path to the notebook file.

    idx : int
        The index of the cell to read.
        
    kwargs : dict
        Additional keyword arguments.

    Other Parameters
    ----------------
    html : Optional[List[str]], optional
        A list of HTML strings to add onto.

    lexer : Optional[PythonLexer], optional
        A Pygments lexer object.

    formatter : Optional[HtmlFormatter], optional
        A Pygments HtmlFormatter object.

    Returns
    -------
    List[str]
        The HTML representation of the cell.
    '''
    html, lex, fmt = getdef('html', **kwargs), *getlexfmt(**kwargs)
    kwargs.update(html=html, lexer=lex, formatter=fmt)
    cell = read_cell(path, idx, **kwargs)
    html = cell_to_html(cell, **kwargs)    
    return html


# %% ../../../nbs/nbs/utils/10_node.ipynb 14
@overload
def fmt_cell(cell: NotebookNode, **kwargs) -> List[str]: ...
@overload
def fmt_cell(path: str, idx: int, **kwargs) -> List[str]: ...
@overload
def fmt_cell(cell: Optional[NotebookNode], path: Optional[str], idx: Optional[int], **kwargs) -> List[str]: ...
@overload
def fmt_cell(cell: Optional[NotebookNode] = None, path: Optional[str] = None, idx: Optional[int] = None, *args, **kwargs) -> List[str]: ...
@overload
def fmt_cell(*args, **kwargs) -> List[str]: ...
def fmt_cell(*args, **kwargs) -> List[str]:
    '''Generate HTML content for a specific cell in a notebook file.

    Parameters
    ----------
    cell : NotebookNode
        The cell to format.

    path : str
        The path to the notebook file.

    idx : int
        The index of the cell to read.
        
    kwargs : dict
        Additional keyword arguments.

    Other Parameters
    ----------------
    html : Optional[List[str]], optional
        A list of HTML strings to add onto.

    lexer : Optional[PythonLexer], optional
        A Pygments lexer object.

    formatter : Optional[HtmlFormatter], optional
        A Pygments HtmlFormatter object.

    Returns
    -------
    List[str]
        The HTML representation of the cell.

    Notes
    -----
    This function is overloaded to handle different input types.
    
    Examples
    --------
    >>> fmt_cell(cell)
    >>> fmt_cell(path, idx)
    '''
    do_cell = is_kwcell(**kwargs)
    do_read = is_kwpath(**kwargs) and is_kwidx(**kwargs)
    if not (do_cell or do_read) and not args: return []

    html, lex, fmt = getdef('html', **kwargs), *getlexfmt(**kwargs)
    kwargs.update(html=html, lexer=lex, formatter=fmt)

    if do_cell:
        cell = kwargs.get('cell')
        return cell_to_html(cell, **kwargs)
    
    elif do_read:
        path, idx = kwargs.get('path'), kwargs.get('idx')
        return read_cell_to_html(path, idx, **kwargs)
    
    elif args and len(args) == 1 and is_kwcell(cell=args[0]): 
        return cell_to_html(args[0], **kwargs)
    
    elif args and len(args) == 2 and is_kwpath(path=args[0]) and is_kwidx(idx=args[1]):
        return read_cell_to_html(args[0], args[1], **kwargs)
    
    return html

# %% ../../../nbs/nbs/utils/10_node.ipynb 16
def fmt_cells(
    nb: Union[NotebookNode, Iterable[str]], **kwargs,
) -> List[str]:
    '''Format all cells in a notebook or an iterable.

    Parameters
    ----------
    nb : Union[NotebookNode, Iterable[str]]
        The notebook or iterable of cells to format.

    **kwargs : dict
        Additional keyword arguments.

    Other Parameters
    ----------------
    html : Optional[List[str]], optional
        A list of HTML strings to add onto.

    lexer : Optional[PythonLexer], optional
        A Pygments lexer object.

    formatter : Optional[HtmlFormatter], optional
        A Pygments HtmlFormatter object.
        
    Returns
    -------
    List[str]
        List of formatted strings for all cells.
    '''
    html, lex, fmt = getdef('html', **kwargs), *getlexfmt(**kwargs)
    kwargs.update(html=html, lexer=lex, formatter=fmt)
    for cell in (nb.cells if has_cells(nb) else nb):
        html = fmt_cell(cell, **kwargs)
    return html
