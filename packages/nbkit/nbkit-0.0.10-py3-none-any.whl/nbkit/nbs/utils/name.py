# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/nbs/utils/12_name.ipynb.

# %% auto 0
__all__ = ['make_nb_filename', 'new_nbout']

# %% ../../../nbs/nbs/utils/12_name.ipynb 4
import os
from typing import Union, Optional
from nlit.exts import EXT_IPYNB
from atyp import StrQ, BoolQ

# %% ../../../nbs/nbs/utils/12_name.ipynb 5
from .file import next_nbnum

# %% ../../../nbs/nbs/utils/12_name.ipynb 7
def make_nb_filename(
    module: str, 
    prefix: StrQ = None, add_prefix: BoolQ = True, prefix_dir: StrQ = None, 
    maximum: bool = False, pad: int = 2,
) -> str:
    '''Generate the filename for a notebook with an optional prefix.
    
    Parameters
    ----------
    module : str
        The module name for the notebook.

    prefix : str, optional
        A specific prefix to prepend to the notebook file name, by default None.
        
    add_prefix : bool, default: True
        Whether or not to add a prefix to the notebook file name, by default True.
        If True and `prefix` is None, a prefix will be generated. 

    prefix_dir : str, optional
        Directory to search for existing notebook filenames, by default None.
        
    maximum : bool, default: False
        If True, returns the next maximum prefix. If False, returns the smallest missing prefix.
        
    pad : int, default: 2
        Number of digits to pad the notebook number with, by default 2.
        
        
    Returns
    -------
    str
        The generated notebook filename.
    '''
    file = f'{module}{EXT_IPYNB}'
    
    prefix = prefix or ''
    nil_prefix = (prefix == '' or prefix is None)
    if add_prefix is False and nil_prefix:  return file
    if add_prefix is False and not nil_prefix: add_prefix = True

    if add_prefix is True and nil_prefix:
        prefix_dir = prefix_dir or os.getcwd()
        prefix = next_nbnum(path=prefix_dir, name=file, maximum=maximum, pad=pad)

    if add_prefix and not prefix.endswith('_'): prefix += '_'
    
    return f'{prefix}{file}'

def new_nbout(
    module: str, dirname: StrQ = '', 
    prefix: StrQ = None, add_prefix: BoolQ = True, prefix_dir: StrQ = None, 
    maximum: bool = False, pad: int = 2,
) -> str:
    '''
    Generate the output path for a new notebook.
    
    Parameters
    ----------
    module : str
        The module name for the notebook.
        
    dirname : str
        The directory name where the notebook will be saved.

    prefix : str, optional
        A specific prefix to prepend to the notebook file name, by default None.
        
    add_prefix : bool, default: True
        Whether or not to add a prefix to the notebook file name, by default True.
        If True and `prefix` is None, a prefix will be generated. 
        
    prefix_dir : str, optional
        Directory to search for existing notebook filenames, by default None.

    maximum : bool, default: False
        If True, returns the next maximum prefix. If False, returns the smallest missing prefix.
        
    pad : int, default: 2
        Number of digits to pad the notebook number with, by default 2.
         
    Returns
    -------
    str
        The full path to the new notebook.
    '''
    file = make_nb_filename(module, prefix, add_prefix, prefix_dir, maximum, pad)
    return os.path.join(dirname, file) if dirname else file
