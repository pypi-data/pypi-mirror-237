# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/magic/01_skip.ipynb.

# %% auto 0
__all__ = ['SkipMagic']

# %% ../../nbs/magic/01_skip.ipynb 4
from IPython.core.magic import magics_class, line_cell_magic, Magics
from ipywidgets import get_ipython

# %% ../../nbs/magic/01_skip.ipynb 6
@magics_class
class SkipMagic(Magics):
    '''
    A class that provides a magic to skip the execution of a cell based on a boolean value.
    '''
    def __init__(self, shell):
        super().__init__(shell=shell)
    
    @line_cell_magic
    def skip(self, line, cell=None):
        '''
        Skips execution of the current line/cell if line evaluates to True.
        
        Parameters
        ----------
        line : str
            The line to evaluate for skipping.
        cell : str, optional
            The cell contents to execute if line evaluates to False.
            
        Returns
        -------
        None
        '''
        if eval(line, self.shell.user_ns):
            return

        if cell:  # Only execute if there's cell content to execute
            get_ipython().ex(cell)


    def load_ipython_extension(self, shell):
        '''
        Registers the skip magic when the extension loads.
        
        Parameters
        ----------
        shell : IPython InteractiveShell
            The IPython shell instance to which the magic should be registered.
            
        Returns
        -------
        None
        '''
        shell.register_magics(self)

    def unload_ipython_extension(self, shell):
        '''
        Unregisters the skip magic when the extension unloads.
        
        Parameters
        ----------
        shell : IPython InteractiveShell
            The IPython shell instance from which the magic should be unregistered.
            
        Returns
        -------
        None
        '''
        del shell.magics_manager.magics['cell']['skip']
        del shell.magics_manager.magics['line']['skip']


    @classmethod
    def register(cls) -> 'SkipMagic':
        ipy = get_ipython()
        ins = cls(shell=ipy)
        ipy.register_magics(ins)
        return ins
