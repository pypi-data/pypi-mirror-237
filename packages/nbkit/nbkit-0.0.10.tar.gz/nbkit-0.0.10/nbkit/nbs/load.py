# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/nbs/01_load.ipynb.

# %% auto 0
__all__ = ['NotebookLoader']

# %% ../../nbs/nbs/01_load.ipynb 4
import sys, types
from IPython import get_ipython
from IPython.core.interactiveshell import InteractiveShell
from typing import Optional

from atyp import StrQ

# %% ../../nbs/nbs/01_load.ipynb 5
from .utils.file import find_nb, read_nb
from .utils.bool import is_code_cell

# %% ../../nbs/nbs/01_load.ipynb 7
class NotebookLoader(object):
    '''Module Loader for Jupyter Notebooks
    
    This class is responsible for loading Jupyter notebooks as Python modules, making
    it easier to import code from a notebook into another notebook or Python script.
    
    Attributes
    ----------
    shell : InteractiveShell
        The IPython shell instance.

    path : str, optional
        The file path to search for notebooks. Default is None.

    verb : bool, default: False
        Verbose flag to indicate whether to print loading details. Default is False.

    Methods
    -------
    load_module(fullname: str) -> types.ModuleType
        Load a Jupyter notebook as a Python module.

    Notes
    -----
    This class uses `find_nb` to search for Jupyter notebooks and loads them as Python modules.

    See Also
    --------
    find_nb : Function to find the notebook file in the specified paths.
    '''

    def __init__(self, path: StrQ = None, verbose: bool = False):
        '''Initialize the NotebookLoader.
        
        Parameters
        ----------
        path : StrQ, optional
            The file path to search for notebooks, by default None

        verbose : bool, optional
            Whether to print additional details during the loading process, by default False
        '''
        self.shell = InteractiveShell.instance()
        self.path = path
        self.verb = verbose

    def load_module(self, fullname: str) -> types.ModuleType:
        '''Load a Jupyter notebook as a Python module.
        
        Parameters
        ----------
        fullname : str
            Full name of the module to be loaded (typically the notebook name).
        
        Returns
        -------
        types.ModuleType
            Loaded module.
        '''
        path = find_nb(fullname, [self.path])

        if self.verb: print("importing Jupyter notebook from %s" % path)

        # load the notebook object
        nb = read_nb(path)

        # create the module and add it to sys.modules
        # if name in sys.modules:
        #    return sys.modules[name]
        mod = types.ModuleType(fullname)
        mod.__file__ = path
        mod.__loader__ = self
        mod.__dict__['get_ipython'] = get_ipython
        sys.modules[fullname] = mod

        # extra work to ensure that magics that would affect the user_ns
        # actually affect the notebook module's ns
        save_user_ns = self.shell.user_ns
        self.shell.user_ns = mod.__dict__

        try:
          for cell in nb.cells:
            if is_code_cell(cell):
                # transform the input to executable Python
                code = self.shell.input_transformer_manager.transform_cell(cell.source)
                # run the code in themodule
                exec(code, mod.__dict__)

        finally:
            self.shell.user_ns = save_user_ns
            
        return mod
