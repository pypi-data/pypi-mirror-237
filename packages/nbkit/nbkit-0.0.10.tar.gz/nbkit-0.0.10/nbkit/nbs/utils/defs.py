# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/nbs/utils/05_defs.ipynb.

# %% auto 0
__all__ = ['getdef', 'getlexfmt']

# %% ../../../nbs/nbs/utils/05_defs.ipynb 4
import os, pathlib, nbformat as nbf
from pygments.lexers import PythonLexer
from pygments.formatters import HtmlFormatter
from nbformat import NotebookNode

from typing import List, Tuple, Union, Optional

from nchr import NIL 
from nlit.exts import EXT_IPYNB

# %% ../../../nbs/nbs/utils/05_defs.ipynb 6
def getdef(var: str, **kwargs) -> Union[list, str, pathlib.Path, PythonLexer, HtmlFormatter, NotebookNode, bool, None]:
    '''
    Retrieve default value for a given variable name.

    Parameters
    ----------
    var : str
        Name of the variable.
        
    kwargs : dict
        Additional keyword arguments.

    Returns
    -------
    Union[list, str, pathlib.Path, PythonLexer, HtmlFormatter, NotebookNode, bool, None]
        Default value of the specified variable.
    '''
    val = kwargs.get(var, None)
    if val is not None: return val
    match var:
        case 'path':
            val: Union[str, pathlib.Path] = kwargs.get('file', NIL)
            return val
        case 'paths':
            val: List[Union[str, pathlib.Path]] = kwargs.get('file', [NIL])
            return val
        case 'html': 
            val: Optional[List[str]] = list()
            return val
        case 'lexer': 
            val: Optional[PythonLexer] = PythonLexer()
            return val
        case 'formatter': 
            val: Optional[HtmlFormatter] = HtmlFormatter()
            return val
        case 'nb': 
            val: NotebookNode = NotebookNode()
            return val
        case 'module': 
            path: str = getdef('path', **kwargs)
            val: str = os.path.basename(path)
            return val
        case 'output': 
            path: str = getdef('path', **kwargs)
            pfix: str = getdef('prefix', **kwargs)
            mod:  str = getdef('module', **kwargs)
            val:  str = os.path.join(os.path.dirname(path), f'{pfix}{mod}{EXT_IPYNB}')
            return val
        case 'ignore': 
            val: List[str] = list()
            return val
        case 'prefix': 
            val: Optional[Union[bool, str]] = True
            return val
        case 'prefix_dir': 
            path: str = getdef('path', **kwargs)
            val: Optional[str] = os.path.dirname(path)
            return val
        case 'lex':  return getdef('lexer', **kwargs)
        case 'fmt':  return getdef('formatter', **kwargs)
        case _:
            return None

# %% ../../../nbs/nbs/utils/05_defs.ipynb 7
def getlexfmt(
    lexer: Optional[PythonLexer] = None,  formatter: Optional[HtmlFormatter] = None,  **kwargs
) -> Tuple[PythonLexer, HtmlFormatter]:
    '''Retrieve lexer and formatter objects from kwargs.

    Parameters
    ----------
    lexer : Optional[PythonLexer]
        A Pygments lexer object, optional.

    formatter : Optional[HtmlFormatter]
        A Pygments HtmlFormatter object, optional.
        
    kwargs : dict
        Additional keyword arguments.

    Returns
    -------
    Tuple[PythonLexer, HtmlFormatter]
        A tuple containing lexer and formatter objects.
    '''
    kwargs.update(lexer=lexer, formatter=formatter)
    lexer: PythonLexer = getdef('lexer', **kwargs)
    formatter: HtmlFormatter = getdef('formatter', **kwargs)
    return lexer, formatter
