# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/nbs/02_find.ipynb.

# %% auto 0
__all__ = ['NotebookFinder']

# %% ../../nbs/nbs/02_find.ipynb 4
import os
from typing import Optional

# %% ../../nbs/nbs/02_find.ipynb 5
from .utils.file import find_nb
from .utils.misc import register_hook
from .load import NotebookLoader

# %% ../../nbs/nbs/02_find.ipynb 7
class NotebookFinder(object):
    '''A module finder for locating and caching Jupyter notebook loaders.

    This class maintains a dictionary of `NotebookLoader` instances, keyed by the notebook path.
    It provides a way to find and return an appropriate `NotebookLoader` for the given Jupyter notebook.
    Upon initialization, it also registers itself into the system's meta-path.

    Attributes
    ----------
    loaders : dict
        A cache of `NotebookLoader` instances, keyed by notebook path.

    Methods
    -------
    find_module(fullname: str, path: Optional[str] = None) -> Optional[NotebookLoader]
        Search for a notebook module and return a corresponding `NotebookLoader` if found.

    register()
        Register the NotebookFinder instance into the system's meta-path.

    Examples
    --------
    >>> finder = NotebookFinder()
    >>> loader = finder.find_module('my_notebook', './notebooks')
    >>> isinstance(loader, NotebookLoader)
    True

    >>> loader = finder.find_module('nonexistent_notebook')
    >>> loader is None
    True
    '''
    
    def __init__(self, register: bool = True):
        '''Initialize a new NotebookFinder instance.
        
        Parameters
        ----------
        register : bool, defualt: True
            Whether to register the instance into the system's meta-path on `__init__`. Defaults to True.
        '''
        self.loaders = {}
        if register: self.register()

    def find_module(self, fullname: str, path: Optional[str] = None) -> Optional[NotebookLoader]:
        '''Search for a notebook module and return a `NotebookLoader` if found.

        Parameters
        ----------
        fullname : str
            The fully qualified name of the notebook.

        path : str, optional
            The directory path to search for the notebook. Defaults to None, which implies the current directory.

        Returns
        -------
        loader : Optional[NotebookLoader]
            A NotebookLoader instance corresponding to the notebook if found; otherwise, returns `None`.

        Notes
        -----
        If the notebook exists in the path, it will first look for it in the `loaders` cache.
        If not found in cache, it will create a new `NotebookLoader` instance and add it to the cache.

        Examples
        --------
        >>> finder = NotebookFinder()
        >>> loader = finder.find_module('existing_notebook')
        >>> isinstance(loader, NotebookLoader)
        True

        >>> loader = finder.find_module('nonexistent_notebook')
        >>> loader is None
        True
        '''
        nb_path = find_nb(fullname, [path])
        if not nb_path: return

        key = path
        if path: key = os.path.sep.join(path) # lists aren't hashable

        if key not in self.loaders:
            self.loaders[key] = NotebookLoader(path)
        return self.loaders[key]
    
    def register(self):
        '''Register the NotebookFinder instance into the system's meta-path.
        
        Registers the current instance into `sys.meta_path` to allow it to
        find and load Jupyter notebook modules.

        Examples
        --------
        >>> finder = NotebookFinder()
        >>> finder in sys.meta_path
        True
        '''
        register_hook(self)
