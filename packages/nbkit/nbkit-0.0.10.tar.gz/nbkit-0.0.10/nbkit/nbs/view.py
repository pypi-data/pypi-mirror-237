# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/nbs/03_view.ipynb.

# %% auto 0
__all__ = ['NotebookViewer']

# %% ../../nbs/nbs/03_view.ipynb 4
from IPython.display import  DisplayHandle
from pygments.lexers import PythonLexer
from pygments.formatters import HtmlFormatter

from typing import Optional
from dataclasses import dataclass, field

# %% ../../nbs/nbs/03_view.ipynb 5
from .utils.file import read_cell
from .utils.node import fmt_cell
from .utils.show import show_css, show_cell, show_nb
from .utils.tmpl import STYLE

# %% ../../nbs/nbs/03_view.ipynb 7
@dataclass
class NotebookViewer(object):
    '''A class for viewing and displaying Jupyter notebooks in HTML format.

    Attributes
    ----------
    path : str
        The file path to the Jupyter notebook.

    lex : Optional[PythonLexer]
        The Pygments lexer object for Python code.

    fmt : Optional[HtmlFormatter]
        The Pygments HtmlFormatter object for formatting Python code.

    Methods
    -------
    read_cell(idx: int, path: Optional[str] = None) -> Optional[DisplayHandle]
        Read a specific cell from the notebook and display it.

    show_cell(idx: int, path: Optional[str] = None) -> Optional[DisplayHandle]
        Display a specific cell from the notebook in HTML format.

    fmt_cell(idx: int, path: Optional[str] = None) -> Optional[DisplayHandle]
        Generate HTML content for a specific cell in the notebook.

    show_nb(path: Optional[str] = None) -> Optional[DisplayHandle]
        Display the notebook in HTML format.

    show_css() -> Optional[DisplayHandle]
        Display the CSS styles for Pygments highlighting.

    Examples
    --------
    >>> viewer = NotebookViewer('my_notebook.ipynb')
    >>> viewer.read_cell(0)
    >>> viewer.show_cell(1)
    >>> viewer.show_nb()
    >>> viewer.show_css()
    '''
    path: str
    lex: Optional[PythonLexer] = field(default_factory=PythonLexer, init=True, repr=False)
    fmt: Optional[HtmlFormatter] = field(default_factory=HtmlFormatter, init=True, repr=False)    

    def __post_init__(self):
        '''Post-initialization method for NotebookViewer.'''
        # publish the CSS for pygments highlighting
        style_defs = self.fmt.get_style_defs()    
        self.style = STYLE.substitute(style=style_defs)
        self.show_css(formatter=self.fmt)

    def read_cell(self, idx: int, path: Optional[str] = None) -> Optional[DisplayHandle]:
        '''Read a specific cell from the notebook and display it.
        
        Parameters
        ----------
        idx : int
            Index of the cell to read.

        path : str, optional
            An alternate path to the notebook file. Defaults to None, which uses the class attribute.

        Returns
        -------
        Optional[DisplayHandle]
            Display handle of the content of the cell.
        '''
        path = path if path else self.path        
        return read_cell(path, idx, lexer=self.lex, formatter=self.fmt)
    
    def show_cell(self, idx: int, path: Optional[str] = None) -> Optional[DisplayHandle]:
        '''Display a specific cell from the notebook in HTML format.

        Parameters
        ----------
        idx : int
            Index of the cell to display.
        path : str, optional
            An alternate path to the notebook file. Defaults to None, which uses the class attribute.

        Returns
        -------
        Optional[DisplayHandle]
            Display handle of the HTML representation of the cell.
        '''
        path = path or self.path       
        return show_cell(path, idx, lexer=self.lex, formatter=self.fmt)

    def fmt_cell(self, idx: int, path: Optional[str] = None) -> Optional[DisplayHandle]:
        '''Generate HTML content for a specific cell in the notebook.

        Parameters
        ----------
        idx : int
            Index of the cell to display in HTML.
        path : str, optional
            An alternate path to the notebook file. Defaults to None, which uses the class attribute.

        Returns
        -------
        Optional[DisplayHandle]
            Display handle of the HTML representation of the cell.
        '''
        path = path or self.path        
        return fmt_cell(path, idx, lexer=self.lex, formatter=self.fmt)
    
    def show_nb(self, path: Optional[str] = None) -> Optional[DisplayHandle]:
        '''Display the notebook in HTML format.

        Parameters
        ----------
        path : str, optional
            An alternate path to the notebook file. Defaults to None, which uses the class attribute.

        Returns
        -------
        Optional[DisplayHandle]
            Display handle of the HTML representation of the notebook.
        '''
        path = path or self.path
        return show_nb(path)
    
    def show_css(self, **kwargs) -> Optional[DisplayHandle]:
        '''Display the CSS styles for Pygments highlighting.

        Returns
        -------
        Optional[DisplayHandle]
            Display handle of the CSS styles.
        '''
        return show_css(formatter=self.fmt)
