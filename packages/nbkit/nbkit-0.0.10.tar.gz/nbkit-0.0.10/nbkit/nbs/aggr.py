# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/nbs/05_aggr.ipynb.

# %% auto 0
__all__ = ['NotebookAggregator']

# %% ../../nbs/nbs/05_aggr.ipynb 4
import os

from nbformat import NotebookNode
from typing import List, Union, Optional

from dataclasses import dataclass, field

from atyp import IntQ, StrQ, Strs, BoolQ

# %% ../../nbs/nbs/05_aggr.ipynb 5
from .utils.file import dir_nbs, next_nbnum
from .utils.name import new_nbout
from .utils.aggr import nb_aggregate

# %% ../../nbs/nbs/05_aggr.ipynb 7
@dataclass
class NotebookAggregator:
    '''
    Class for aggregating multiple Jupyter notebooks into a single notebook.

    This class provides a way to aggregate a directory of nbdev notebooks. As part of this 
    functionality this class has methods to find the next available notebook number if following
    the nbdev naming convention. It can either return the smallest missing prefix or the next maximum prefix, depending on the parameters. 
    Additionally, this class allows for both class-level and instance-level usage.

    Attributes
    ----------
    path : str
        The directory path containing notebooks to aggregate.

    name : str, optional
        The name of the module (defaults to the basename of the path).

    prefix : str, optional
        A specific prefix to prepend to the notebook file name.

    add_prefix : bool, default: True
        Whether or not to add a prefix to the notebook file name (default is True).

    prefix_dir : str, optional
        Directory to search for existing notebook filenames.

    output : str, optional
        The output notebook file path.

    ignore : Strs, optional
        List of notebook filenames to ignore during aggregation.

    maximum : bool, default: False
        If True, returns the next maximum prefix. If False, returns the smallest missing prefix.

    pad : int, default: 2
        Number of digits to pad the notebook number with.

    Methods
    -------
    next(path: str, name: StrQ = None, maximum: bool = False, pad: int = 2) -> int:
        Class method. Get the next available notebook number in a given directory.
        
    aggr(path: str, name: StrQ = None, prefix: StrQ = None, 
        add_prefix: bool = True, prefix_dir: StrQ = None, output: StrQ = None, 
        ignore: Optional[Strs] = None, maximum: bool = False, pad: int = 2) -> NotebookNode:
        Class method. Aggregate Jupyter notebooks from a directory into a single notebook.
    
        
    Examples
    --------
    >>> NotebookAggregator(
    >>>     os.path.abspath(os.path.join('./_01_static')),
    >>>     name='static', ignore=['_00_init.ipynb']
    >>> )
    '''
    path: StrQ = field(default_factory=os.getcwd, metadata={'help': 
        'The path to the directory containing the notebooks to be aggregated.'
    })

    name: StrQ = field(default=None, metadata={'help': 
        'The name of the nbdev module. Defaults to the basename of the file specified in path.'
    })

    prefix: StrQ = field(default=None, repr=False, metadata={'help': (
        'The nbdev prefix to use. If `None` the `prefix_dir` or '
        '`dirname` of the provided `path` will be used to find '
        'the next available nbdev prefix e.g. "07".'
    )})

    add_prefix: BoolQ = field(default=True, repr=False, metadata={'help': (
             'Whether or not to add a prefix to the notebook file name.'
    )})

    prefix_dir: StrQ = field(default=None, repr=False, metadata={'help': (
        'The directory to use for the determining the prefix number if different than the dirname of `path`.'
    )})

    output: StrQ = field(default=None, metadata={'help': (
        'The output filename. This will be autogenerated if `None`.'
    )})

    ignore: Optional[Strs] = field(default_factory=list, repr=False, metadata={'help': (
        'A list of file basenames to ignore in the `path` directory.'
    )})

    maximum: BoolQ = field(default=False, repr=False, metadata={'help': (
        'Whether or not to use the maximum available numeric prefix or the first missing one.'
        'e.g. ("01", "05", "07") the difference is "08" vs "02"'
    )})

    pad: IntQ = field(default=2, repr=False, metadata={'help': (
        'The number of `0`s to pad the nbdev prefix with'
        'e.g. ("01", "02") if `pad=2`., ("001", "002") if `pad=3`.'
    )})
    
    @property
    def basename(self) -> str: 
        '''
        Get the basename of the directory path.

        Returns
        -------
        str
            The basename of the directory path.
        '''
        return os.path.basename(self.path)
    
    @property
    def dirname(self) -> str: 
        '''
        Get the parent directory name of the directory path.

        Returns
        -------
        str
            The parent directory name of the directory path.
        '''
        return os.path.dirname(self.path)
    
    @property
    def notebooks(self) -> Strs:
        '''
        Get a sorted list of notebook files in the directory path, excluding ignored files.

        Returns
        -------
        Strs
            A list of sorted notebook filenames.
        '''
        notebooks = sorted([file for file in dir_nbs(self.path) if file not in self.ignore])
        return notebooks

    def __post_init__(self):
        self.module = self.name or self.basename
        self.prefix_dir = self.prefix_dir or self.dirname

        if self.output is None:
            self.output = new_nbout(
                module=self.module, dirname=self.dirname, 
                prefix=self.prefix, add_prefix=self.add_prefix, prefix_dir=self.prefix_dir, 
                maximum=self.maximum, pad=self.pad
            )
            

    @classmethod
    def next(cls, path: str, name: StrQ = None, maximum: bool = False, pad: int = 2) -> int:
        '''Get the next available notebook number in a given directory.

        Parameters
        ----------
        path : str
            The directory path to search for notebook files.
            
        name : StrQ, optional
            A specific notebook name to search for.

        maximum : bool, optional
            If True, returns the next maximum prefix. If False, returns the smallest missing prefix.

        pad : int, optional
            Number of digits to pad the notebook number with.

        Returns
        -------
        int
            The next available or specific notebook number.

        Examples
        --------
        >>> NotebookAggregator.next('/path/to/notebooks')
        '03'
        >>> NotebookAggregator.next('/path/to/notebooks', maximum=True)
        '04'
        >>> NotebookAggregator.next('/path/to/notebooks', name='my_notebook')
        '02'
        '''
        return next_nbnum(path=path, name=name, maximum=maximum, pad=pad)
            
    @classmethod
    def aggr(
        cls, path: str, name: StrQ = None, 
        prefix: StrQ = None, add_prefix: bool = True, prefix_dir: StrQ = None, 
        output: StrQ = None, ignore: Optional[Strs] = None, maximum: bool = False, pad: int = 2
    ) -> NotebookNode:
        '''Aggregate Jupyter notebooks from a directory into a single notebook.
    
        Parameters
        ----------
        path : str
            The path to the directory containing the notebooks to be aggregated.
            
        name : str, optional
            The name of the module, by default None.
            
        prefix : str, optional
            A specific prefix to prepend to the notebook file name, by default None.
            
        add_prefix : bool, default: True
            Whether or not to add a prefix to the notebook file name, by default True.
            
        prefix_dir : str, optional
            Directory to search for existing notebook filenames, by default None.
            
        output : str, optional
            The path to the output notebook file, by default None.
            
        ignore : Strs, optional
            A list of notebook filenames to ignore, by default None.
            
        maximum : bool, default: False
            If True, returns the next maximum prefix. If False, returns the smallest missing prefix.
            
        pad : int, default: 2
            Number of digits to pad the notebook number with, by default 2.
            
        Returns
        -------
        NotebookNode
            The aggregated notebook as a NotebookNode object.
        '''
        path = path or os.getcwd()
        name = name or os.path.basename(path)
        prefix_dir = prefix_dir or os.path.dirname(path)

        prefix = prefix or cls.get_prefix(path=prefix_dir, name=name, maximum=maximum, pad=pad)
        ignore = ignore or []
        output = output or new_nbout(
            module=name, dirname=prefix_dir, prefix=prefix, add_prefix=add_prefix, prefix_dir=prefix_dir, 
            maximum=maximum, pad=pad
        )
        return cls(path, name, prefix, add_prefix, prefix_dir, output, ignore, maximum, pad)()

    def make_output_name(self, 
        module: str, dirname: StrQ = '',  
        prefix: StrQ = None, add_prefix: BoolQ = True, prefix_dir: StrQ = None, 
        maximum: bool = False, pad: int = 2,
    ) -> str:
        '''
        Generate the output path for a new notebook.
        
        Parameters
        ----------
        module : str
            The module name for the notebook.
            
        dirname : str
            The directory name where the notebook will be saved.

        prefix : str, optional
            A specific prefix to prepend to the notebook file name, by default None.
            
        add_prefix : bool, default: True
            Whether or not to add a prefix to the notebook file name, by default True.
            If True and `prefix` is None, a prefix will be generated. 
            
        prefix_dir : str, optional
            Directory to search for existing notebook filenames, by default None.

        maximum : bool, default: False
            If True, returns the next maximum prefix. If False, returns the smallest missing prefix.
            
        pad : int, default: 2
            Number of digits to pad the notebook number with, by default 2.
            
        Returns
        -------
        str
            The full path to the new notebook.
        '''
        module = module or self.module
        dirname = dirname or self.dirname
        prefix = prefix or self.prefix
        add_prefix = add_prefix or self.add_prefix
        prefix_dir = prefix_dir or self.prefix_dir
        maximum = maximum or self.maximum
        pad = pad or self.pad
        return new_nbout(
            module=module, dirname=dirname, 
            prefix=prefix, add_prefix=add_prefix, prefix_dir=prefix_dir, 
            maximum=maximum, pad=pad
        )

    def get_prefix(self, path: StrQ = None, name: StrQ = None, maximum: bool = False, pad: int = 2):
        '''Get the next available notebook number in a given directory.

        Parameters
        ----------
        path : str
            The directory path to search for notebook files.
            
        name : StrQ, optional
            A specific notebook name to search for.

        maximum : bool, optional
            If True, returns the next maximum prefix. If False, returns the smallest missing prefix.

        pad : int, optional
            Number of digits to pad the notebook number with.

        Returns
        -------
        int
            The next available or specific notebook number.

        Examples
        --------
        >>> NotebookAggregator.next('/path/to/notebooks')
        '03'
        >>> NotebookAggregator.next('/path/to/notebooks', maximum=True)
        '04'
        >>> NotebookAggregator.next('/path/to/notebooks', name='my_notebook')
        '02'
        '''
        path, name   = (path or self.prefix_dir), (name or self.module)
        maximum, pad = (maximum or self.maximum), (pad or self.pad)  
        return self.next(path=path, maximum=maximum, name=name, pad=pad)

    def aggregate(
        self, path: StrQ = None, name: StrQ = None, 
        prefix: StrQ = None, add_prefix: bool = True, prefix_dir: StrQ = None, 
        output: StrQ = None, ignore: Optional[Strs] = None, maximum: bool = False, pad: int = 2, 
        **kwargs
    ) -> NotebookNode:
        '''Aggregate Jupyter notebooks from a directory into a single notebook.
    
        Parameters
        ----------
        path : str
            The path to the directory containing the notebooks to be aggregated.
            
        name : str, optional
            The name of the module, by default None.
            
        prefix : str, optional
            A specific prefix to prepend to the notebook file name, by default None.
            
        add_prefix : bool, default: True
            Whether or not to add a prefix to the notebook file name, by default True.
            
        prefix_dir : str, optional
            Directory to search for existing notebook filenames, by default None.
            
        output : str, optional
            The path to the output notebook file, by default None.
            
        ignore : Strs, optional
            A list of notebook filenames to ignore, by default None.
            
        maximum : bool, default: False
            If True, returns the next maximum prefix. If False, returns the smallest missing prefix.
            
        pad : int, default: 2
            Number of digits to pad the notebook number with, by default 2.
            
        Returns
        -------
        NotebookNode
            The aggregated notebook as a NotebookNode object.
        '''
        path = path or self.path
        name = name or self.module
        ignore = ignore or []
        maximum = (maximum or self.maximum)
        pad = (pad or self.pad)
        
        prefix_dir = prefix_dir or self.prefix_dir
        add_prefix = add_prefix or self.add_prefix
        
        prefix = prefix or self.get_prefix(path=prefix_dir, name=name, maximum=maximum, pad=pad)  
        output = output or new_nbout(
            module=name, dirname=prefix_dir, prefix=prefix, add_prefix=add_prefix, 
            prefix_dir=prefix_dir, maximum=maximum, pad=pad
        )
        return nb_aggregate(path, name, prefix, add_prefix, prefix_dir, output, ignore, maximum, pad)
    
    def __call__(self, **kwargs) -> NotebookNode:
        return self.nb_aggregate(**kwargs)
