# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_cmds.ipynb.

# %% auto 0
__all__ = ['app', 'console', 'nbdev_agg_app', 'aggregate_notebooks', 'callback']

# %% ../nbs/00_cmds.ipynb 4
import os, typer, subprocess

from rich.console import Console

from typing import Optional, List
from typing_extensions import Annotated

# %% ../nbs/00_cmds.ipynb 5
app = typer.Typer()
console = Console()

# %% ../nbs/00_cmds.ipynb 6
from .nbs.aggr import NotebookAggregator

# %% ../nbs/00_cmds.ipynb 7
nbdev_agg_app = typer.Typer()
@app.command('nbagg')
def aggregate_notebooks(
    path: Annotated[str, typer.Option(
        '--path', '-p', help=(
            'The path to the directory containing the notebooks to be aggregated.'
    ))],

    module: Annotated[Optional[str], typer.Option(
        '--module', '-m', help=(
            'The name of the nbdev module to create. Defaults to the basename of the file specified in path.'
    ))] =  None,
    
    prefix: Annotated[Optional[str], typer.Option(
        '--prefix', '-f', help=(
            'The nbdev prefix to use. If `None` the `prefix_dir` or '
            '`dirname` of the provided `path` will be used to find '
            'the next available nbdev prefix e.g. "07".'
    ))] =  None, 

    add_prefix: Annotated[Optional[bool], typer.Option(
        '--add-prefix', '-a', help=('Whether or not to add a prefix to the notebook file name.'),
    )] =  True, 

    prefix_dir: Annotated[Optional[str], typer.Option(
        '--prefix-dir', '-n', help=(
            'The directory to use for the determining the prefix number if different than the dirname of `path`.'
    ))] =  None,

    output: Annotated[Optional[str], typer.Option(
        '--output', '-o', help='The output filename. This will be autogenerated if `None`.',
    )] =  None,

    ignore: Annotated[Optional[List[str]], typer.Option(
        '--ignore', '-i', help='A list of file basenames to ignore in the `path` directory.',
    )] =  [],

    maximum: Annotated[Optional[bool], typer.Option(
        '--maximum', '-m', help=(
        'Whether or not to use the maximum available numeric prefix or the first missing one.'
        'e.g. ("01", "05", "07") the difference is "08" vs "02"'
    ))] =  False,  

    pad: Annotated[Optional[int], typer.Option(
        '--zeros', '-z', help=(
            'The number of `0`s to pad the nbdev prefix with'
            'e.g. ("01", "02") if `pad=2`., ("001", "002") if `pad=3`.'
        ),
    )] =  2, 

    prepare: Annotated[Optional[bool], typer.Option(
        '--prepare', '-b', help=(
            'Whether or not to try and run the shell command '
            '`nbdev_prepare` after aggregating the notebooks.'
        ),
    )] =  2, 
    
   
):
    if ignore is None:
        ignore = []

    aggregator = NotebookAggregator(
        path, name=module, prefix=prefix, add_prefix=add_prefix, prefix_dir=prefix_dir, 
        output=output, ignore=ignore, maximum=maximum, pad=pad,
    )
    aggregator.aggregate()
    console.print(f"Aggregated notebook saved to {aggregator.output}", style="bold green")

    if prepare:
        # Run the shell command 'nbdev_prepare'
        try:
            subprocess.run(['nbdev_prepare'], check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error: {e}")


@app.callback()
def callback():
    '''Aggregate Jupyter notebooks from a directory into a single notebook.
    
    Parameters
    ----------
    path : str
        The path to the directory containing the notebooks to be aggregated.
        
    name : str, optional
        The name of the module, by default None.
        
    prefix : str, optional
        A specific prefix to prepend to the notebook file name, by default None.
        
    add_prefix : bool, default: True
        Whether or not to add a prefix to the notebook file name, by default True.
        
    prefix_dir : str, optional
        Directory to search for existing notebook filenames, by default None.
        
    output : str, optional
        The path to the output notebook file, by default None.
        
    ignore : List[str], optional
        A list of notebook filenames to ignore, by default None.
        
    maximum : bool, default: False
        If True, returns the next maximum prefix. If False, returns the smallest missing prefix.
        
    pad : int, default: 2
        Number of digits to pad the notebook number with, by default 2.
    '''
    pass

