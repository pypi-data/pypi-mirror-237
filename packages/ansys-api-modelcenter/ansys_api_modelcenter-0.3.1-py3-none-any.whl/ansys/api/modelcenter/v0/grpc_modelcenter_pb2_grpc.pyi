"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.modelcenter.v0.engine_messages_pb2
import grpc

class GRPCModelCenterServiceStub:
    """*
    This service is used to interact with the ModelCenter workflow engine itself;
    workflows and their contents are manipulated by the Workflow service.
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    GetEngineInfo: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.engine_messages_pb2.GetServerInfoRequest,
        ansys.api.modelcenter.v0.engine_messages_pb2.GetServerInfoResponse] = ...
    """*
    Get information about the service.
    """

    Shutdown: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.engine_messages_pb2.ShutdownRequest,
        ansys.api.modelcenter.v0.engine_messages_pb2.ShutdownResponse] = ...
    """*
    Shut down a local instance of the service.
    Naturally, this request does not block until the process has actually exited.
    The caller must monitor this separately.
    """

    Heartbeat: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.engine_messages_pb2.HeartbeatRequest,
        ansys.api.modelcenter.v0.engine_messages_pb2.HeartbeatResponse] = ...
    """*
    Send a signal that the client that started this server is still alive.
    When the server is started, it can be configured to expect a heartbeat call within a
    specified interval, and how many intervals can be missed before the client is assumed
    to have died.
    If enough calls are not received in time, the server will shutdown and log an error.
    """

    EngineGetProcessId: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.engine_messages_pb2.EngineProcessIdRequest,
        ansys.api.modelcenter.v0.engine_messages_pb2.EngineProcessIdResponse] = ...
    """*
    Get the process ID of the ModelCenter engine.
    """

    EngineLoadWorkflow: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.engine_messages_pb2.LoadWorkflowRequest,
        ansys.api.modelcenter.v0.engine_messages_pb2.LoadWorkflowResponse] = ...
    """*
    Load a workflow.
    """

    EngineCreateWorkflow: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.engine_messages_pb2.NewWorkflowRequest,
        ansys.api.modelcenter.v0.engine_messages_pb2.NewWorkflowResponse] = ...
    """*
    Create a new workflow.
    """

    EngineSetUserName: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.engine_messages_pb2.SetUserNameRequest,
        ansys.api.modelcenter.v0.engine_messages_pb2.SetUserNameResponse] = ...
    """*
    Set a username for ModelCenter to use while authenticating to ModelCenter Remote Execution.
    """

    EngineSetPassword: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.engine_messages_pb2.SetPasswordRequest,
        ansys.api.modelcenter.v0.engine_messages_pb2.SetPasswordResponse] = ...
    """*
    Set a password for ModelCenter to use while authenticating to ModelCenter Remote Execution.
    """

    EngineGetPreference: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.engine_messages_pb2.GetPreferenceRequest,
        ansys.api.modelcenter.v0.engine_messages_pb2.GetPreferenceResponse] = ...
    """*
    Get the value of a preference.
    """

    EngineSetPreference: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.engine_messages_pb2.SetPreferenceRequest,
        ansys.api.modelcenter.v0.engine_messages_pb2.SetPreferenceResponse] = ...
    """*
    Set the value of a preference.
    """

    EngineGetUnitCategories: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.engine_messages_pb2.GetUnitCategoriesRequest,
        ansys.api.modelcenter.v0.engine_messages_pb2.GetUnitCategoriesResponse] = ...
    """*
    Get the unit categories available.
    """

    EngineGetUnitNames: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.engine_messages_pb2.GetUnitNamesRequest,
        ansys.api.modelcenter.v0.engine_messages_pb2.GetUnitNamesResponse] = ...
    """*
    Get the names of the units available in a particular category.
    """


class GRPCModelCenterServiceServicer(metaclass=abc.ABCMeta):
    """*
    This service is used to interact with the ModelCenter workflow engine itself;
    workflows and their contents are manipulated by the Workflow service.
    """
    @abc.abstractmethod
    def GetEngineInfo(self,
        request: ansys.api.modelcenter.v0.engine_messages_pb2.GetServerInfoRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.engine_messages_pb2.GetServerInfoResponse:
        """*
        Get information about the service.
        """
        pass

    @abc.abstractmethod
    def Shutdown(self,
        request: ansys.api.modelcenter.v0.engine_messages_pb2.ShutdownRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.engine_messages_pb2.ShutdownResponse:
        """*
        Shut down a local instance of the service.
        Naturally, this request does not block until the process has actually exited.
        The caller must monitor this separately.
        """
        pass

    @abc.abstractmethod
    def Heartbeat(self,
        request: ansys.api.modelcenter.v0.engine_messages_pb2.HeartbeatRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.engine_messages_pb2.HeartbeatResponse:
        """*
        Send a signal that the client that started this server is still alive.
        When the server is started, it can be configured to expect a heartbeat call within a
        specified interval, and how many intervals can be missed before the client is assumed
        to have died.
        If enough calls are not received in time, the server will shutdown and log an error.
        """
        pass

    @abc.abstractmethod
    def EngineGetProcessId(self,
        request: ansys.api.modelcenter.v0.engine_messages_pb2.EngineProcessIdRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.engine_messages_pb2.EngineProcessIdResponse:
        """*
        Get the process ID of the ModelCenter engine.
        """
        pass

    @abc.abstractmethod
    def EngineLoadWorkflow(self,
        request: ansys.api.modelcenter.v0.engine_messages_pb2.LoadWorkflowRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.engine_messages_pb2.LoadWorkflowResponse:
        """*
        Load a workflow.
        """
        pass

    @abc.abstractmethod
    def EngineCreateWorkflow(self,
        request: ansys.api.modelcenter.v0.engine_messages_pb2.NewWorkflowRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.engine_messages_pb2.NewWorkflowResponse:
        """*
        Create a new workflow.
        """
        pass

    @abc.abstractmethod
    def EngineSetUserName(self,
        request: ansys.api.modelcenter.v0.engine_messages_pb2.SetUserNameRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.engine_messages_pb2.SetUserNameResponse:
        """*
        Set a username for ModelCenter to use while authenticating to ModelCenter Remote Execution.
        """
        pass

    @abc.abstractmethod
    def EngineSetPassword(self,
        request: ansys.api.modelcenter.v0.engine_messages_pb2.SetPasswordRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.engine_messages_pb2.SetPasswordResponse:
        """*
        Set a password for ModelCenter to use while authenticating to ModelCenter Remote Execution.
        """
        pass

    @abc.abstractmethod
    def EngineGetPreference(self,
        request: ansys.api.modelcenter.v0.engine_messages_pb2.GetPreferenceRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.engine_messages_pb2.GetPreferenceResponse:
        """*
        Get the value of a preference.
        """
        pass

    @abc.abstractmethod
    def EngineSetPreference(self,
        request: ansys.api.modelcenter.v0.engine_messages_pb2.SetPreferenceRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.engine_messages_pb2.SetPreferenceResponse:
        """*
        Set the value of a preference.
        """
        pass

    @abc.abstractmethod
    def EngineGetUnitCategories(self,
        request: ansys.api.modelcenter.v0.engine_messages_pb2.GetUnitCategoriesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.engine_messages_pb2.GetUnitCategoriesResponse:
        """*
        Get the unit categories available.
        """
        pass

    @abc.abstractmethod
    def EngineGetUnitNames(self,
        request: ansys.api.modelcenter.v0.engine_messages_pb2.GetUnitNamesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.engine_messages_pb2.GetUnitNamesResponse:
        """*
        Get the names of the units available in a particular category.
        """
        pass


def add_GRPCModelCenterServiceServicer_to_server(servicer: GRPCModelCenterServiceServicer, server: grpc.Server) -> None: ...
