"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.modelcenter.v0.custom_metadata_messages_pb2
import ansys.api.modelcenter.v0.element_messages_pb2
import ansys.api.modelcenter.v0.variable_value_messages_pb2
import ansys.api.modelcenter.v0.workflow_messages_pb2
import grpc

class ModelCenterWorkflowServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    ElementGetName: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.ElementName] = ...
    """*
    Get an element name.
    """

    ElementGetFullName: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.ElementName] = ...
    """*
    Get an element's full name.
    """

    ElementGetParentElement: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.workflow_messages_pb2.ElementInfo] = ...
    """*
    Get the parent element of an element.
    """

    PropertyOwnerGetProperties: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.custom_metadata_messages_pb2.MetadataPropertyNamesResponse] = ...
    """*
    Get the custom metadata properties available for an element.
    """

    PropertyOwnerSetPropertyValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.custom_metadata_messages_pb2.MetadataSetValueRequest,
        ansys.api.modelcenter.v0.custom_metadata_messages_pb2.MetadataSetValueResponse] = ...
    """*
    Set the value of a custom metadata property.

    NOT_FOUND if the specified element does not exist.
    INVALID_ARGUMENT if the property value is missing.
    """

    PropertyOwnerGetPropertyValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.custom_metadata_messages_pb2.MetadataGetValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableValue] = ...
    """*
    Get the value of a custom metadata property.

    NOT_FOUND if the specified element does not exist.
    INVALID_ARGUMENT if the specified property doesn't exist
    """

    RegistryGetVariables: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableInfoCollection] = ...
    """*
    Get the variables available on an assembly.
    """

    RegistryGetGroups: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.ElementIdCollection] = ...
    """*
    Get the groups available on an assembly.
    """

    RegistryGetControlType: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.AssemblyType] = ...
    """*
    Get the type of an assembly.
    """

    AssemblyGetAssembliesAndComponents: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.workflow_messages_pb2.ElementInfoCollection] = ...
    """*
    Get the child assemblies and components of an assembly.
    """

    AssemblyAddAssembly: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.AddAssemblyRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.AddAssemblyResponse] = ...
    """*
    Add a child assembly.

    NOT_FOUND if the specified parent assembly can't be found.
    INVALID_ARGUMENT if the name / position / type are invalid.
    ALREADY_EXISTS if there is a name collision
    """

    AssemblyAddVariable: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.AddAssemblyVariableRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.AddAssemblyVariableResponse] = ...
    """*
    Add a variable to an assembly.

    NOT_FOUND if the specified parent assembly can't be found.
    INVALID_ARGUMENT if the name / position / type are invalid.
    ALREADY_EXISTS if theere is a name collision
    """

    AssemblyDeleteVariable: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.DeleteAssemblyVariableRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.DeleteAssemblyVariableResponse] = ...
    """*
    Delete a variable on an assembly.

    NOT_FOUND if the specified parent assembly can't be found.
    No error should be raised if the specified variable is already nonexistent (see response).
    """

    AssemblyRename: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.RenameRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.RenameResponse] = ...
    """*
    Rename an assembly.

    NOT_FOUND if the specified parent assembly can't be found.
    INVALID_ARGUMENT if the new name is invalid.
    ALREADY_EXISTS if there is a name collision.
    """

    AssemblySetIcon: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.AssemblyIconSetRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.AssemblyIconSetResponse] = ...
    """*
    Set an assembly's icon.
    """

    AssemblyGetIcon: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.AssemblyIconResponse] = ...
    """*
    Get an assembly's icon.
    """

    ElementGetIndexInParent: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.ElementIndexParentResponse] = ...
    """*
    Get an element's index in its parent.
    """

    AssemblyGetAnalysisViewPosition: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.AnalysisViewPosition] = ...
    """*
    Get an assembly's position on the analysis view.
    """

    ComponentGetSource: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.ComponentSourceResponse] = ...
    """*
    Get an assembly's source.
    """

    ComponentGetPaczUrl: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.ComponentPaczUrlResponse] = ...
    """*
    Get a component's pacz URL.
    """

    ComponentRun: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.ComponentRunResponse] = ...
    """*
    Run the specified component.
    """

    ComponentInvokeMethod: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ComponentInvokeMethodRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.ComponentInvokeMethodResponse] = ...
    """*
    Invoke a method on the specified component.

    NOT_FOUND if the target component doesn't exist
    INVALID_ARGUMENT if the target method can't be found
    FAILED_PRECONDITION if the method run fails
    """

    ComponentInvalidate: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.ComponentInvalidateResponse] = ...
    """*
    Invalidate the specified component.
    """

    ComponentReconnect: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.ComponentReconnectResponse] = ...
    """*
    Reconnect or reload the specified component.

    FAILED_PRECONDITION if the reconnect fails
    """

    ComponentDownloadValues: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.ComponentDownloadValuesResponse] = ...
    """*
    Download the component's variable values if it is a ModelCenter Remote Execution component.

    FAILED_PRECONDITION if the download fails
    """

    ComponentIsConnected: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.ComponentIsConnectedResponse] = ...
    """
    Get if a component is connected to its source.
    A component may be disconnected from its source if it fails to connect on load, and
    OnConnectionModeError is set to IGNORE.
    """

    IfComponentGetExclusive: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetExclusiveResponse] = ...
    """*
    Get whether the branching condition is exclusive.
    """

    IfComponentSetExclusive: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetExclusiveRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetExclusiveResponse] = ...
    """*
    Set whether the branching condition is exclusive.
    """

    IfComponentGetRunLastBranchByDefault: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetRunLastBranchAsDefaultResponse] = ...
    """*
    Get if there is an else branch that is run if no conditions are met.
    """

    IfComponentSetRunLastBranchByDefault: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetRunLastBranchAsDefaultRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetRunLastBranchAsDefaultResponse] = ...
    """*
    Set if there is an else branch that is run if no conditions are met.
    """

    IfComponentGetNumberOfBranches: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetNumberBranchesResponse] = ...
    """*
    Get the number of branches.
    """

    IfComponentGetBranchCondition: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetBranchConditionRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetBranchConditionResponse] = ...
    """*
    Get the branch condition for a branch.
    """

    IfComponentSetBranchCondition: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetBranchConditionRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetBranchConditionResponse] = ...
    """*
    Set the branch condition for a branch.
    """

    IfComponentGetBranchName: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetBranchNameRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetBranchNameResponse] = ...
    """*
    Get the name of a branch.
    """

    IfComponentSetBranchName: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetBranchNameRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetBranchNameResponse] = ...
    """*
    Set the name of a branch.
    """

    VariableGetType: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableTypeResponse] = ...
    """*
    Get the data type of a variable.
    """

    VariableGetState: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.ElementIdOrName,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableState] = ...
    """*
    Get the state of a variable.
    """

    VariableGetDependents: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.GetVariableDependenciesRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableInfoCollection] = ...
    """*
    Finds any variables linked as an output to this variable, either returning only direct dependent variables
    or recursively fetching all dependent variables.
    """

    VariableGetPrecedents: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.GetVariableDependenciesRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableInfoCollection] = ...
    """*
    Finds any variables linked as an input to this variable, either returning only direct precedent variables
    or recursively fetching all precedent variables.
    """

    DoubleArrayGetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.DoubleArrayValue] = ...
    """TODO: May be able to delete

    *
    Get the value of a double array variable.
    """

    DoubleArraySetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetDoubleArrayValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse] = ...
    """*
    Set the value of a double array variable.

    NOT_FOUND if target variable cannot be located
    INVALID_ARGUMENT if target variable is not a double array
    OUT_OF_RANGE if bounds or enum constraints are violated
    """

    FileArrayGetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.FileArrayValue] = ...
    """TODO: May be able to delete

    *
    Get the value of a file array variable.
    If necessary, the workflow will be run such that the variable value is valid
    before the value is returned.
    """

    FileArraySetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetFileArrayValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse] = ...
    """*
    Set the value of a file array variable.
    """

    IntegerArrayGetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.IntegerArrayValue] = ...
    """TODO: May be able to delete

    *
    Get the value of a integer array variable.
    If necessary, the workflow will be run such that the variable value is valid
    before the value is returned.
    """

    IntegerArraySetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetIntegerArrayValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse] = ...
    """*
    Set the value of a integer array variable.

    NOT_FOUND if the target variable cannot be located
    INVALID_ARGUEMNT if target variable is not the right type
    OUT_OF_RANGE if bounds or enum constraints are violated
    """

    BooleanArrayGetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.BooleanArrayValue] = ...
    """TODO: May be able to delete

    *
    Get the value of a boolean array variable.
    If necessary, the workflow will be run such that the variable value is valid
    before the value is returned.
    """

    BooleanArraySetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetBooleanArrayValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse] = ...
    """*
    Set the value of a boolean array variable.

    NOT_FOUND if the target variable cannot be located
    INVALID_ARGUEMNT if target variable is not the right type
    OUT_OF_RANGE if bounds or enum constraints are violated
    """

    StringArrayGetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.StringArrayValue] = ...
    """TODO: May be able to delete

    *
    Get the value of a string array variable.
    If necessary, the workflow will be run such that the variable value is valid
    before the value is returned.
    """

    StringArraySetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetStringArrayValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse] = ...
    """*
    Set the value of a string array variable.

    NOT_FOUND if the target variable cannot be located
    INVALID_ARGUEMNT if target variable is not the right type
    OUT_OF_RANGE if bounds or enum constraints are violated
    """

    ReferenceArraySetReferencedValues: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetDoubleArrayValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse] = ...
    """*
    Set the values of the referenced variables in a reference array.

    NOT_FOUND if the target variable cannot be located
    INVALID_ARGUMENT if target variable is not the right type
    OUT_OF_RANGE if bounds or enum constraints are violated
    """

    DoubleVariableGetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.DoubleValue] = ...
    """TODO: May be able to delete

    *
    Get the value of a double variable.
    If necessary, the workflow will be run such that the variable value is valid
    before the value is returned.
    """

    DoubleVariableSetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetDoubleValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse] = ...
    """*
    Set the value of a double variable.

    NOT_FOUND if the target variable cannot be located
    INVALID_ARGUEMNT if target variable is not the right type
    OUT_OF_RANGE if bounds or enum constraints are violated
    """

    IntegerVariableGetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.IntegerValue] = ...
    """TODO: May be able to delete

    *
    Get the value of a integer variable.
    If necessary, the workflow will be run such that the variable value is valid
    before the value is returned.
    """

    IntegerVariableSetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetIntegerValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse] = ...
    """*
    Set the value of a integer variable.

    NOT_FOUND if the target variable cannot be located
    INVALID_ARGUEMNT if target variable is not the right type
    OUT_OF_RANGE if bounds or enum constraints are violated
    """

    BooleanVariableGetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.BooleanValue] = ...
    """TODO: May be able to delete

    *
    Get the value of a boolean variable.
    If necessary, the workflow will be run such that the variable value is valid
    before the value is returned.
    """

    BooleanVariableSetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetBooleanValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse] = ...
    """*
    Set the value of a boolean variable.

    NOT_FOUND if the target variable cannot be located
    INVALID_ARGUEMNT if target variable is not the right type
    OUT_OF_RANGE if bounds or enum constraints are violated
    """

    StringVariableGetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.StringValue] = ...
    """TODO: May be able to delete

    *
    Get the value of a string variable.
    If necessary, the workflow will be run such that the variable value is valid
    before the value is returned.
    """

    StringVariableSetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetStringValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse] = ...
    """*
    Set the value of a string variable.

    NOT_FOUND if the target variable cannot be located
    INVALID_ARGUEMNT if target variable is not the right type
    OUT_OF_RANGE if bounds or enum constraints are violated
    """

    FileVariableGetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.FileValue] = ...
    """TODO: May be able to delete

    *
    Get the value of a file variable.
    If necessary, the workflow will be run such that the variable value is valid
    before the value is returned.
    """

    FileVariableSetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetFileValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse] = ...
    """*
    Set the value of a file array variable.

    NOT_FOUND if the target variable cannot be located
    INVALID_ARGUMENT if target variable is not the right type
    OUT_OF_RANGE if bounds or enum constraints are violated
    """

    ReferenceVariableGetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferenceValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableState] = ...
    """*
    Get the value of a reference variable or member of a reference array variable.
    If necessary, the workflow will be run such that the variable value is valid
    before the value is returned.

    NOT_FOUND if the target variable cannot be located
    INVALID_ARGUEMNT if target variable is not the right type
    """

    ReferenceVariableSetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetReferenceValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse] = ...
    """*
    Set the value of a reference variable or member of a reference array variable.

    NOT_FOUND if the target variable cannot be located
    INVALID_ARGUEMNT if target variable is not the right type
    OUT_OF_RANGE if bounds or enum constraints are violated
    """

    VariableGetIsInput: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.element_messages_pb2.VariableIsInputResponse] = ...
    """*
    Get whether or not a variable is an input to its component and in the workflow.
    """

    BooleanVariableGetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.BooleanVariableMetadata] = ...
    """*
    Get the metadata for a boolean or boolean array variable.
    """

    DoubleVariableGetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.DoubleVariableMetadata] = ...
    """*
    Get the metadata for a double or double array variable.
    """

    IntegerVariableGetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.IntegerVariableMetadata] = ...
    """*
    Get the metadata for an integer or integer array variable.
    """

    StringVariableGetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.StringVariableMetadata] = ...
    """*
    Get the metadata for a string or string array variable.
    """

    FileVariableGetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.FileVariableMetadata] = ...
    """*
    Get the metadata for a file or file array variable.
    """

    BooleanVariableSetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetBooleanVariableMetadataRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetMetadataResponse] = ...
    """*
    Set the metadata for a boolean or boolean array variable.

    NOT_FOUND if the target element can't be found
    INVALID_ARGUMENT if the target element is not a boolean or boolean array
    """

    DoubleVariableSetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetDoubleVariableMetadataRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetMetadataResponse] = ...
    """*
    Set the metadata for a double or double array variable.

    NOT_FOUND if the target element can't be found
    INVALID_ARGUMENT if the target element is not a double or double array
    """

    IntegerVariableSetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetIntegerVariableMetadataRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetMetadataResponse] = ...
    """*
    Set the metadata for an integer or integer array variable.

    NOT_FOUND if the target element can't be found
    INVALID_ARGUMENT if the target element is not an integer or integer array
    """

    StringVariableSetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetStringVariableMetadataRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetMetadataResponse] = ...
    """*
    Set the metadata for a string or string array variable.

    NOT_FOUND if the target element can't be found
    INVALID_ARGUMENT if the target element is not a string or string array
    """

    FileVariableSetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetFileVariableMetadataRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetMetadataResponse] = ...
    """*
    Set the metadata for a file or file array variable.

    NOT_FOUND if the target element can't be found
    INVALID_ARGUMENT if the target element is not a file or file array
    """

    WorkflowGetState: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.GetWorkflowStateRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.GetWorkflowStateResponse] = ...
    """*
    Get the state of the workflow instance.

    Possible states are:
    - WorkflowInstanceState.WORKFLOW_INSTANCE_STATE_UNSPECIFIED:
       If any datapin validated by the last run no longer exists, or some other error occurs
       getting the state.
    - WorkflowInstanceState.WORKFLOW_INSTANCE_STATE_INVALID:
       If any datapin validated by the last run is not valid, or the workflow has never been
       run and the root assembly is invalid. Note that this can be returned by requesting a
       datapin that will not be validated even if the workflow runs successfully, such as
       a datapin in an inactive branch of an if-component.
    - WorkflowInstanceState.WORKFLOW_INSTANCE_STATE_RUNNING:
       If the workflow is currently running.
    - WorkflowInstanceState.WORKFLOW_INSTANCE_STATE_FAILED:
       If the last workflow run terminated due to a failure.
    - WorkflowInstanceState.WORKFLOW_INSTANCE_STATE_SUCCESS:
       If the workflow ran successfully and all requested datapins are valid.
    Note that WorkflowInstanceState.WORKFLOW_INSTANCE_STATE_PAUSED is never returned.
    """

    WorkflowRun: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowRunRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowRunResponse] = ...
    """*
    Execute the workflow.

    NOT_FOUND if the target workflow doesn't exist
    INVALID_ARGUMENT if there are:
       invalid names in the request
       mismatched types for values in the request
    OUT_OF_RANGE if input values violate enum, bounds
    """

    WorkflowStartRun: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowRunRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowStartRunResponse] = ...
    """*
    Start executing the workflow, and allow it to run asynchronously.

    NOT_FOUND if the target workflow doesn't exist
    INVALID_ARGUMENT if there are:
       invalid names in the request
       mismatched types for values in the request
    OUT_OF_RANGE if input values violate enum, bounds
    """

    WorkflowHalt: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowHaltRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowHaltResponse] = ...
    """*
    Stop executing the workflow.
    """

    WorkflowGetRoot: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowId,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowGetRootResponse] = ...
    """*
    Get the root element of the workflow.
    """

    WorkflowGetDirectory: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowId,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowGetDirectoryResponse] = ...
    """*
    Get the directory for a workflow.
    """

    WorkflowCreateComponent: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowCreateComponentRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowCreateComponentResponse] = ...
    """*
    Create a component within the workflow.

    NOT_FOUND if the parent assembly isn't found
    INVALID_ARGUMENT if:
      connection fails, name is invalid
    ALREADY_EXISTS if:
       name is invalid
    """

    WorkflowCreateLink: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowCreateLinkRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowCreateLinkResponse] = ...
    """*
    Create a link within the workflow.

    INVALID_ARGUMENT if: LHS or RHS are not valid
    """

    WorkflowSave: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowId,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowSaveResponse] = ...
    """*
    Save the workflow to its current location.
    """

    WorkflowSaveAs: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowSaveAsRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowSaveResponse] = ...
    """*
    Save the workflow to a new location.

    INVALID_ARGUMENT if: new path is not valid
    """

    WorkflowClose: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowId,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowCloseResponse] = ...
    """*
    Close the workflow.

    NOT_FOUND if specified workflow does not exist
    """

    WorkflowRemoveComponent: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowRemoveComponentRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowRemoveComponentResponse] = ...
    """*
    Remove a component from the workflow.

    Does not error if the specified component has already been removed.
    """

    WorkflowBreakLink: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowBreakLinkRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowBreakLinkResponse] = ...
    """*
    Break a link within the workflow.

    NOT_FOUND if the lhs isn't valid
    """

    WorkflowSuspendOrResumeLink: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowSuspendOrResumeLinkRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowLinkSuspension] = ...
    """*
    Suspend a link within the workflow.

    The returning message indicates whether the link WAS suspended before this RPC was called.
    A successful return indicates that the state was correctly set; a mismatch in the returned
    state does not mean that there was a failure.

    NOT_FOUND if the lhs isn't valid
    """

    WorkflowGetLinkSuspensionState: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowBreakLinkRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowLinkSuspension] = ...
    """*
    Get the suspension state of a link.
    """

    WorkflowAutoLink: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowAutoLinkRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowAutoLinkResponse] = ...
    """*
    Auto-link two components within the workflow.
    The created links are returned.

    INVALID_ARGUMENT if either component can't be located.
    """

    WorkflowGetLinksRequest: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowId,
        ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowGetLinksResponse] = ...
    """*
    Get a list of all the links in the workflow.
    """

    WorkflowGetElementByName: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.NamedElementWorkflow,
        ansys.api.modelcenter.v0.workflow_messages_pb2.ElementInfo] = ...
    """*
    Get a component or assembly's ID and type by name.
    """

    ReferenceVariableGetReferenceEquation: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferenceEquationRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferenceEquationResponse] = ...
    """*
    Get the reference equation of a reference variable.
    """

    ReferenceVariableSetReferenceEquation: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetReferenceEquationRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetReferenceEquationResponse] = ...
    """*
    Set the reference equation of a reference variable.
    """

    ReferenceVariableGetReferencedVariables: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferencedVariablesRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferencedVariablesResponse] = ...
    """*
    Get the variables referenced by a reference variable.
    """

    ReferenceVariableGetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferenceVariableMetadata] = ...
    """*
    Get variable metadata for a reference or reference array variable.

    Note that reference properties are a distinct concept from variable metadata,
    and they need to be retrieved separately.
    """

    ReferenceVariableSetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetReferenceVariableMetadataRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.SetMetadataResponse] = ...
    """*
    Set variable metadata for a reference or reference array variable.

    Note that reference properties are a distinct concept from variable metadata,
    and they need to be manipulated separately.
    """

    ReferenceVariableGetIsDirect: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferenceIsDirectRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferenceIsDirectResponse] = ...
    """*
    Get whether a reference variable refers directly to a single variable.
    """

    ReferenceVariableGetReferenceProperties: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyNames] = ...
    """*
    Get the available reference properties of a reference variable
    """

    ReferencePropertyGetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.IndexedReferencePropertyIdentifier,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableState] = ...
    """*
    Get the value of a reference property.

    The workflow is not executed to attempt to validate the property.
    An index is only required in the request if the property in question
    is a property of a reference array.
    Otherwise, the index should be blank.
    """

    ReferencePropertySetValue: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertySetValueRequest,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertySetValueResponse] = ...
    """*
    Set the value of a reference property.

    An index is only required in the request if the property in question
    is a property of a reference array.
    Otherwise, the index should be blank.
    """

    ReferencePropertyGetIsInput: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyIdentifier,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyGetIsInputResponse] = ...
    """*
    Get whether a reference property is an input.
    """

    ReferencePropertyGetTitle: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyIdentifier,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyGetTitleResponse] = ...
    """*
    Get the title of a reference property.
    """

    ReferencePropertyGetMetadata: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyIdentifier,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableMetadata] = ...
    """*
    Get the metadata items from a reference property.
    """

    ReferencePropertyGetType: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyIdentifier,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyGetTypeResponse] = ...
    """*
    Get the type of a reference property.
    """

    ReferenceArrayGetLength: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        ansys.api.modelcenter.v0.variable_value_messages_pb2.IntegerValue] = ...
    """*
    Get the length of a reference array.
    """

    ReferenceArraySetLength: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.SetReferenceArrayLengthRequest,
        ansys.api.modelcenter.v0.workflow_messages_pb2.SetReferenceArrayLengthResponse] = ...
    """*
    Set the length of a reference array.
    If larger that the current size, the array will be expanded with empty elements.
    If smaller than the current size, items at the end of the array will be dropped.

    OUT_OF_RANGE if an invalid size is given.
    """

    WorkflowMoveComponent: grpc.UnaryUnaryMultiCallable[
        ansys.api.modelcenter.v0.workflow_messages_pb2.MoveComponentRequest,
        ansys.api.modelcenter.v0.element_messages_pb2.ElementIndexParentResponse] = ...
    """*
    Move a component or assembly under a new parent.
    """


class ModelCenterWorkflowServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ElementGetName(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ElementName:
        """*
        Get an element name.
        """
        pass

    @abc.abstractmethod
    def ElementGetFullName(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ElementName:
        """*
        Get an element's full name.
        """
        pass

    @abc.abstractmethod
    def ElementGetParentElement(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.ElementInfo:
        """*
        Get the parent element of an element.
        """
        pass

    @abc.abstractmethod
    def PropertyOwnerGetProperties(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.custom_metadata_messages_pb2.MetadataPropertyNamesResponse:
        """*
        Get the custom metadata properties available for an element.
        """
        pass

    @abc.abstractmethod
    def PropertyOwnerSetPropertyValue(self,
        request: ansys.api.modelcenter.v0.custom_metadata_messages_pb2.MetadataSetValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.custom_metadata_messages_pb2.MetadataSetValueResponse:
        """*
        Set the value of a custom metadata property.

        NOT_FOUND if the specified element does not exist.
        INVALID_ARGUMENT if the property value is missing.
        """
        pass

    @abc.abstractmethod
    def PropertyOwnerGetPropertyValue(self,
        request: ansys.api.modelcenter.v0.custom_metadata_messages_pb2.MetadataGetValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableValue:
        """*
        Get the value of a custom metadata property.

        NOT_FOUND if the specified element does not exist.
        INVALID_ARGUMENT if the specified property doesn't exist
        """
        pass

    @abc.abstractmethod
    def RegistryGetVariables(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableInfoCollection:
        """*
        Get the variables available on an assembly.
        """
        pass

    @abc.abstractmethod
    def RegistryGetGroups(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ElementIdCollection:
        """*
        Get the groups available on an assembly.
        """
        pass

    @abc.abstractmethod
    def RegistryGetControlType(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.AssemblyType:
        """*
        Get the type of an assembly.
        """
        pass

    @abc.abstractmethod
    def AssemblyGetAssembliesAndComponents(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.ElementInfoCollection:
        """*
        Get the child assemblies and components of an assembly.
        """
        pass

    @abc.abstractmethod
    def AssemblyAddAssembly(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.AddAssemblyRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.AddAssemblyResponse:
        """*
        Add a child assembly.

        NOT_FOUND if the specified parent assembly can't be found.
        INVALID_ARGUMENT if the name / position / type are invalid.
        ALREADY_EXISTS if there is a name collision
        """
        pass

    @abc.abstractmethod
    def AssemblyAddVariable(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.AddAssemblyVariableRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.AddAssemblyVariableResponse:
        """*
        Add a variable to an assembly.

        NOT_FOUND if the specified parent assembly can't be found.
        INVALID_ARGUMENT if the name / position / type are invalid.
        ALREADY_EXISTS if theere is a name collision
        """
        pass

    @abc.abstractmethod
    def AssemblyDeleteVariable(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.DeleteAssemblyVariableRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.DeleteAssemblyVariableResponse:
        """*
        Delete a variable on an assembly.

        NOT_FOUND if the specified parent assembly can't be found.
        No error should be raised if the specified variable is already nonexistent (see response).
        """
        pass

    @abc.abstractmethod
    def AssemblyRename(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.RenameRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.RenameResponse:
        """*
        Rename an assembly.

        NOT_FOUND if the specified parent assembly can't be found.
        INVALID_ARGUMENT if the new name is invalid.
        ALREADY_EXISTS if there is a name collision.
        """
        pass

    @abc.abstractmethod
    def AssemblySetIcon(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.AssemblyIconSetRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.AssemblyIconSetResponse:
        """*
        Set an assembly's icon.
        """
        pass

    @abc.abstractmethod
    def AssemblyGetIcon(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.AssemblyIconResponse:
        """*
        Get an assembly's icon.
        """
        pass

    @abc.abstractmethod
    def ElementGetIndexInParent(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ElementIndexParentResponse:
        """*
        Get an element's index in its parent.
        """
        pass

    @abc.abstractmethod
    def AssemblyGetAnalysisViewPosition(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.AnalysisViewPosition:
        """*
        Get an assembly's position on the analysis view.
        """
        pass

    @abc.abstractmethod
    def ComponentGetSource(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ComponentSourceResponse:
        """*
        Get an assembly's source.
        """
        pass

    @abc.abstractmethod
    def ComponentGetPaczUrl(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ComponentPaczUrlResponse:
        """*
        Get a component's pacz URL.
        """
        pass

    @abc.abstractmethod
    def ComponentRun(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ComponentRunResponse:
        """*
        Run the specified component.
        """
        pass

    @abc.abstractmethod
    def ComponentInvokeMethod(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ComponentInvokeMethodRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ComponentInvokeMethodResponse:
        """*
        Invoke a method on the specified component.

        NOT_FOUND if the target component doesn't exist
        INVALID_ARGUMENT if the target method can't be found
        FAILED_PRECONDITION if the method run fails
        """
        pass

    @abc.abstractmethod
    def ComponentInvalidate(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ComponentInvalidateResponse:
        """*
        Invalidate the specified component.
        """
        pass

    @abc.abstractmethod
    def ComponentReconnect(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ComponentReconnectResponse:
        """*
        Reconnect or reload the specified component.

        FAILED_PRECONDITION if the reconnect fails
        """
        pass

    @abc.abstractmethod
    def ComponentDownloadValues(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ComponentDownloadValuesResponse:
        """*
        Download the component's variable values if it is a ModelCenter Remote Execution component.

        FAILED_PRECONDITION if the download fails
        """
        pass

    @abc.abstractmethod
    def ComponentIsConnected(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ComponentIsConnectedResponse:
        """
        Get if a component is connected to its source.
        A component may be disconnected from its source if it fails to connect on load, and
        OnConnectionModeError is set to IGNORE.
        """
        pass

    @abc.abstractmethod
    def IfComponentGetExclusive(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetExclusiveResponse:
        """*
        Get whether the branching condition is exclusive.
        """
        pass

    @abc.abstractmethod
    def IfComponentSetExclusive(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetExclusiveRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetExclusiveResponse:
        """*
        Set whether the branching condition is exclusive.
        """
        pass

    @abc.abstractmethod
    def IfComponentGetRunLastBranchByDefault(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetRunLastBranchAsDefaultResponse:
        """*
        Get if there is an else branch that is run if no conditions are met.
        """
        pass

    @abc.abstractmethod
    def IfComponentSetRunLastBranchByDefault(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetRunLastBranchAsDefaultRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetRunLastBranchAsDefaultResponse:
        """*
        Set if there is an else branch that is run if no conditions are met.
        """
        pass

    @abc.abstractmethod
    def IfComponentGetNumberOfBranches(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetNumberBranchesResponse:
        """*
        Get the number of branches.
        """
        pass

    @abc.abstractmethod
    def IfComponentGetBranchCondition(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetBranchConditionRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetBranchConditionResponse:
        """*
        Get the branch condition for a branch.
        """
        pass

    @abc.abstractmethod
    def IfComponentSetBranchCondition(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetBranchConditionRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetBranchConditionResponse:
        """*
        Set the branch condition for a branch.
        """
        pass

    @abc.abstractmethod
    def IfComponentGetBranchName(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetBranchNameRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.IfComponentGetBranchNameResponse:
        """*
        Get the name of a branch.
        """
        pass

    @abc.abstractmethod
    def IfComponentSetBranchName(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetBranchNameRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.IfComponentSetBranchNameResponse:
        """*
        Set the name of a branch.
        """
        pass

    @abc.abstractmethod
    def VariableGetType(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableTypeResponse:
        """*
        Get the data type of a variable.
        """
        pass

    @abc.abstractmethod
    def VariableGetState(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.ElementIdOrName,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableState:
        """*
        Get the state of a variable.
        """
        pass

    @abc.abstractmethod
    def VariableGetDependents(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.GetVariableDependenciesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableInfoCollection:
        """*
        Finds any variables linked as an output to this variable, either returning only direct dependent variables
        or recursively fetching all dependent variables.
        """
        pass

    @abc.abstractmethod
    def VariableGetPrecedents(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.GetVariableDependenciesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableInfoCollection:
        """*
        Finds any variables linked as an input to this variable, either returning only direct precedent variables
        or recursively fetching all precedent variables.
        """
        pass

    @abc.abstractmethod
    def DoubleArrayGetValue(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.DoubleArrayValue:
        """TODO: May be able to delete

        *
        Get the value of a double array variable.
        """
        pass

    @abc.abstractmethod
    def DoubleArraySetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetDoubleArrayValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse:
        """*
        Set the value of a double array variable.

        NOT_FOUND if target variable cannot be located
        INVALID_ARGUMENT if target variable is not a double array
        OUT_OF_RANGE if bounds or enum constraints are violated
        """
        pass

    @abc.abstractmethod
    def FileArrayGetValue(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.FileArrayValue:
        """TODO: May be able to delete

        *
        Get the value of a file array variable.
        If necessary, the workflow will be run such that the variable value is valid
        before the value is returned.
        """
        pass

    @abc.abstractmethod
    def FileArraySetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetFileArrayValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse:
        """*
        Set the value of a file array variable.
        """
        pass

    @abc.abstractmethod
    def IntegerArrayGetValue(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.IntegerArrayValue:
        """TODO: May be able to delete

        *
        Get the value of a integer array variable.
        If necessary, the workflow will be run such that the variable value is valid
        before the value is returned.
        """
        pass

    @abc.abstractmethod
    def IntegerArraySetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetIntegerArrayValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse:
        """*
        Set the value of a integer array variable.

        NOT_FOUND if the target variable cannot be located
        INVALID_ARGUEMNT if target variable is not the right type
        OUT_OF_RANGE if bounds or enum constraints are violated
        """
        pass

    @abc.abstractmethod
    def BooleanArrayGetValue(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.BooleanArrayValue:
        """TODO: May be able to delete

        *
        Get the value of a boolean array variable.
        If necessary, the workflow will be run such that the variable value is valid
        before the value is returned.
        """
        pass

    @abc.abstractmethod
    def BooleanArraySetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetBooleanArrayValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse:
        """*
        Set the value of a boolean array variable.

        NOT_FOUND if the target variable cannot be located
        INVALID_ARGUEMNT if target variable is not the right type
        OUT_OF_RANGE if bounds or enum constraints are violated
        """
        pass

    @abc.abstractmethod
    def StringArrayGetValue(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.StringArrayValue:
        """TODO: May be able to delete

        *
        Get the value of a string array variable.
        If necessary, the workflow will be run such that the variable value is valid
        before the value is returned.
        """
        pass

    @abc.abstractmethod
    def StringArraySetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetStringArrayValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse:
        """*
        Set the value of a string array variable.

        NOT_FOUND if the target variable cannot be located
        INVALID_ARGUEMNT if target variable is not the right type
        OUT_OF_RANGE if bounds or enum constraints are violated
        """
        pass

    @abc.abstractmethod
    def ReferenceArraySetReferencedValues(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetDoubleArrayValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse:
        """*
        Set the values of the referenced variables in a reference array.

        NOT_FOUND if the target variable cannot be located
        INVALID_ARGUMENT if target variable is not the right type
        OUT_OF_RANGE if bounds or enum constraints are violated
        """
        pass

    @abc.abstractmethod
    def DoubleVariableGetValue(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.DoubleValue:
        """TODO: May be able to delete

        *
        Get the value of a double variable.
        If necessary, the workflow will be run such that the variable value is valid
        before the value is returned.
        """
        pass

    @abc.abstractmethod
    def DoubleVariableSetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetDoubleValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse:
        """*
        Set the value of a double variable.

        NOT_FOUND if the target variable cannot be located
        INVALID_ARGUEMNT if target variable is not the right type
        OUT_OF_RANGE if bounds or enum constraints are violated
        """
        pass

    @abc.abstractmethod
    def IntegerVariableGetValue(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.IntegerValue:
        """TODO: May be able to delete

        *
        Get the value of a integer variable.
        If necessary, the workflow will be run such that the variable value is valid
        before the value is returned.
        """
        pass

    @abc.abstractmethod
    def IntegerVariableSetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetIntegerValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse:
        """*
        Set the value of a integer variable.

        NOT_FOUND if the target variable cannot be located
        INVALID_ARGUEMNT if target variable is not the right type
        OUT_OF_RANGE if bounds or enum constraints are violated
        """
        pass

    @abc.abstractmethod
    def BooleanVariableGetValue(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.BooleanValue:
        """TODO: May be able to delete

        *
        Get the value of a boolean variable.
        If necessary, the workflow will be run such that the variable value is valid
        before the value is returned.
        """
        pass

    @abc.abstractmethod
    def BooleanVariableSetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetBooleanValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse:
        """*
        Set the value of a boolean variable.

        NOT_FOUND if the target variable cannot be located
        INVALID_ARGUEMNT if target variable is not the right type
        OUT_OF_RANGE if bounds or enum constraints are violated
        """
        pass

    @abc.abstractmethod
    def StringVariableGetValue(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.StringValue:
        """TODO: May be able to delete

        *
        Get the value of a string variable.
        If necessary, the workflow will be run such that the variable value is valid
        before the value is returned.
        """
        pass

    @abc.abstractmethod
    def StringVariableSetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetStringValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse:
        """*
        Set the value of a string variable.

        NOT_FOUND if the target variable cannot be located
        INVALID_ARGUEMNT if target variable is not the right type
        OUT_OF_RANGE if bounds or enum constraints are violated
        """
        pass

    @abc.abstractmethod
    def FileVariableGetValue(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.FileValue:
        """TODO: May be able to delete

        *
        Get the value of a file variable.
        If necessary, the workflow will be run such that the variable value is valid
        before the value is returned.
        """
        pass

    @abc.abstractmethod
    def FileVariableSetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetFileValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse:
        """*
        Set the value of a file array variable.

        NOT_FOUND if the target variable cannot be located
        INVALID_ARGUMENT if target variable is not the right type
        OUT_OF_RANGE if bounds or enum constraints are violated
        """
        pass

    @abc.abstractmethod
    def ReferenceVariableGetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferenceValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableState:
        """*
        Get the value of a reference variable or member of a reference array variable.
        If necessary, the workflow will be run such that the variable value is valid
        before the value is returned.

        NOT_FOUND if the target variable cannot be located
        INVALID_ARGUEMNT if target variable is not the right type
        """
        pass

    @abc.abstractmethod
    def ReferenceVariableSetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetReferenceValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetVariableValueResponse:
        """*
        Set the value of a reference variable or member of a reference array variable.

        NOT_FOUND if the target variable cannot be located
        INVALID_ARGUEMNT if target variable is not the right type
        OUT_OF_RANGE if bounds or enum constraints are violated
        """
        pass

    @abc.abstractmethod
    def VariableGetIsInput(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.VariableIsInputResponse:
        """*
        Get whether or not a variable is an input to its component and in the workflow.
        """
        pass

    @abc.abstractmethod
    def BooleanVariableGetMetadata(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.BooleanVariableMetadata:
        """*
        Get the metadata for a boolean or boolean array variable.
        """
        pass

    @abc.abstractmethod
    def DoubleVariableGetMetadata(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.DoubleVariableMetadata:
        """*
        Get the metadata for a double or double array variable.
        """
        pass

    @abc.abstractmethod
    def IntegerVariableGetMetadata(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.IntegerVariableMetadata:
        """*
        Get the metadata for an integer or integer array variable.
        """
        pass

    @abc.abstractmethod
    def StringVariableGetMetadata(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.StringVariableMetadata:
        """*
        Get the metadata for a string or string array variable.
        """
        pass

    @abc.abstractmethod
    def FileVariableGetMetadata(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.FileVariableMetadata:
        """*
        Get the metadata for a file or file array variable.
        """
        pass

    @abc.abstractmethod
    def BooleanVariableSetMetadata(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetBooleanVariableMetadataRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetMetadataResponse:
        """*
        Set the metadata for a boolean or boolean array variable.

        NOT_FOUND if the target element can't be found
        INVALID_ARGUMENT if the target element is not a boolean or boolean array
        """
        pass

    @abc.abstractmethod
    def DoubleVariableSetMetadata(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetDoubleVariableMetadataRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetMetadataResponse:
        """*
        Set the metadata for a double or double array variable.

        NOT_FOUND if the target element can't be found
        INVALID_ARGUMENT if the target element is not a double or double array
        """
        pass

    @abc.abstractmethod
    def IntegerVariableSetMetadata(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetIntegerVariableMetadataRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetMetadataResponse:
        """*
        Set the metadata for an integer or integer array variable.

        NOT_FOUND if the target element can't be found
        INVALID_ARGUMENT if the target element is not an integer or integer array
        """
        pass

    @abc.abstractmethod
    def StringVariableSetMetadata(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetStringVariableMetadataRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetMetadataResponse:
        """*
        Set the metadata for a string or string array variable.

        NOT_FOUND if the target element can't be found
        INVALID_ARGUMENT if the target element is not a string or string array
        """
        pass

    @abc.abstractmethod
    def FileVariableSetMetadata(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetFileVariableMetadataRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetMetadataResponse:
        """*
        Set the metadata for a file or file array variable.

        NOT_FOUND if the target element can't be found
        INVALID_ARGUMENT if the target element is not a file or file array
        """
        pass

    @abc.abstractmethod
    def WorkflowGetState(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.GetWorkflowStateRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.GetWorkflowStateResponse:
        """*
        Get the state of the workflow instance.

        Possible states are:
        - WorkflowInstanceState.WORKFLOW_INSTANCE_STATE_UNSPECIFIED:
           If any datapin validated by the last run no longer exists, or some other error occurs
           getting the state.
        - WorkflowInstanceState.WORKFLOW_INSTANCE_STATE_INVALID:
           If any datapin validated by the last run is not valid, or the workflow has never been
           run and the root assembly is invalid. Note that this can be returned by requesting a
           datapin that will not be validated even if the workflow runs successfully, such as
           a datapin in an inactive branch of an if-component.
        - WorkflowInstanceState.WORKFLOW_INSTANCE_STATE_RUNNING:
           If the workflow is currently running.
        - WorkflowInstanceState.WORKFLOW_INSTANCE_STATE_FAILED:
           If the last workflow run terminated due to a failure.
        - WorkflowInstanceState.WORKFLOW_INSTANCE_STATE_SUCCESS:
           If the workflow ran successfully and all requested datapins are valid.
        Note that WorkflowInstanceState.WORKFLOW_INSTANCE_STATE_PAUSED is never returned.
        """
        pass

    @abc.abstractmethod
    def WorkflowRun(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowRunRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowRunResponse:
        """*
        Execute the workflow.

        NOT_FOUND if the target workflow doesn't exist
        INVALID_ARGUMENT if there are:
           invalid names in the request
           mismatched types for values in the request
        OUT_OF_RANGE if input values violate enum, bounds
        """
        pass

    @abc.abstractmethod
    def WorkflowStartRun(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowRunRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowStartRunResponse:
        """*
        Start executing the workflow, and allow it to run asynchronously.

        NOT_FOUND if the target workflow doesn't exist
        INVALID_ARGUMENT if there are:
           invalid names in the request
           mismatched types for values in the request
        OUT_OF_RANGE if input values violate enum, bounds
        """
        pass

    @abc.abstractmethod
    def WorkflowHalt(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowHaltRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowHaltResponse:
        """*
        Stop executing the workflow.
        """
        pass

    @abc.abstractmethod
    def WorkflowGetRoot(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowGetRootResponse:
        """*
        Get the root element of the workflow.
        """
        pass

    @abc.abstractmethod
    def WorkflowGetDirectory(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowGetDirectoryResponse:
        """*
        Get the directory for a workflow.
        """
        pass

    @abc.abstractmethod
    def WorkflowCreateComponent(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowCreateComponentRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowCreateComponentResponse:
        """*
        Create a component within the workflow.

        NOT_FOUND if the parent assembly isn't found
        INVALID_ARGUMENT if:
          connection fails, name is invalid
        ALREADY_EXISTS if:
           name is invalid
        """
        pass

    @abc.abstractmethod
    def WorkflowCreateLink(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowCreateLinkRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowCreateLinkResponse:
        """*
        Create a link within the workflow.

        INVALID_ARGUMENT if: LHS or RHS are not valid
        """
        pass

    @abc.abstractmethod
    def WorkflowSave(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowSaveResponse:
        """*
        Save the workflow to its current location.
        """
        pass

    @abc.abstractmethod
    def WorkflowSaveAs(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowSaveAsRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowSaveResponse:
        """*
        Save the workflow to a new location.

        INVALID_ARGUMENT if: new path is not valid
        """
        pass

    @abc.abstractmethod
    def WorkflowClose(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowCloseResponse:
        """*
        Close the workflow.

        NOT_FOUND if specified workflow does not exist
        """
        pass

    @abc.abstractmethod
    def WorkflowRemoveComponent(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowRemoveComponentRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowRemoveComponentResponse:
        """*
        Remove a component from the workflow.

        Does not error if the specified component has already been removed.
        """
        pass

    @abc.abstractmethod
    def WorkflowBreakLink(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowBreakLinkRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowBreakLinkResponse:
        """*
        Break a link within the workflow.

        NOT_FOUND if the lhs isn't valid
        """
        pass

    @abc.abstractmethod
    def WorkflowSuspendOrResumeLink(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowSuspendOrResumeLinkRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowLinkSuspension:
        """*
        Suspend a link within the workflow.

        The returning message indicates whether the link WAS suspended before this RPC was called.
        A successful return indicates that the state was correctly set; a mismatch in the returned
        state does not mean that there was a failure.

        NOT_FOUND if the lhs isn't valid
        """
        pass

    @abc.abstractmethod
    def WorkflowGetLinkSuspensionState(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowBreakLinkRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowLinkSuspension:
        """*
        Get the suspension state of a link.
        """
        pass

    @abc.abstractmethod
    def WorkflowAutoLink(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowAutoLinkRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowAutoLinkResponse:
        """*
        Auto-link two components within the workflow.
        The created links are returned.

        INVALID_ARGUMENT if either component can't be located.
        """
        pass

    @abc.abstractmethod
    def WorkflowGetLinksRequest(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.WorkflowGetLinksResponse:
        """*
        Get a list of all the links in the workflow.
        """
        pass

    @abc.abstractmethod
    def WorkflowGetElementByName(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.NamedElementWorkflow,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.ElementInfo:
        """*
        Get a component or assembly's ID and type by name.
        """
        pass

    @abc.abstractmethod
    def ReferenceVariableGetReferenceEquation(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferenceEquationRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferenceEquationResponse:
        """*
        Get the reference equation of a reference variable.
        """
        pass

    @abc.abstractmethod
    def ReferenceVariableSetReferenceEquation(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetReferenceEquationRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetReferenceEquationResponse:
        """*
        Set the reference equation of a reference variable.
        """
        pass

    @abc.abstractmethod
    def ReferenceVariableGetReferencedVariables(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferencedVariablesRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferencedVariablesResponse:
        """*
        Get the variables referenced by a reference variable.
        """
        pass

    @abc.abstractmethod
    def ReferenceVariableGetMetadata(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferenceVariableMetadata:
        """*
        Get variable metadata for a reference or reference array variable.

        Note that reference properties are a distinct concept from variable metadata,
        and they need to be retrieved separately.
        """
        pass

    @abc.abstractmethod
    def ReferenceVariableSetMetadata(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.SetReferenceVariableMetadataRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.SetMetadataResponse:
        """*
        Set variable metadata for a reference or reference array variable.

        Note that reference properties are a distinct concept from variable metadata,
        and they need to be manipulated separately.
        """
        pass

    @abc.abstractmethod
    def ReferenceVariableGetIsDirect(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferenceIsDirectRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.GetReferenceIsDirectResponse:
        """*
        Get whether a reference variable refers directly to a single variable.
        """
        pass

    @abc.abstractmethod
    def ReferenceVariableGetReferenceProperties(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyNames:
        """*
        Get the available reference properties of a reference variable
        """
        pass

    @abc.abstractmethod
    def ReferencePropertyGetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.IndexedReferencePropertyIdentifier,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableState:
        """*
        Get the value of a reference property.

        The workflow is not executed to attempt to validate the property.
        An index is only required in the request if the property in question
        is a property of a reference array.
        Otherwise, the index should be blank.
        """
        pass

    @abc.abstractmethod
    def ReferencePropertySetValue(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertySetValueRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertySetValueResponse:
        """*
        Set the value of a reference property.

        An index is only required in the request if the property in question
        is a property of a reference array.
        Otherwise, the index should be blank.
        """
        pass

    @abc.abstractmethod
    def ReferencePropertyGetIsInput(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyIdentifier,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyGetIsInputResponse:
        """*
        Get whether a reference property is an input.
        """
        pass

    @abc.abstractmethod
    def ReferencePropertyGetTitle(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyIdentifier,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyGetTitleResponse:
        """*
        Get the title of a reference property.
        """
        pass

    @abc.abstractmethod
    def ReferencePropertyGetMetadata(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyIdentifier,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.VariableMetadata:
        """*
        Get the metadata items from a reference property.
        """
        pass

    @abc.abstractmethod
    def ReferencePropertyGetType(self,
        request: ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyIdentifier,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.ReferencePropertyGetTypeResponse:
        """*
        Get the type of a reference property.
        """
        pass

    @abc.abstractmethod
    def ReferenceArrayGetLength(self,
        request: ansys.api.modelcenter.v0.element_messages_pb2.ElementId,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.variable_value_messages_pb2.IntegerValue:
        """*
        Get the length of a reference array.
        """
        pass

    @abc.abstractmethod
    def ReferenceArraySetLength(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.SetReferenceArrayLengthRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.workflow_messages_pb2.SetReferenceArrayLengthResponse:
        """*
        Set the length of a reference array.
        If larger that the current size, the array will be expanded with empty elements.
        If smaller than the current size, items at the end of the array will be dropped.

        OUT_OF_RANGE if an invalid size is given.
        """
        pass

    @abc.abstractmethod
    def WorkflowMoveComponent(self,
        request: ansys.api.modelcenter.v0.workflow_messages_pb2.MoveComponentRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.modelcenter.v0.element_messages_pb2.ElementIndexParentResponse:
        """*
        Move a component or assembly under a new parent.
        """
        pass


def add_ModelCenterWorkflowServiceServicer_to_server(servicer: ModelCenterWorkflowServiceServicer, server: grpc.Server) -> None: ...
