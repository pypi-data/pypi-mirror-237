[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cold-call"
dynamic = ["version"]
description = "Give Python functions your unsolicited input"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [{ name = "Bernard Cooke", email = "bernard-cooke@hotmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/bernardcooke53/cold-call#readme"
Issues = "https://github.com/bernardcooke53/cold-call/issues"
Source = "https://github.com/bernardcooke53/cold-call"

[tool.hatch.version]
path = "src/cold_call/__init__.py"

[tool.hatch.envs.default]
dependencies = [
  "pre-commit",
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-clarity",
  "pytest-pretty",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]
pre-commit-all = "pre-commit run -a"
all = ["cov", "pre-commit-all"]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["black>=23.10.0", "mypy>=1.6.1", "ruff>=0.1.1"]

[tool.hatch.envs.lint.scripts]
typing = "mypy --cache-dir /dev/null {args:src}"
style = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.black]
target-version = ["py38"]
line-length = 88

[tool.bandit]
targets = ["cold_call"]

[tool.ruff]
target-version = "py38"
line-length = 88
force-exclude = true
output-format = "grouped"
ignore-init-module-imports = true
show-source = true
show-fixes = true
src = ["cold_call", "tests"]
task-tags = ["NOTE", "TODO", "FIXME", "XXX"]

external = ["V"] # vulture
select = ["ALL"]
# See https://beta.ruff.rs/docs/rules
ignore = [
  # attribute shadows builtin (e.g. Foo.list())
  "A003",
  # Annotations (flake8-annotations)
  # missing "self" type-hint
  "ANN101",
  # missing "cls" type-hint
  "ANN102",
  # no typing.Any
  "ANN401",
  # flake8-bugbear
  # no functools.lru_cache
  "B019",
  # flake8-commas
  "COM",
  # Missing docstrings
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D107",

  # class docstrings must be preceded by a newline
  "D203",
  # one blank line between summary and description for docstrings
  "D205",
  # multiline summary should start on first line of docstring
  "D212",
  # first line should end with a period
  "D400",
  # "an imperative mood"
  "D401",
  # First word of docstring should be "This"
  "D404",
  "D415",
  # flake8-datetimez
  "DTZ",
  # flake8-errmsg
  "EM",
  # don't compare types, use isinstance()
  # sometimes using type(x) == y is deliberately chosen to exclude
  # subclasses
  "E721",
  # flake8-fixme
  "FIX",
  # flake8-boolean-trap
  "FBT",
  # No implicit packages
  "INP001",
  # Errors should end with "Error"
  "N818",
  # flake8-pytest-style, values rowtype (list|tuple)
  "PT007",
  # pytest.raises must be alone in a with-block
  "PT012",
  # use only simple "import pytest"
  "PT013",
  # pylint
  "PLR",
  "PLE1507",
  # flake8-use-pathlib
  "PTH",
  # flake8-raise
  "RSE",
  # ruff
  # This seems to flag a load of false-positives, thinking that the # noqa's are
  # unneeded and trying to fix them even though ruff then flags the errors that
  # were previously ignored
  "RUF100",
  # flake8-todos
  "TD002",
  "TD003",
  # tryceratops
  "TRY003",
  "TRY401",
]

[tool.ruff.per-file-ignores]
# Imported but unused
"__init__.py" = ["F401"]

"tests/**/*" = [
  # magic values
  "PLR2004",
  # unused arguments - likely fixtures to be moved to
  # @pytest.mark.usefixtures
  "ARG001",
  # "assert" used
  "S101",
  # Private member access
  "SLF001",
  # Annotations
  "ANN",
]

[tool.ruff.mccabe]
max-complexity = 15

[tool.ruff.flake8-implicit-str-concat]
allow-multiline = true

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
strict = true

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
known-first-party = ["cold_call"]
forced-separate = ["tests"]
relative-imports-order = "closest-to-furthest"
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "tests",
  "local-folder",
]
sections = { "tests" = ["tests"] }


[tool.mypy]
python_version = 3.8
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
show_column_numbers = true
show_error_context = true
pretty = true
error_summary = true
follow_imports = "normal"
disallow_untyped_calls = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
cache_dir = "/dev/null"
plugins = []

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
allow_incomplete_defs = true
allow_untyped_calls = true

[tool.coverage.run]
source_pkgs = ["cold_call", "tests"]
branch = true
parallel = true
omit = ["src/cold_call/__about__.py"]

[tool.coverage.paths]
cold_call = ["src/cold_call", "*/cold-call/src/cold_call"]
tests = ["tests", "*/cold-call/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
