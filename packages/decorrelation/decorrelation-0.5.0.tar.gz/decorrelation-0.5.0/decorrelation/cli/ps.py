# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/CLI/ps.ipynb.

# %% auto 0
__all__ = ['de_amp_disp']

# %% ../../nbs/CLI/ps.ipynb 4
import math
import cupy as cp
from matplotlib import pyplot as plt
import colorcet

import dask
from dask import array as da
from dask import delayed
from dask.distributed import Client, LocalCluster, progress
from dask_cuda import LocalCUDACluster

from ..ps import amp_disp
from .pc import de_pc_thres_ras
from .utils.logging import get_logger, log_args
from .utils.chunk_size import get_az_chunk_size_from_az_chunk_size
from .utils.dask import get_cuda_cluster_arg

from fastcore.script import call_parse

# %% ../../nbs/CLI/ps.ipynb 5
@call_parse
@log_args
def de_amp_disp(rslc:str, # rslc stack
                adi:str, #output, amplitude dispersion index
                n_az_chunk:str=None, # number of azimuth chunks
                az_chunk_size:str=None, # azimuth chunk size
                log:str=None, # log file
            ):
    '''calculation the amplitude dispersion index from SLC stack.'''
    rslc_path = rslc
    adi_path = adi
    logger = get_logger(logfile=log)
    rslc_zarr = zarr.open(rslc_path,mode='r')
    logger.zarr_info(rslc_path,rslc_zarr)

    az_chunk_size = get_az_chunk_size_from_az_chunk_size('rslc','adi',rslc_zarr.chunks[0],rslc_zarr.shape[0],logger,n_az_chunk=n_az_chunk,az_chunk_size=az_chunk_size)

    logger.info('starting dask CUDA local cluster.')
    with LocalCUDACluster(CUDA_VISIBLE_DEVICES=get_cuda_cluster_arg()['CUDA_VISIBLE_DEVICES']) as cluster, Client(cluster) as client:
        logger.info('dask local CUDA cluster started.')

        cpu_rslc = da.from_zarr(rslc_path, chunks=(az_chunk_size,*rslc_zarr.shape[1:]))
        logger.darr_info('rslc', cpu_rslc)

        logger.info(f'calculate amplitude dispersion index.')
        rslc = cpu_rslc.map_blocks(cp.asarray)
        rmli = da.abs(rslc)
        mean = da.nanmean(rmli,axis=2)
        std = da.nanstd(rmli,axis=2)
        adi = std/mean
        
        cpu_adi = adi.map_blocks(cp.asnumpy)
        logger.info(f'got amplitude dispersion index.')
        logger.darr_info('adi', cpu_adi)

        logger.info('saving adi.')
        _cpu_adi = cpu_adi.to_zarr(adi_path,compute=False,overwrite=True)

        logger.info('computing graph setted. doing all the computing.')
        futures = client.persist(_cpu_adi)
        progress(futures,notebook=False)
        da.compute(futures)
        logger.info('computing finished.')
    logger.info('dask cluster closed.')
