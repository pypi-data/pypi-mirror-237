# generated by datamodel-codegen:
#   filename:  entity/services/connections/search/elasticSearchConnection.json
#   timestamp: 2023-10-26T09:33:00+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field

from metadata.ingestion.models.custom_pydantic import CustomSecretStr

from .. import connectionBasicType


class ElasticSearchType(Enum):
    ElasticSearch = 'ElasticSearch'


class BasicAuthentication(BaseModel):
    class Config:
        extra = Extra.forbid

    username: Optional[str] = Field(
        None, description='Elastic Search Username for Login', title='Username'
    )
    password: Optional[CustomSecretStr] = Field(
        None, description='Elastic Search Password for Login', title='Password'
    )


class ApiAuthentication(BaseModel):
    apiKey: Optional[CustomSecretStr] = Field(
        None,
        description='Elastic Search API Key for API Authentication',
        title='API Key',
    )
    apiKeyId: Optional[str] = Field(
        None,
        description='Elastic Search API Key ID for API Authentication',
        title='API Key ID',
    )


class ElasticsearchConnection(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[ElasticSearchType] = Field(
        ElasticSearchType.ElasticSearch,
        description='ElasticSearch Type',
        title='ElasticSearch Type',
    )
    hostPort: Optional[AnyUrl] = Field(
        None,
        description='Host and port of the ElasticSearch service.',
        title='Host and Port',
    )
    authType: Optional[Union[BasicAuthentication, ApiAuthentication]] = Field(
        None, description='Choose Auth Config Type.', title='Auth Configuration Type'
    )
    caCert: Optional[str] = Field(
        None, description='Path to CA Cert File', title='Client Certificate Path'
    )
    connectionTimeoutSecs: Optional[int] = Field(
        30,
        description='Connection Timeout in Seconds',
        title='Connection Timeout in Seconds',
    )
    connectionArguments: Optional[connectionBasicType.ConnectionArguments] = Field(
        None, title='Connection Arguments'
    )
    supportsMetadataExtraction: Optional[
        connectionBasicType.SupportsMetadataExtraction
    ] = Field(None, title='Supports Metadata Extraction')
