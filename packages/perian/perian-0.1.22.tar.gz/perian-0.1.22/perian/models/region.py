# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, conlist
from perian.models.provider_location import ProviderLocation
from perian.models.status import Status
from perian.models.zone import Zone

class Region(BaseModel):
    """
    Region
    """
    name: Optional[StrictStr] = ''
    city: Optional[StrictStr] = ''
    location: Optional[ProviderLocation] = None
    sustainable: Optional[StrictBool] = False
    status: Optional[Status] = None
    zones: Optional[conlist(Zone)] = None
    __properties = ["name", "city", "location", "sustainable", "status", "zones"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Region:
        """Create an instance of Region from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in zones (list)
        _items = []
        if self.zones:
            for _item in self.zones:
                if _item:
                    _items.append(_item.to_dict())
            _dict['zones'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Region:
        """Create an instance of Region from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Region.parse_obj(obj)

        _obj = Region.parse_obj({
            "name": obj.get("name") if obj.get("name") is not None else '',
            "city": obj.get("city") if obj.get("city") is not None else '',
            "location": obj.get("location"),
            "sustainable": obj.get("sustainable") if obj.get("sustainable") is not None else False,
            "status": obj.get("status"),
            "zones": [Zone.from_dict(_item) for _item in obj.get("zones")] if obj.get("zones") is not None else None
        })
        return _obj


