# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from perian.models.availability_query import AvailabilityQuery
from perian.models.cpu_query import CpuQuery
from perian.models.description_query import DescriptionQuery
from perian.models.gpu_query import GpuQuery
from perian.models.id_query import IdQuery
from perian.models.memory_query import MemoryQuery
from perian.models.network_query import NetworkQuery
from perian.models.price_query import PriceQuery
from perian.models.provider_query import ProviderQuery
from perian.models.reference_id_query import ReferenceIdQuery
from perian.models.region_query import RegionQuery
from perian.models.storage_query import StorageQuery
from perian.models.type_query import TypeQuery

class FlavorQuery(BaseModel):
    """
    FlavorQuery
    """
    pid: Optional[IdQuery] = None
    provider: Optional[ProviderQuery] = None
    region: Optional[RegionQuery] = None
    reference_id: Optional[ReferenceIdQuery] = None
    description: Optional[DescriptionQuery] = None
    cpu: Optional[CpuQuery] = None
    gpu: Optional[GpuQuery] = None
    ram: Optional[MemoryQuery] = None
    storage: Optional[StorageQuery] = None
    network: Optional[NetworkQuery] = None
    price: Optional[PriceQuery] = None
    availability: Optional[AvailabilityQuery] = None
    type: Optional[TypeQuery] = None
    __properties = ["pid", "provider", "region", "reference_id", "description", "cpu", "gpu", "ram", "storage", "network", "price", "availability", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FlavorQuery:
        """Create an instance of FlavorQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of pid
        if self.pid:
            _dict['pid'] = self.pid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict['provider'] = self.provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reference_id
        if self.reference_id:
            _dict['reference_id'] = self.reference_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cpu
        if self.cpu:
            _dict['cpu'] = self.cpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gpu
        if self.gpu:
            _dict['gpu'] = self.gpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ram
        if self.ram:
            _dict['ram'] = self.ram.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['storage'] = self.storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network
        if self.network:
            _dict['network'] = self.network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of availability
        if self.availability:
            _dict['availability'] = self.availability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FlavorQuery:
        """Create an instance of FlavorQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FlavorQuery.parse_obj(obj)

        _obj = FlavorQuery.parse_obj({
            "pid": IdQuery.from_dict(obj.get("pid")) if obj.get("pid") is not None else None,
            "provider": ProviderQuery.from_dict(obj.get("provider")) if obj.get("provider") is not None else None,
            "region": RegionQuery.from_dict(obj.get("region")) if obj.get("region") is not None else None,
            "reference_id": ReferenceIdQuery.from_dict(obj.get("reference_id")) if obj.get("reference_id") is not None else None,
            "description": DescriptionQuery.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "cpu": CpuQuery.from_dict(obj.get("cpu")) if obj.get("cpu") is not None else None,
            "gpu": GpuQuery.from_dict(obj.get("gpu")) if obj.get("gpu") is not None else None,
            "ram": MemoryQuery.from_dict(obj.get("ram")) if obj.get("ram") is not None else None,
            "storage": StorageQuery.from_dict(obj.get("storage")) if obj.get("storage") is not None else None,
            "network": NetworkQuery.from_dict(obj.get("network")) if obj.get("network") is not None else None,
            "price": PriceQuery.from_dict(obj.get("price")) if obj.get("price") is not None else None,
            "availability": AvailabilityQuery.from_dict(obj.get("availability")) if obj.get("availability") is not None else None,
            "type": TypeQuery.from_dict(obj.get("type")) if obj.get("type") is not None else None
        })
        return _obj


