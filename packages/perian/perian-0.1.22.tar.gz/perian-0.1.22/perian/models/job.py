# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictStr
from perian.models.job_status import JobStatus

class Job(BaseModel):
    """
    Job
    """
    jid: Optional[StrictStr] = None
    aid: Optional[StrictStr] = None
    status: Optional[JobStatus] = None
    created_at: Optional[datetime] = None
    done_at: Optional[datetime] = None
    logs: Optional[StrictStr] = ''
    __properties = ["jid", "aid", "status", "created_at", "done_at", "logs"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Job:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Job:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Job.parse_obj(obj)

        _obj = Job.parse_obj({
            "jid": obj.get("jid"),
            "aid": obj.get("aid"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "done_at": obj.get("done_at"),
            "logs": obj.get("logs") if obj.get("logs") is not None else ''
        })
        return _obj


