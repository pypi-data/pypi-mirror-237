# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from perian.models.api_models_bandwidth import ApiModelsBandwidth
from perian.models.memory_interface import MemoryInterface
from perian.models.memory_unit import MemoryUnit

class ApiModelsMemory(BaseModel):
    """
    ApiModelsMemory
    """
    size: Optional[Union[StrictFloat, StrictInt]] = None
    unit: Optional[MemoryUnit] = None
    bandwidth: Optional[ApiModelsBandwidth] = None
    interface: Optional[MemoryInterface] = None
    __properties = ["size", "unit", "bandwidth", "interface"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiModelsMemory:
        """Create an instance of ApiModelsMemory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bandwidth
        if self.bandwidth:
            _dict['bandwidth'] = self.bandwidth.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiModelsMemory:
        """Create an instance of ApiModelsMemory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiModelsMemory.parse_obj(obj)

        _obj = ApiModelsMemory.parse_obj({
            "size": obj.get("size"),
            "unit": obj.get("unit"),
            "bandwidth": ApiModelsBandwidth.from_dict(obj.get("bandwidth")) if obj.get("bandwidth") is not None else None,
            "interface": obj.get("interface")
        })
        return _obj


