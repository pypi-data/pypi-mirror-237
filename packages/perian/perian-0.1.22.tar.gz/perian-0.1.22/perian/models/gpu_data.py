# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, conlist
from perian.models.gpu import Gpu
from perian.models.models_common_memory import ModelsCommonMemory

class GpuData(BaseModel):
    """
    GpuData
    """
    no: Optional[StrictInt] = 0
    memory: Optional[ModelsCommonMemory] = None
    gpus: Optional[conlist(Gpu)] = None
    __properties = ["no", "memory", "gpus"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GpuData:
        """Create an instance of GpuData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of memory
        if self.memory:
            _dict['memory'] = self.memory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in gpus (list)
        _items = []
        if self.gpus:
            for _item in self.gpus:
                if _item:
                    _items.append(_item.to_dict())
            _dict['gpus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GpuData:
        """Create an instance of GpuData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GpuData.parse_obj(obj)

        _obj = GpuData.parse_obj({
            "no": obj.get("no") if obj.get("no") is not None else 0,
            "memory": ModelsCommonMemory.from_dict(obj.get("memory")) if obj.get("memory") is not None else None,
            "gpus": [Gpu.from_dict(_item) for _item in obj.get("gpus")] if obj.get("gpus") is not None else None
        })
        return _obj


