# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from perian.models.flavor_query import FlavorQuery  # noqa: E501

class TestFlavorQuery(unittest.TestCase):
    """FlavorQuery unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FlavorQuery:
        """Test FlavorQuery
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FlavorQuery`
        """
        model = FlavorQuery()  # noqa: E501
        if include_optional:
            return FlavorQuery(
                pid = perian.models.id_query.IdQuery(
                    pid = '', 
                    jid = '', 
                    aid = '', ),
                provider = perian.models.provider_query.ProviderQuery(
                    name = '', 
                    name_short = '', 
                    location = '', 
                    status = '', ),
                region = perian.models.region_query.RegionQuery(
                    name = '', 
                    location = '', 
                    sustainable = True, 
                    status = '', ),
                reference_id = perian.models.reference_id_query.ReferenceIdQuery(
                    id = '', ),
                description = perian.models.description_query.DescriptionQuery(
                    operator = null, 
                    description = '', ),
                cpu = perian.models.cpu_query.CpuQuery(
                    no = 56, 
                    cores = 56, 
                    threads = 56, 
                    speed = 1.337, ),
                gpu = perian.models.gpu_query.GpuQuery(
                    no = 56, 
                    memory = 1.337, 
                    vendor = '', 
                    name = '', ),
                ram = perian.models.memory_query.MemoryQuery(
                    size = 1.337, ),
                storage = perian.models.storage_query.StorageQuery(
                    no = 56, 
                    size = 1.337, 
                    type = '', 
                    speed = 1.337, 
                    included = '', ),
                network = perian.models.network_query.NetworkQuery(
                    inbound_speed = 1.337, 
                    outbound_speed = 1.337, ),
                price = perian.models.price_query.PriceQuery(
                    euro_price = 1.337, 
                    unit = '', 
                    per_hour = 1.337, ),
                availability = perian.models.availability_query.AvailabilityQuery(
                    available = True, ),
                type = perian.models.type_query.TypeQuery(
                    type = '', )
            )
        else:
            return FlavorQuery(
        )
        """

    def testFlavorQuery(self):
        """Test FlavorQuery"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
