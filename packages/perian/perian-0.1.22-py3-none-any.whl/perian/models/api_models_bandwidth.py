# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from perian.models.bandwidth_limits import BandwidthLimits
from perian.models.bandwidth_sla import BandwidthSla
from perian.models.bandwidth_units import BandwidthUnits

class ApiModelsBandwidth(BaseModel):
    """
    ApiModelsBandwidth
    """
    speed: Optional[Union[StrictFloat, StrictInt]] = None
    unit: Optional[BandwidthUnits] = None
    sla: Optional[BandwidthSla] = None
    limit: Optional[BandwidthLimits] = None
    __properties = ["speed", "unit", "sla", "limit"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiModelsBandwidth:
        """Create an instance of ApiModelsBandwidth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiModelsBandwidth:
        """Create an instance of ApiModelsBandwidth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiModelsBandwidth.parse_obj(obj)

        _obj = ApiModelsBandwidth.parse_obj({
            "speed": obj.get("speed"),
            "unit": obj.get("unit"),
            "sla": obj.get("sla"),
            "limit": obj.get("limit")
        })
        return _obj


