# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class CreateJobSuccess(BaseModel):
    """
    CreateJobSuccess
    """
    status: Optional[StrictStr] = 'success'
    message: Optional[StrictStr] = 'Job created successfully'
    detail: Optional[StrictStr] = ''
    status_code: Optional[StrictInt] = 200
    jid: StrictStr = Field(...)
    __properties = ["status", "message", "detail", "status_code", "jid"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateJobSuccess:
        """Create an instance of CreateJobSuccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateJobSuccess:
        """Create an instance of CreateJobSuccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateJobSuccess.parse_obj(obj)

        _obj = CreateJobSuccess.parse_obj({
            "status": obj.get("status") if obj.get("status") is not None else 'success',
            "message": obj.get("message") if obj.get("message") is not None else 'Job created successfully',
            "detail": obj.get("detail") if obj.get("detail") is not None else '',
            "status_code": obj.get("status_code") if obj.get("status_code") is not None else 200,
            "jid": obj.get("jid")
        })
        return _obj


