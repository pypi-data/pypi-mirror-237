# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class DockerRegistryCredentials(BaseModel):
    """
    DockerRegistryCredentials
    """
    url: Optional[StrictStr] = ''
    username: Optional[StrictStr] = ''
    password: Optional[StrictStr] = ''
    __properties = ["url", "username", "password"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DockerRegistryCredentials:
        """Create an instance of DockerRegistryCredentials from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DockerRegistryCredentials:
        """Create an instance of DockerRegistryCredentials from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DockerRegistryCredentials.parse_obj(obj)

        _obj = DockerRegistryCredentials.parse_obj({
            "url": obj.get("url") if obj.get("url") is not None else '',
            "username": obj.get("username") if obj.get("username") is not None else '',
            "password": obj.get("password") if obj.get("password") is not None else ''
        })
        return _obj


