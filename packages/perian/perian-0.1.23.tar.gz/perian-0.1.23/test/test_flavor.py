# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from perian.models.flavor import Flavor  # noqa: E501

class TestFlavor(unittest.TestCase):
    """Flavor unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Flavor:
        """Test Flavor
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Flavor`
        """
        model = Flavor()  # noqa: E501
        if include_optional:
            return Flavor(
                pid = '',
                provider = perian.models.provider.Provider(
                    name = null, 
                    name_short = '', 
                    regions = [
                        perian.models.region.Region(
                            name = '', 
                            city = '', 
                            location = null, 
                            sustainable = True, 
                            status = null, 
                            zones = [
                                perian.models.zone.Zone(
                                    name = '', 
                                    status = null, )
                                ], )
                        ], 
                    location = null, 
                    status = null, 
                    capabilities = [
                        'PricingAPI'
                        ], ),
                region = perian.models.region.Region(
                    name = '', 
                    city = '', 
                    location = null, 
                    sustainable = True, 
                    status = null, 
                    zones = [
                        perian.models.zone.Zone(
                            name = '', 
                            status = null, )
                        ], ),
                reference_id = '',
                description = '',
                cpu = perian.models.cpu_data.CpuData(
                    no = 56, 
                    cores = 56, 
                    threads = 56, 
                    cpus = [
                        perian.models.cpu.Cpu(
                            threads = 56, 
                            cores = 56, 
                            speed = null, )
                        ], ),
                gpu = perian.models.gpu_data.GpuData(
                    no = 56, 
                    memory = null, 
                    gpus = [
                        perian.models.gpu.Gpu(
                            name = '', 
                            vendor = null, 
                            memory = null, )
                        ], ),
                ram = perian.models.memory.Memory(
                    size = 1.337, 
                    unit = null, 
                    bandwidth = null, 
                    interface = null, ),
                storage = perian.models.storage_data.StorageData(
                    no = 56, 
                    size = null, 
                    included = null, 
                    storages = [
                        perian.models.storage.Storage(
                            type = null, 
                            size = null, 
                            speed = null, )
                        ], ),
                network = perian.models.network.Network(
                    inbound = null, 
                    outbound = null, ),
                price = perian.models.price_data.PriceData(
                    euro_price = 1.337, 
                    prices = [
                        perian.models.price.Price(
                            per_hour = 1.337, 
                            unit = null, )
                        ], ),
                availability = perian.models.availability.Availability(
                    available = True, 
                    source = null, ),
                type = 'Virtual'
            )
        else:
            return Flavor(
        )
        """

    def testFlavor(self):
        """Test Flavor"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
