[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "misprint"
dynamic = ["version"]
description = "A logging filter that 'misprints' your secrets"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [{ name = "Bernard Cooke", email = "bernard-cooke@hotmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/unknown/misprint#readme"
Issues = "https://github.com/unknown/misprint/issues"
Source = "https://github.com/unknown/misprint"

[tool.hatch.version]
path = "src/misprint/__init__.py"

[tool.hatch.envs.default]
dependencies = [
  "pre-commit",
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-cov",
  "pytest-clarity",
  "pytest-pretty",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test", "cov-report"]
pre-commit-all = "pre-commit run -a"
all = ["cov", "pre-commit-all"]

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["black>=23.10.0", "mypy>=1.6.1", "ruff>=0.1.1"]

[tool.hatch.envs.lint.scripts]
typing = "mypy --cache-dir /dev/null {args:src}"
style = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.pytest.ini_options]
addopts = [
  "-ra",
  "--cache-clear",
  "--cov=misprint",
  "--cov-report",
  "html:coverage-html",
  "--cov-report",
  "term",
]
python_files = ["tests/test_*.py", "tests/**/test_*.py"]

[tool.bandit]
targets = ["src"]

[tool.black]
target-version = ["py38"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Pseudo-random generators aren't suitable for cryptographic purposes (true,
  # but we aren't using them for that)
  "S311",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["misprint"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and unused variables (e.g. as fixtures)
"tests/**/*" = ["PLR2004", "S101", "ARG001"]

[tool.mypy]
python_version = 3.8

mypy_path = "src"

show_column_numbers = true
show_error_context = true
pretty = true
error_summary = true

follow_imports = "normal"
ignore_missing_imports = true

disallow_untyped_calls = true
warn_return_any = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
disallow_any_generics = true

warn_unreachable = true
disallow_untyped_defs = true
check_untyped_defs = true

cache_dir = "/dev/null"

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
allow_incomplete_defs = true
allow_untyped_calls = true

[tool.coverage.run]
source_pkgs = ["misprint", "tests"]
branch = true
parallel = true
omit = ["src/misprint/__about__.py"]

[tool.coverage.paths]
misprint = ["src/misprint", "*/misprint/src/misprint"]
tests = ["tests", "*/misprint/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
