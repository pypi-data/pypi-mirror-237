# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from chainmaker.protos.common import request_pb2 as chainmaker_dot_protos_dot_common_dot_request__pb2
from chainmaker.protos.tee import enclave_server_pb2 as chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2


class EnclaveServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitEnclave = channel.unary_unary(
                '/tee.EnclaveServer/InitEnclave',
                request_serializer=chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.InitEnclaveRequest.SerializeToString,
                response_deserializer=chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.InitEnclaveResponse.FromString,
                )
        self.DeployContract = channel.unary_unary(
                '/tee.EnclaveServer/DeployContract',
                request_serializer=chainmaker_dot_protos_dot_common_dot_request__pb2.TxRequest.SerializeToString,
                response_deserializer=chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.EnclaveResponse.FromString,
                )
        self.InvokeContract = channel.unary_unary(
                '/tee.EnclaveServer/InvokeContract',
                request_serializer=chainmaker_dot_protos_dot_common_dot_request__pb2.TxRequest.SerializeToString,
                response_deserializer=chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.EnclaveResponse.FromString,
                )
        self.RemoteAttestationProve = channel.unary_unary(
                '/tee.EnclaveServer/RemoteAttestationProve',
                request_serializer=chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.RemoteAttestationRequest.SerializeToString,
                response_deserializer=chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.RemoteAttestationResponse.FromString,
                )


class EnclaveServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InitEnclave(self, request, context):
        """Init Enclave (optional):
        1. Generate and return report.
        2. Generate private key and return public key (RSA & ECC).
        3. Generate and return csr. (Cert will be put into trusted files later)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeployContract(self, request, context):
        """Deploy contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InvokeContract(self, request, context):
        """Invoke contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoteAttestationProve(self, request, context):
        """Remote attestation prove
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnclaveServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitEnclave': grpc.unary_unary_rpc_method_handler(
                    servicer.InitEnclave,
                    request_deserializer=chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.InitEnclaveRequest.FromString,
                    response_serializer=chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.InitEnclaveResponse.SerializeToString,
            ),
            'DeployContract': grpc.unary_unary_rpc_method_handler(
                    servicer.DeployContract,
                    request_deserializer=chainmaker_dot_protos_dot_common_dot_request__pb2.TxRequest.FromString,
                    response_serializer=chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.EnclaveResponse.SerializeToString,
            ),
            'InvokeContract': grpc.unary_unary_rpc_method_handler(
                    servicer.InvokeContract,
                    request_deserializer=chainmaker_dot_protos_dot_common_dot_request__pb2.TxRequest.FromString,
                    response_serializer=chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.EnclaveResponse.SerializeToString,
            ),
            'RemoteAttestationProve': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoteAttestationProve,
                    request_deserializer=chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.RemoteAttestationRequest.FromString,
                    response_serializer=chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.RemoteAttestationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tee.EnclaveServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EnclaveServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InitEnclave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tee.EnclaveServer/InitEnclave',
            chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.InitEnclaveRequest.SerializeToString,
            chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.InitEnclaveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeployContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tee.EnclaveServer/DeployContract',
            chainmaker_dot_protos_dot_common_dot_request__pb2.TxRequest.SerializeToString,
            chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.EnclaveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InvokeContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tee.EnclaveServer/InvokeContract',
            chainmaker_dot_protos_dot_common_dot_request__pb2.TxRequest.SerializeToString,
            chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.EnclaveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoteAttestationProve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tee.EnclaveServer/RemoteAttestationProve',
            chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.RemoteAttestationRequest.SerializeToString,
            chainmaker_dot_protos_dot_tee_dot_enclave__server__pb2.RemoteAttestationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
