# ==================
# Project definition
# ==================

# Derived from https://peps.python.org/pep-0621/

[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42", # At least v42 of setuptools required.
  "versioningit",
]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.0"

[project]
name = "verlib2"
description = "A standalone variant of packaging.version, without anything else."
readme = "README.md"
requires-python = ">=3.6"
license = {text = "Apache License 2.0"}
keywords = [
  "distutils",
  "packaging",
  "version",
]
authors = [{name = "Donald Stufft", email = "donald@stufft.io"}]
maintainers = [
  {name = "Andreas Motl", email = "andreas.motl@panodata.org"},
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.6",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Typing :: Typed",
]

dynamic = [
  "version",
]

dependencies = [
]

[project.optional-dependencies]
develop = [
  "black<23",
  "mypy==1.6.0",
  "poethepoet<1",
  "pyproject-fmt<1.3",
  "ruff==0.0.292",
  "validate-pyproject<0.16",
]
release = [
  "build<2",
  "twine<5",
]
test = [
  "pretend<2",
  "pytest<8",
  "pytest-cov<5",
]
[tool.setuptools]
# https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
packages = ["verlib2"]

[project.urls]
Repository = "https://github.com/panodata/verlib2"

[tool.pytest.ini_options]
minversion = "2.0"
addopts = """
  -rfEX -p pytester --strict-markers --verbosity=3
  --cov --cov-report=term-missing --cov-report=xml
  """
log_level = "DEBUG"
log_cli_level = "DEBUG"
testpaths = ["tests"]
xfail_strict = true
markers = [
]

[tool.coverage.run]
branch = true
omit = [
    "tests/*",
]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "@abc.abstractmethod", "@abc.abstractproperty"]
fail_under = 0
show_missing = true

[tool.mypy]
packages = ["verlib2"]
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[tool.ruff]
#line-length = 120

select = [
  # Bandit
  "S",
  # Bugbear
  "B",
  # Builtins
  "A",
  # comprehensions
  "C4",
  # eradicate
  "ERA",
  # flake8-2020
  "YTT",
  # isort
  "I",
  # pandas-vet
  "PD",
  # print
  "T20",
  # Pycodestyle
  "E",
  "W",
  # Pyflakes
  "F",
  # return
  "RET",
]

ignore = ["RET505"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # Use of `assert` detected


# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]
format = [
  { cmd = "black ." },
  # Configure Ruff not to auto-fix (remove!):
  # Ignore unused imports (F401), unused variables (F841), `print` statements (T201), and commented-out code (ERA001).
  { cmd = "ruff --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 --ignore=ERA001 ." },
  { cmd = "pyproject-fmt pyproject.toml" },
]

lint = [
  { cmd = "ruff ." },
  { cmd = "black --check ." },
  { cmd = "validate-pyproject pyproject.toml" },
  { cmd = "mypy" },
]
test = [
  { cmd = "pytest" },
]
test-fast = [
  { cmd = "pytest -m 'not slow'" },
]
build = { cmd = "python -m build" }
check = ["lint", "test"]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload --skip-existing dist/*.tar.gz dist/*.whl" },
]
