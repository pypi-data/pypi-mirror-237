# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")



def _add_paths():
  import os
  result = []

  if hasattr(os, 'add_dll_directory'):
    for path in os.environ.get('PATH', '').split(';'):
      if os.path.isabs(path) and os.path.exists(path):
        result.append(os.add_dll_directory(path))

  return result

_extra_paths = _add_paths()

if __package__ or '.' in __name__:
    from . import _BrickAgxPyApi_d
else:
    import _BrickAgxPyApi_d

for path in _extra_paths:
  path.close()

del _extra_paths
del _add_paths



try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _BrickAgxPyApi_d.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BrickAgxPyApi_d.delete_SwigPyIterator

    def value(self):
        return _BrickAgxPyApi_d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BrickAgxPyApi_d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BrickAgxPyApi_d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BrickAgxPyApi_d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BrickAgxPyApi_d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BrickAgxPyApi_d.SwigPyIterator_copy(self)

    def next(self):
        return _BrickAgxPyApi_d.SwigPyIterator_next(self)

    def __next__(self):
        return _BrickAgxPyApi_d.SwigPyIterator___next__(self)

    def previous(self):
        return _BrickAgxPyApi_d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BrickAgxPyApi_d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BrickAgxPyApi_d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BrickAgxPyApi_d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BrickAgxPyApi_d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BrickAgxPyApi_d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BrickAgxPyApi_d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BrickAgxPyApi_d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BrickAgxPyApi_d:
_BrickAgxPyApi_d.SwigPyIterator_swigregister(SwigPyIterator)

import rebrick.Core
import rebrick.Math
import rebrick.Physics
import rebrick.Physics1D
import rebrick.Physics3D
import rebrick.DriveTrain
import rebrick.Robotics
import rebrick.Simulation
import agxSDK
import agx
import agxData
import agxStream
import agxCollide
import agxRender
class BrickToAgxMapper(object):
    r"""Proxy of C++ BrickAgx::BrickToAgxMapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BrickToAgxMapper self, Simulation simulation, std::string const & source_id, std::string const & debug_tnc_path="", std::shared_ptr< Brick::ErrorReporter > error_reporter=std::make_shared< Brick::ErrorReporter >()) -> BrickToAgxMapper

        Parameters
        ----------
        simulation: agxSDK::Simulation *
        source_id: std::string const &
        debug_tnc_path: std::string const &
        error_reporter: std::shared_ptr< Brick::ErrorReporter >

        """
        _BrickAgxPyApi_d.BrickToAgxMapper_swiginit(self, _BrickAgxPyApi_d.new_BrickToAgxMapper(*args))

    def mapObject(self, object):
        r"""
        mapObject(BrickToAgxMapper self, std::shared_ptr< Brick::Core::Object > object) -> AssemblyRef

        Parameters
        ----------
        object: std::shared_ptr< Brick::Core::Object >

        """
        return _BrickAgxPyApi_d.BrickToAgxMapper_mapObject(self, object)

    def getErrorReporter(self):
        r"""getErrorReporter(BrickToAgxMapper self) -> std::shared_ptr< Brick::ErrorReporter >"""
        return _BrickAgxPyApi_d.BrickToAgxMapper_getErrorReporter(self)

    def getPowerLine(self):
        r"""getPowerLine(BrickToAgxMapper self) -> agxPowerLine::PowerLineRef"""
        return _BrickAgxPyApi_d.BrickToAgxMapper_getPowerLine(self)
    __swig_destroy__ = _BrickAgxPyApi_d.delete_BrickToAgxMapper

# Register BrickToAgxMapper in _BrickAgxPyApi_d:
_BrickAgxPyApi_d.BrickToAgxMapper_swigregister(BrickToAgxMapper)

class Signals(object):
    r"""Proxy of C++ BrickAgx::Signals class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def popInputSignals():
        r"""popInputSignals() -> Simulation_InputSignal_Vector"""
        return _BrickAgxPyApi_d.Signals_popInputSignals()

    @staticmethod
    def sendInputSignal(signal):
        r"""
        sendInputSignal(std::shared_ptr< Simulation::InputSignal > signal) -> bool

        Parameters
        ----------
        signal: std::shared_ptr< Simulation::InputSignal >

        """
        return _BrickAgxPyApi_d.Signals_sendInputSignal(signal)

    @staticmethod
    def getOutputSignals():
        r"""getOutputSignals() -> Simulation_OutputSignal_Vector"""
        return _BrickAgxPyApi_d.Signals_getOutputSignals()

    @staticmethod
    def sendOutputSignal(signal):
        r"""
        sendOutputSignal(std::shared_ptr< Simulation::OutputSignal > signal) -> bool

        Parameters
        ----------
        signal: std::shared_ptr< Simulation::OutputSignal >

        """
        return _BrickAgxPyApi_d.Signals_sendOutputSignal(signal)

    @staticmethod
    def clearOutputSignals():
        r"""clearOutputSignals()"""
        return _BrickAgxPyApi_d.Signals_clearOutputSignals()

    def __init__(self):
        r"""__init__(Signals self) -> Signals"""
        _BrickAgxPyApi_d.Signals_swiginit(self, _BrickAgxPyApi_d.new_Signals())
    __swig_destroy__ = _BrickAgxPyApi_d.delete_Signals

# Register Signals in _BrickAgxPyApi_d:
_BrickAgxPyApi_d.Signals_swigregister(Signals)

def Signals_popInputSignals():
    r"""Signals_popInputSignals() -> Simulation_InputSignal_Vector"""
    return _BrickAgxPyApi_d.Signals_popInputSignals()

def Signals_sendInputSignal(signal):
    r"""
    Signals_sendInputSignal(std::shared_ptr< Simulation::InputSignal > signal) -> bool

    Parameters
    ----------
    signal: std::shared_ptr< Simulation::InputSignal >

    """
    return _BrickAgxPyApi_d.Signals_sendInputSignal(signal)

def Signals_getOutputSignals():
    r"""Signals_getOutputSignals() -> Simulation_OutputSignal_Vector"""
    return _BrickAgxPyApi_d.Signals_getOutputSignals()

def Signals_sendOutputSignal(signal):
    r"""
    Signals_sendOutputSignal(std::shared_ptr< Simulation::OutputSignal > signal) -> bool

    Parameters
    ----------
    signal: std::shared_ptr< Simulation::OutputSignal >

    """
    return _BrickAgxPyApi_d.Signals_sendOutputSignal(signal)

def Signals_clearOutputSignals():
    r"""Signals_clearOutputSignals()"""
    return _BrickAgxPyApi_d.Signals_clearOutputSignals()

class InputSignalListener(agxSDK.StepEventListener):
    r"""Proxy of C++ BrickAgx::InputSignalListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, assembly):
        r"""
        __init__(InputSignalListener self, AssemblyRef assembly) -> InputSignalListener

        Parameters
        ----------
        assembly: agxSDK::AssemblyRef

        """
        _BrickAgxPyApi_d.InputSignalListener_swiginit(self, _BrickAgxPyApi_d.new_InputSignalListener(assembly))

    def preCollide(self, time):
        r"""
        preCollide(InputSignalListener self, agx::TimeStamp const & time)

        Parameters
        ----------
        time: agx::TimeStamp const &

        """
        return _BrickAgxPyApi_d.InputSignalListener_preCollide(self, time)
    RECOMMENDED_PRIO = _BrickAgxPyApi_d.InputSignalListener_RECOMMENDED_PRIO
    
    __swig_destroy__ = _BrickAgxPyApi_d.delete_InputSignalListener

# Register InputSignalListener in _BrickAgxPyApi_d:
_BrickAgxPyApi_d.InputSignalListener_swigregister(InputSignalListener)

class OutputSignalListener(agxSDK.StepEventListener):
    r"""Proxy of C++ BrickAgx::OutputSignalListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, assembly, brick_scene):
        r"""
        __init__(OutputSignalListener self, AssemblyRef assembly, std::shared_ptr< Brick::Core::Object > brick_scene) -> OutputSignalListener

        Parameters
        ----------
        assembly: agxSDK::AssemblyRef
        brick_scene: std::shared_ptr< Brick::Core::Object >

        """
        _BrickAgxPyApi_d.OutputSignalListener_swiginit(self, _BrickAgxPyApi_d.new_OutputSignalListener(assembly, brick_scene))

    def syncOutputSignals(self):
        r"""syncOutputSignals(OutputSignalListener self)"""
        return _BrickAgxPyApi_d.OutputSignalListener_syncOutputSignals(self)

    def post(self, time):
        r"""
        post(OutputSignalListener self, agx::TimeStamp const & time)

        Parameters
        ----------
        time: agx::TimeStamp const &

        """
        return _BrickAgxPyApi_d.OutputSignalListener_post(self, time)
    RECOMMENDED_PRIO = _BrickAgxPyApi_d.OutputSignalListener_RECOMMENDED_PRIO
    
    __swig_destroy__ = _BrickAgxPyApi_d.delete_OutputSignalListener

# Register OutputSignalListener in _BrickAgxPyApi_d:
_BrickAgxPyApi_d.OutputSignalListener_swigregister(OutputSignalListener)

class AssemblyBrickObjectPair(object):
    r"""Proxy of C++ std::pair< std::shared_ptr< Brick::Core::Object >,agxSDK::AssemblyRef > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AssemblyBrickObjectPair self) -> AssemblyBrickObjectPair
        __init__(AssemblyBrickObjectPair self, std::shared_ptr< Brick::Core::Object > first, AssemblyRef second) -> AssemblyBrickObjectPair

        Parameters
        ----------
        first: std::shared_ptr< Brick::Core::Object >
        second: agx::ref_ptr< agxSDK::Assembly >

        __init__(AssemblyBrickObjectPair self, AssemblyBrickObjectPair other) -> AssemblyBrickObjectPair

        Parameters
        ----------
        other: std::pair< std::shared_ptr< Brick::Core::Object >,agxSDK::AssemblyRef > const &

        """
        _BrickAgxPyApi_d.AssemblyBrickObjectPair_swiginit(self, _BrickAgxPyApi_d.new_AssemblyBrickObjectPair(*args))
    first = property(_BrickAgxPyApi_d.AssemblyBrickObjectPair_first_get, _BrickAgxPyApi_d.AssemblyBrickObjectPair_first_set, doc=r"""first : std::shared_ptr<(Brick::Core::Object)>""")
    second = property(_BrickAgxPyApi_d.AssemblyBrickObjectPair_second_get, _BrickAgxPyApi_d.AssemblyBrickObjectPair_second_set, doc=r"""second : agx::ref_ptr<(agxSDK::Assembly)>""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _BrickAgxPyApi_d.delete_AssemblyBrickObjectPair

# Register AssemblyBrickObjectPair in _BrickAgxPyApi_d:
_BrickAgxPyApi_d.AssemblyBrickObjectPair_swigregister(AssemblyBrickObjectPair)

class ClickInputListener(object):
    r"""Proxy of C++ BrickAgx::ClickInputListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, server, brick_scene, autostepping_enabled):
        r"""
        __init__(ClickInputListener self, std::shared_ptr< click::Server > & server, std::shared_ptr< Brick::Core::Object > const & brick_scene, bool autostepping_enabled) -> ClickInputListener

        Parameters
        ----------
        server: std::shared_ptr< click::Server > &
        brick_scene: std::shared_ptr< Brick::Core::Object > const &
        autostepping_enabled: bool

        """
        _BrickAgxPyApi_d.ClickInputListener_swiginit(self, _BrickAgxPyApi_d.new_ClickInputListener(server, brick_scene, autostepping_enabled))

    def preFrame(self, app):
        r"""
        preFrame(ClickInputListener self, agxOSG::ExampleApplication * app)

        Parameters
        ----------
        app: agxOSG::ExampleApplication *

        """
        return _BrickAgxPyApi_d.ClickInputListener_preFrame(self, app)

    def set_autostepping_enabled(self, enabled):
        r"""
        set_autostepping_enabled(ClickInputListener self, bool enabled)

        Parameters
        ----------
        enabled: bool

        """
        return _BrickAgxPyApi_d.ClickInputListener_set_autostepping_enabled(self, enabled)

    def is_autostepping_enabled(self):
        r"""is_autostepping_enabled(ClickInputListener self) -> bool"""
        return _BrickAgxPyApi_d.ClickInputListener_is_autostepping_enabled(self)

    def is_click_signal_available(self):
        r"""is_click_signal_available(ClickInputListener self) -> bool"""
        return _BrickAgxPyApi_d.ClickInputListener_is_click_signal_available(self)
    __swig_destroy__ = _BrickAgxPyApi_d.delete_ClickInputListener

# Register ClickInputListener in _BrickAgxPyApi_d:
_BrickAgxPyApi_d.ClickInputListener_swigregister(ClickInputListener)

class ClickOutputListener(agxSDK.StepEventListener):
    r"""Proxy of C++ BrickAgx::ClickOutputListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, server):
        r"""
        __init__(ClickOutputListener self, std::shared_ptr< click::Server > & server) -> ClickOutputListener

        Parameters
        ----------
        server: std::shared_ptr< click::Server > &

        """
        _BrickAgxPyApi_d.ClickOutputListener_swiginit(self, _BrickAgxPyApi_d.new_ClickOutputListener(server))

    def post(self, time):
        r"""
        post(ClickOutputListener self, agx::TimeStamp const & time)

        Parameters
        ----------
        time: agx::TimeStamp const &

        """
        return _BrickAgxPyApi_d.ClickOutputListener_post(self, time)
    RECOMMENDED_PRIO = _BrickAgxPyApi_d.ClickOutputListener_RECOMMENDED_PRIO
    

    def robot_name_from(self, robot_output_signal):
        r"""
        robot_name_from(ClickOutputListener self, RobotOutputSignal robot_output_signal) -> std::string

        Parameters
        ----------
        robot_output_signal: Robotics::RobotOutputSignal const &

        """
        return _BrickAgxPyApi_d.ClickOutputListener_robot_name_from(self, robot_output_signal)
    __swig_destroy__ = _BrickAgxPyApi_d.delete_ClickOutputListener

# Register ClickOutputListener in _BrickAgxPyApi_d:
_BrickAgxPyApi_d.ClickOutputListener_swigregister(ClickOutputListener)

class ClickKeyboardEventListener(agxSDK.GuiEventListener):
    r"""Proxy of C++ BrickAgx::ClickKeyboardEventListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, click_input_listener, app):
        r"""
        __init__(ClickKeyboardEventListener self, ClickInputListener click_input_listener, agxOSG::ExampleApplication * app) -> ClickKeyboardEventListener

        Parameters
        ----------
        click_input_listener: BrickAgx::ClickInputListener *
        app: agxOSG::ExampleApplication *

        """
        _BrickAgxPyApi_d.ClickKeyboardEventListener_swiginit(self, _BrickAgxPyApi_d.new_ClickKeyboardEventListener(click_input_listener, app))

    def keyboard(self, key, modkeyMask, x, y, keyDown):
        r"""
        keyboard(ClickKeyboardEventListener self, int key, unsigned int modkeyMask, float x, float y, bool keyDown) -> bool

        Parameters
        ----------
        key: int
        modkeyMask: unsigned int
        x: float
        y: float
        keyDown: bool

        """
        return _BrickAgxPyApi_d.ClickKeyboardEventListener_keyboard(self, key, modkeyMask, x, y, keyDown)
    __swig_destroy__ = _BrickAgxPyApi_d.delete_ClickKeyboardEventListener

# Register ClickKeyboardEventListener in _BrickAgxPyApi_d:
_BrickAgxPyApi_d.ClickKeyboardEventListener_swigregister(ClickKeyboardEventListener)

class ClickAdapter(object):
    r"""Proxy of C++ BrickAgx::ClickAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def add_listeners(app, simulation, click_server_addr, brick_scene):
        r"""
        add_listeners(agxOSG::ExampleApplication * app, Simulation simulation, std::string const & click_server_addr, std::shared_ptr< Brick::Core::Object > const & brick_scene)

        Parameters
        ----------
        app: agxOSG::ExampleApplication *
        simulation: agxSDK::Simulation *
        click_server_addr: std::string const &
        brick_scene: std::shared_ptr< Brick::Core::Object > const &

        """
        return _BrickAgxPyApi_d.ClickAdapter_add_listeners(app, simulation, click_server_addr, brick_scene)

    @staticmethod
    def create_click_listeners(application, click_server_addr, brick_scene):
        r"""
        create_click_listeners(agxOSG::ExampleApplication * application, std::string const & click_server_addr, std::shared_ptr< Brick::Core::Object > const & brick_scene) -> std::tuple< BrickAgx::ClickInputListener *,BrickAgx::ClickOutputListener *,BrickAgx::ClickKeyboardEventListener * >

        Parameters
        ----------
        application: agxOSG::ExampleApplication *
        click_server_addr: std::string const &
        brick_scene: std::shared_ptr< Brick::Core::Object > const &

        """
        return _BrickAgxPyApi_d.ClickAdapter_create_click_listeners(application, click_server_addr, brick_scene)

    @staticmethod
    def add_file_changed_listener(app, brickfile):
        r"""
        add_file_changed_listener(agxOSG::ExampleApplication * app, std::string const & brickfile)

        Parameters
        ----------
        app: agxOSG::ExampleApplication *
        brickfile: std::string const &

        """
        return _BrickAgxPyApi_d.ClickAdapter_add_file_changed_listener(app, brickfile)

    @staticmethod
    def set_log_level(log_level_name):
        r"""
        set_log_level(std::string const & log_level_name)

        Parameters
        ----------
        log_level_name: std::string const &

        """
        return _BrickAgxPyApi_d.ClickAdapter_set_log_level(log_level_name)

    def __init__(self):
        r"""__init__(ClickAdapter self) -> ClickAdapter"""
        _BrickAgxPyApi_d.ClickAdapter_swiginit(self, _BrickAgxPyApi_d.new_ClickAdapter())
    __swig_destroy__ = _BrickAgxPyApi_d.delete_ClickAdapter

# Register ClickAdapter in _BrickAgxPyApi_d:
_BrickAgxPyApi_d.ClickAdapter_swigregister(ClickAdapter)

def ClickAdapter_add_listeners(app, simulation, click_server_addr, brick_scene):
    r"""
    ClickAdapter_add_listeners(agxOSG::ExampleApplication * app, Simulation simulation, std::string const & click_server_addr, std::shared_ptr< Brick::Core::Object > const & brick_scene)

    Parameters
    ----------
    app: agxOSG::ExampleApplication *
    simulation: agxSDK::Simulation *
    click_server_addr: std::string const &
    brick_scene: std::shared_ptr< Brick::Core::Object > const &

    """
    return _BrickAgxPyApi_d.ClickAdapter_add_listeners(app, simulation, click_server_addr, brick_scene)

def ClickAdapter_create_click_listeners(application, click_server_addr, brick_scene):
    r"""
    ClickAdapter_create_click_listeners(agxOSG::ExampleApplication * application, std::string const & click_server_addr, std::shared_ptr< Brick::Core::Object > const & brick_scene) -> std::tuple< BrickAgx::ClickInputListener *,BrickAgx::ClickOutputListener *,BrickAgx::ClickKeyboardEventListener * >

    Parameters
    ----------
    application: agxOSG::ExampleApplication *
    click_server_addr: std::string const &
    brick_scene: std::shared_ptr< Brick::Core::Object > const &

    """
    return _BrickAgxPyApi_d.ClickAdapter_create_click_listeners(application, click_server_addr, brick_scene)

def ClickAdapter_add_file_changed_listener(app, brickfile):
    r"""
    ClickAdapter_add_file_changed_listener(agxOSG::ExampleApplication * app, std::string const & brickfile)

    Parameters
    ----------
    app: agxOSG::ExampleApplication *
    brickfile: std::string const &

    """
    return _BrickAgxPyApi_d.ClickAdapter_add_file_changed_listener(app, brickfile)

def ClickAdapter_set_log_level(log_level_name):
    r"""
    ClickAdapter_set_log_level(std::string const & log_level_name)

    Parameters
    ----------
    log_level_name: std::string const &

    """
    return _BrickAgxPyApi_d.ClickAdapter_set_log_level(log_level_name)


def load_brickfile(*args):
    r"""
    load_brickfile(brick_file:str, bundle_paths:str, modelname:str=) -> (Brick.Core.Object, AssemblyRef)

    Load brickfile and return the BRICK model and corresponding AGX assembly

        Parameters
        ----------
        brick_file: path to the brick file
        brick_file: path to the brick file
        bundle_paths: semicolon separated list of file paths to bundles
        modelname:  optional name of the model that should be returned, if not provided the last model in the file is returned

    load_brickfile(brick_file:str, bundle_paths:str, modelname:str=) -> (Brick.Core.Object, AssemblyRef)

    Load brickfile and return the BRICK model and corresponding AGX assembly

        Parameters
        ----------
        brick_file: path to the brick file
        brick_file: path to the brick file
        bundle_paths: semicolon separated list of file paths to bundles
        modelname:  optional name of the model that should be returned, if not provided the last model in the file is returned

    load_brickfile(brick_file:str, bundle_paths:str, modelname:str=) -> (Brick.Core.Object, AssemblyRef)

    Load brickfile and return the BRICK model and corresponding AGX assembly

        Parameters
        ----------
        brick_file: path to the brick file
        brick_file: path to the brick file
        bundle_paths: semicolon separated list of file paths to bundles
        modelname:  optional name of the model that should be returned, if not provided the last model in the file is returned


    """
    return _BrickAgxPyApi_d.load_brickfile(*args)

def load_brickstring(*args):
    r"""
    load_brickstring(Simulation simulation, std::string const & source, std::string const & bundle_paths, std::string const & modelname="", std::string const & debug_tnc_path="") -> AssemblyBrickObjectPair

    Parameters
    ----------
    simulation: agxSDK::Simulation *
    source: std::string const &
    bundle_paths: std::string const &
    modelname: std::string const &
    debug_tnc_path: std::string const &

    """
    return _BrickAgxPyApi_d.load_brickstring(*args)

def register_bundles(brick_ctx):
    r"""
    register_bundles(Brick::Core::Api::BrickContext & brick_ctx)

    Parameters
    ----------
    brick_ctx: Brick::Core::Api::BrickContext &

    """
    return _BrickAgxPyApi_d.register_bundles(brick_ctx)

def parse_and_evaluate_file(*args):
    r"""
    parse_and_evaluate_file(std::string const & bundle_paths, std::string const & brick_file, std::string const & modelname="") -> std::shared_ptr< Brick::Core::Object >

    Parameters
    ----------
    bundle_paths: std::string const &
    brick_file: std::string const &
    modelname: std::string const &

    """
    return _BrickAgxPyApi_d.parse_and_evaluate_file(*args)

def parse_and_evaluate_string(*args):
    r"""
    parse_and_evaluate_string(std::string const & bundle_paths, std::string const & source, std::string const & modelname="") -> std::shared_ptr< Brick::Core::Object >

    Parameters
    ----------
    bundle_paths: std::string const &
    source: std::string const &
    modelname: std::string const &

    """
    return _BrickAgxPyApi_d.parse_and_evaluate_string(*args)

def map_brick_object(simulation, object, brick_file, debug_tnc_path):
    r"""
    map_brick_object(Simulation simulation, std::shared_ptr< Brick::Core::Object > object, std::string const & brick_file, std::string const & debug_tnc_path) -> AssemblyRef

    Parameters
    ----------
    simulation: agxSDK::Simulation *
    object: std::shared_ptr< Brick::Core::Object >
    brick_file: std::string const &
    debug_tnc_path: std::string const &

    """
    return _BrickAgxPyApi_d.map_brick_object(simulation, object, brick_file, debug_tnc_path)
class FileChangedListener(object):
    r"""Proxy of C++ BrickAgx::FileChangedListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file_to_track):
        r"""
        __init__(FileChangedListener self, std::string file_to_track) -> FileChangedListener

        Parameters
        ----------
        file_to_track: std::string

        """
        _BrickAgxPyApi_d.FileChangedListener_swiginit(self, _BrickAgxPyApi_d.new_FileChangedListener(file_to_track))

    def preFrame(self, app):
        r"""
        preFrame(FileChangedListener self, agxOSG::ExampleApplication * app)

        Parameters
        ----------
        app: agxOSG::ExampleApplication *

        """
        return _BrickAgxPyApi_d.FileChangedListener_preFrame(self, app)

    def postFrame(self, arg2):
        r"""
        postFrame(FileChangedListener self, agxOSG::ExampleApplication * arg2)

        Parameters
        ----------
        arg2: agxOSG::ExampleApplication *

        """
        return _BrickAgxPyApi_d.FileChangedListener_postFrame(self, arg2)
    __swig_destroy__ = _BrickAgxPyApi_d.delete_FileChangedListener

# Register FileChangedListener in _BrickAgxPyApi_d:
_BrickAgxPyApi_d.FileChangedListener_swigregister(FileChangedListener)



