# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flywheel.api_client import ApiClient
import flywheel.models

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.

class DefaultApi(object):
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def engine_upload(self, level, id, job, **kwargs):  # noqa: E501
        """Upload a list of file fields.

        ### Default behavior: > Uploads a list of file fields sent as file1, file2, etc to an existing   container and updates fields of the files, the container and it's   parents as specified in the metadata fileformfield using the   engine placer class  > A non-file form field called \"metadata\" is also required, which must be   a string containing JSON.  > See ``api/schemas/input/enginemetadata.json`` for the format of this metadata.  ### When ``level`` is ``analysis``: > Uploads a list of files to an existing analysis object, marking   all files as ``output=true`` using the job-based analyses placer   class.  > A non-file form field called \"metadata\" is also required, which must be   a string containing JSON.  > See ``api/schemas/input/analysis.json`` for the format of this metadata.  ### Signed URL upload with ``upload_ticket`` > Upload a single file directly to the storage backend. The workflow is the following:    - Send a request with an empty ``?upload_ticket=`` query parameter to get an upload ticket and URL   - Upload the file using a PUT request to the upload URL   - Once done, send a POST request to this endpoint with the upload ticket to finalize the upload.   The file will be placed into the DB via this POST request. 
        This method makes a synchronous HTTP request by default.

        :param str level: Which level to store files in (required)
        :param str id: The ID of the container to place files in (required)
        :param str job: Required if ``level`` is ``analysis`` (required)
        :param str upload_ticket: Use empty value to get a ticket, and provide the ticket id to finalize the upload
        :param str body: Object encoded as a JSON string. It is **required** and used **only** when the ``upload_ticket`` parameter is used. See ``schemas/input/signedurlmetadata.json`` for the format of the json payload. 
        :param str form_data:
        :param bool async_: Perform the request asynchronously
        :return: object
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.engine_upload_with_http_info(level, id, job, **kwargs)  # noqa: E501
        else:
            (data) = self.engine_upload_with_http_info(level, id, job, **kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def engine_upload_with_http_info(self, level, id, job, **kwargs):  # noqa: E501
        """Upload a list of file fields.

        ### Default behavior: > Uploads a list of file fields sent as file1, file2, etc to an existing   container and updates fields of the files, the container and it's   parents as specified in the metadata fileformfield using the   engine placer class  > A non-file form field called \"metadata\" is also required, which must be   a string containing JSON.  > See ``api/schemas/input/enginemetadata.json`` for the format of this metadata.  ### When ``level`` is ``analysis``: > Uploads a list of files to an existing analysis object, marking   all files as ``output=true`` using the job-based analyses placer   class.  > A non-file form field called \"metadata\" is also required, which must be   a string containing JSON.  > See ``api/schemas/input/analysis.json`` for the format of this metadata.  ### Signed URL upload with ``upload_ticket`` > Upload a single file directly to the storage backend. The workflow is the following:    - Send a request with an empty ``?upload_ticket=`` query parameter to get an upload ticket and URL   - Upload the file using a PUT request to the upload URL   - Once done, send a POST request to this endpoint with the upload ticket to finalize the upload.   The file will be placed into the DB via this POST request. 
        This method makes a synchronous HTTP request by default.

        :param str level: Which level to store files in (required)
        :param str id: The ID of the container to place files in (required)
        :param str job: Required if ``level`` is ``analysis`` (required)
        :param str upload_ticket: Use empty value to get a ticket, and provide the ticket id to finalize the upload
        :param str body: Object encoded as a JSON string. It is **required** and used **only** when the ``upload_ticket`` parameter is used. See ``schemas/input/signedurlmetadata.json`` for the format of the json payload. 
        :param str form_data:
        :param bool async: Perform the request asynchronously
        :return: object
        """

        all_params = ['level','id','job','upload_ticket','body','form_data',]  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method engine_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'level' is set
        if ('level' not in params or
                params['level'] is None):
            raise ValueError("Missing the required parameter `level` when calling `engine_upload`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `engine_upload`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `engine_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'job' in params:
            query_params.append(('job', params['job']))  # noqa: E501
        if 'upload_ticket' in params:
            query_params.append(('upload_ticket', params['upload_ticket']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'body' in params:
            form_params.append(('body', params['body']))  # noqa: E501
        if 'form_data' in params:
            form_params.append(('formData', params['form_data']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/engine', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_config_js(self, **kwargs):  # noqa: E501
        """Return public Scitran configuration information in javascript format.

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: None
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_config_js_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_config_js_with_http_info(**kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_config_js_with_http_info(self, **kwargs):  # noqa: E501
        """Return public Scitran configuration information in javascript format.

        This method makes a synchronous HTTP request by default.

        :param bool async: Perform the request asynchronously
        :return: None
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_config_js" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/javascript'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/config.js', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_tree_graph(self, **kwargs):  # noqa: E501
        """Get a description of the flywheel hiearchy

        This method makes a synchronous HTTP request by default.

        :param bool async_: Perform the request asynchronously
        :return: TreeGraph
        """
        ignore_simplified_return_value = kwargs.pop('_ignore_simplified_return_value', False)
        kwargs['_return_http_data_only'] = True

        if kwargs.get('async_'):
            return self.get_tree_graph_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tree_graph_with_http_info(**kwargs)  # noqa: E501
            if (
                data
                and hasattr(data, 'return_value')
                and not ignore_simplified_return_value
            ):
                return data.return_value()
            return data


    def get_tree_graph_with_http_info(self, **kwargs):  # noqa: E501
        """Get a description of the flywheel hiearchy

        This method makes a synchronous HTTP request by default.

        :param bool async: Perform the request asynchronously
        :return: TreeGraph
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tree_graph" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/tree/graph', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TreeGraph',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)
