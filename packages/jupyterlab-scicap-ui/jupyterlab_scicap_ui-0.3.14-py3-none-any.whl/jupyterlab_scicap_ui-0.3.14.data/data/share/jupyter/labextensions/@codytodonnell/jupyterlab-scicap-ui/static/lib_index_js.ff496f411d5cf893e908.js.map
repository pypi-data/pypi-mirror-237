{"version":3,"file":"lib_index_js.ff496f411d5cf893e908.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,kEAAgB;AACrC,uBAAuB,yDAAM;AAC7B;AACA;AACA;AACA,yBAAyB,kEAAgB;AACzC;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AClCsD;AACL;AACK;AACN;AACT;AACE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS;AACxB;AACA,QAAQ,oDAAU;AAClB;AACA;AACA,YAAY,kDAAS;AACrB,YAAY,kDAAS;AACrB,wBAAwB,kDAAS;AACjC,SAAS;AACT;AACA,+FAA+F,OAAO;AACtG,SAAS;AACT,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA,wDAAwD,gEAAS;AACjE;AACA,oCAAoC,yDAAoB;AACxD,mCAAmC,gEAAc,GAAG,SAAS;AAC7D;AACA,oCAAoC,gEAAS;AAC7C;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;ACpDzB;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACRmD;AACiB;AAC1C;AACe;AACzC;AACA;AACA;AACO,mCAAmC,6DAAW;AACrD;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAmB,CAAC,yDAAiB,IAAI,QAAQ,kDAAS,wBAAwB,kDAAS,gBAAgB;AAC1H;AACA","sources":["webpack://@codytodonnell/jupyterlab-scicap-ui/./lib/handler.js","webpack://@codytodonnell/jupyterlab-scicap-ui/./lib/index.js","webpack://@codytodonnell/jupyterlab-scicap-ui/./lib/sc-service.js","webpack://@codytodonnell/jupyterlab-scicap-ui/./lib/widget.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, '@codytodonnell/jupyterlab-scicap-ui', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { MainAreaWidget } from '@jupyterlab/apputils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { reactIcon } from '@jupyterlab/ui-components';\nimport { ScienceCapsuleWidget } from './widget';\nimport { requestAPI } from './handler';\nimport { scService } from './sc-service';\n/**\n * The command IDs used by the react-widget plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.create = 'create-react-widget';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for the react-widget extension.\n */\nconst extension = {\n    id: 'react-widget',\n    autoStart: true,\n    optional: [ILauncher],\n    activate: (app, launcher) => {\n        requestAPI('sc_api_url')\n            .then(result => {\n            console.log(result);\n            scService.apiUrl = result.data.apiUrl;\n            scService.apiUrlWindows = result.data.apiUrlWindows;\n            console.log(scService);\n        })\n            .catch(reason => {\n            console.error(`The jupyterlab_scicap_ui server extension appears to be missing.\\n${reason}`);\n        });\n        const { commands } = app;\n        const command = CommandIDs.create;\n        commands.addCommand(command, {\n            caption: 'Open Science Capsule',\n            label: 'Science Capsule',\n            icon: (args) => (args['isPalette'] ? null : reactIcon),\n            execute: () => {\n                const content = new ScienceCapsuleWidget();\n                const widget = new MainAreaWidget({ content });\n                widget.title.label = 'Science Capsule';\n                widget.title.icon = reactIcon;\n                app.shell.add(widget, 'main');\n            },\n        });\n        if (launcher) {\n            launcher.add({\n                command,\n            });\n        }\n    },\n};\nexport default extension;\n","/**\n * Service to maintain the apiUrl state which is\n * requested asynchronously on start and subsequently\n * used by in the sc-client functions.\n */\nexport const scService = {\n    apiUrl: null,\n    apiUrlWindows: null\n};\n","import { ReactWidget } from '@jupyterlab/apputils';\nimport { App as ScienceCapsuleApp } from '@codytodonnell/scicap-ui';\nimport React from 'react';\nimport { scService } from './sc-service';\n/**\n * A widget that wraps and renders the Science Capsule UI App\n */\nexport class ScienceCapsuleWidget extends ReactWidget {\n    constructor() {\n        super();\n        this.addClass('jp-ReactWidget');\n    }\n    render() {\n        return React.createElement(ScienceCapsuleApp, { apiUrl: scService.apiUrl, apiUrlWindows: scService.apiUrlWindows });\n    }\n}\n"],"names":[],"sourceRoot":""}