Metadata-Version: 2.1
Name: mkchangelog
Version: 1.0.3
Summary: Generate changelog from git log with convencional commits'
Project-URL: Documentation, https://github.com/onjin/mkchangelog#readme
Project-URL: Issues, https://github.com/onjin/mkchangelog/issues
Project-URL: Source, https://github.com/onjin/mkchangelog
Author-email: Marek Wywia≈Ç <onjinx@gmail.com>
License-Expression: MIT
License-File: LICENSE.txt
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Requires-Python: >=3.7
Requires-Dist: gitpython
Requires-Dist: semver
Provides-Extra: colors
Requires-Dist: rich; extra == 'colors'
Description-Content-Type: text/markdown

# mkchangelog

[![PyPI - Version](https://img.shields.io/pypi/v/mkchangelog.svg)](https://pypi.org/project/mkchangelog)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mkchangelog.svg)](https://pypi.org/project/mkchangelog)

-----

Use this CLI tool to create a changelog for a project from the git log using the `conventional commits` scheme.

Features:
- show the last changes as markdown
- generate full CHANGELOG.md file
- compute and bump next versions (using `semver`)
- group changes by `type` and by `scope` also
- aggregate `Closes XXX-XX[,YYY-YY]` and `Relates XXX-XX[,YYY-YY]` references
- optionally output colorized markdown to the console (install by `mkchangelog[colors]` and add `--cli` option)

**Table of Contents**

- [Installation](#installation)
- [Uusage](#usage)
- [License](#license)

## Installation

```console
pip install mkchangelog
```

## Usage

```console
mkchangelog changes - show  changelog for last changes, using default `fix` and `feat` types only
mkchangelog changes -t all - show  changelog for last changes, using all types
mkchangelog generate -t all - generate full changelog for current and all previous versions (signed tags) on the screen
mkchangelog bump - interactive tool; compute next versions from `feat`, `fix` and `breaking_changes`, optionaly write `CHANGELOG.md`, commit and tag next version
```

## License

`mkchangelog` is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.
