"use strict";(self.webpackChunkdockerfile_kernel=self.webpackChunkdockerfile_kernel||[]).push([[537],{537:(e,t,n)=>{n.r(t),n.d(t,{default:()=>p});var o=n(861);const r=()=>{const e=new o.IFrame,t=new o.MainAreaWidget({content:e});return t.id="docker-help",t.title.label="Docker Help",t.title.closable=!0,t};var s=n(614),a=n(788),i=n(930);var l=n(717);class c{constructor(e){this.app=e,this.currentImage=null}createNew(e){const t=new o.ToolbarButton({className:"create-console-button",label:"Create Console",onClick:async()=>{var t,n,r,s;const a=await(null===(n=null===(t=e.sessionContext.session)||void 0===t?void 0:t.kernel)||void 0===n?void 0:n.requestKernelInfo());"docker"===(null===(s=null===(r=e.sessionContext.session)||void 0===r?void 0:r.kernel)||void 0===s?void 0:s.name)&&void 0!==a&&null!==a.content.imageId&&(this.currentImage=a.content.imageId,o.InputDialog.getText({title:"Console's Initial Command",text:`docker run -it -w /root ${this.currentImage}`}).then((e=>{if(null===e.value)return;const t=e.value+"\r";this.app.commands.execute("terminal:create-new").then((e=>{e.content.session.connectionStatusChanged.connect(((e,n)=>{"connected"===n&&null!==this.currentImage&&e.send({type:"stdin",content:[t]})}))}))})))},tooltip:"Create console for current notebook"});return e.toolbar.insertItem(10,"createConsole",t),new l.DisposableDelegate((()=>{t.dispose()}))}}var d=n(854);const u=(e,t,n)=>{(e=>{let t=r();e.commands.addCommand("helper:open",{execute:async({hook:n})=>{t.isDisposed&&(t=r()),n=n?"/#"+n:"",t.content.url="https://docs.docker.com/engine/reference/builder"+n.toLowerCase(),t.isAttached||e.shell.add(t,"main",{mode:"split-right"}),e.shell.activateById(t.id)}})})(e),((e,t,n)=>{const{commands:r}=e;r.addCommand("docker:import",{label:"Open Dockerfile from Pathâ€¦",caption:"Open Dockerfile from path",execute:async t=>{const l=await(async(e,t,n)=>{var r;let s;if(s=(null==n?void 0:n.path)?n.path:null!==(r=(await o.InputDialog.getText({label:"Path",placeholder:"/path/relative/to/jlab/root",title:"Open Dockerfile Path",okLabel:"Open"})).value)&&void 0!==r?r:void 0,s){try{const o="/"!==s&&s.endsWith("/");o&&(s=s.slice(0,s.length-1));const{services:r}=e.model.manager,a=await r.contents.get(s,{content:!1});if(o&&"directory"!==a.type)throw new Error(`Path ${s}/ is not a directory`);if(await t.execute("filebrowser:go-to-path",{path:s,dontShowBrowser:n.dontShowBrowser}),"directory"===a.type)return}catch(e){return e.response&&404===e.response.status&&(e.message=`Could not find path: %1 ${s}`),(0,o.showErrorMessage)("Cannot open",e)}return s}})(n,r,t);if("string"!=typeof l)return;if(!l.toLowerCase().endsWith("dockerfile"))return(0,o.showErrorMessage)("Not a Dockerfile","File must have extension 'Dockerfile'");const c=await a.ServerConnection.makeRequest(s.URLExt.join(e.serviceManager.serverSettings.baseUrl,"api/contents",l),{},e.serviceManager.serverSettings),d=(e=>{const t=[],n=e.content.split("\n#cellEnd");for(const e of n){const n=e.split("#cellStart\n");for(const e of n)e.startsWith("\n")||e.endsWith("\n")?t.push(...e.split("\n\n").filter((e=>e.length>0))):""!==e&&t.push(e)}return t})(await c.json()),u=(e=>{const t={cells:[],metadata:{kernelspec:{display_name:"Dockerfile",language:"text",name:"docker"},language_info:{file_extension:".dockerfile",mimetype:"text/x-dockerfile-config",name:"docker"}},nbformat:4,nbformat_minor:5};for(const n of e){const e=[];let o="code";for(let t of n.split("\n"))t.startsWith("#md ")?(t=t.substring(4),o="markdown"):t.startsWith("#mg ")&&(t=t.substring(4)),e.push(t+"\n");let r=e.pop();r=null==r?void 0:r.substring(0,r.length-1),void 0!==r&&e.push(r),t.cells.push({cell_type:o,execution_count:null,id:i.UUID.uuid4(),metadata:{},outputs:[],source:e})}return t})(d),p=l+".ipynb";await e.serviceManager.contents.save(p,{type:"file",format:"text",content:JSON.stringify(u)}),r.execute("docmanager:open",{path:p})}})})(e,0,n),(e=>{e.docRegistry.addWidgetExtension("Notebook",new c(e))})(e),(e=>{const{commands:t}=e;t.addCommand("docker:context_warning",{label:"Choose build context",caption:"Choose build context",execute:async()=>{await(0,o.showDialog)({title:"No build context set",body:'The size of the current working directory is large. To prevent long initial loading times, no build context was set. Please manually set the context with the context magic "%context /your/custom/path"',buttons:[],hasClose:!0})}})})(e)},p={id:"dockerfile_kernel:plugin",description:"A Dockerfile kernel for JupyterLab",autoStart:!0,requires:[o.ICommandPalette,d.IDefaultFileBrowser],activate:(e,t,n)=>{u(e,0,n)}}}}]);