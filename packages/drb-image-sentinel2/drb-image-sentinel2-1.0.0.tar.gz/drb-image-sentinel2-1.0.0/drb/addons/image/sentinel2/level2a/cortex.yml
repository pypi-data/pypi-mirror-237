topic: 73b017d6-e1af-11ec-8fea-0242ac120002 # Sentinel-2 User Product Level-2A
image:
  - name:
      constant: preview
    source:
      python: |
        from drb.core.predicate import Predicate
        import re

        class RegexNamePredicate(Predicate):
          def __init__(self, regex: str):
            super().__init__()
            self._regex = regex

          def matches(self, node) -> bool:
            return re.match(self._regex, node.name) is not None

        qi_data = node['GRANULE'][0]['QI_DATA']
        return qi_data[RegexNamePredicate('.*_PVI.jp2$')][0]
  - name:
      constant: TrueColorImage
    source:
      python: |
        from drb.core.predicate import Predicate
        import re

        class RegexNamePredicate(Predicate):
          def __init__(self, regex: str):
            super().__init__()
            self._regex = regex

          def matches(self, node) -> bool:
            return re.match(self._regex, node.name) is not None

        img_data = node['GRANULE'][0]['IMG_DATA']['R60m']
        return img_data[RegexNamePredicate('.*_TCI*')][0]
    aux_data:
      resolution: 60m
  - name:
      constant: TrueColorImage
    source:
      python: |
        from drb.core.predicate import Predicate
        import re

        class RegexNamePredicate(Predicate):
          def __init__(self, regex: str):
            super().__init__()
            self._regex = regex

          def matches(self, node) -> bool:
            return re.match(self._regex, node.name) is not None

        img_data = node['GRANULE'][0]['IMG_DATA']['R20m']
        return img_data[RegexNamePredicate('.*_TCI*')][0]
    aux_data:
      resolution: 20m
  - name:
      constant: TrueColorImage
    source:
      python: |
        from drb.core.predicate import Predicate
        import re

        class RegexNamePredicate(Predicate):
          def __init__(self, regex: str):
            super().__init__()
            self._regex = regex

          def matches(self, node) -> bool:
            return re.match(self._regex, node.name) is not None

        img_data = node['GRANULE'][0]['IMG_DATA']['R10m']
        return img_data[RegexNamePredicate('.*_TCI*')][0]
    aux_data:
      resolution: 10m
  - name:
      python: |
        return [n.name for n in node['GRANULE'][0]['IMG_DATA']['R10m']]
    source:
      python: return node['GRANULE'][0]['IMG_DATA']['R10m'][image_name]
    aux_data:
      resolution: 10m
  - name:
      python: |
        return [n.name for n in node['GRANULE'][0]['IMG_DATA']['R20m']]
    source:
      python: return node['GRANULE'][0]['IMG_DATA']['R20m'][image_name]
    aux_data:
      resolution: 20m
  - name:
      python: |
        return [n.name for n in node['GRANULE'][0]['IMG_DATA']['R60m']]
    source:
      python: return node['GRANULE'][0]['IMG_DATA']['R60m'][image_name]
    aux_data:
      resolution: 60m
