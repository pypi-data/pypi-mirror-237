# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx

from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.jsonable_encoder import jsonable_encoder
from .types.download_url_response import DownloadUrlResponse
from .types.review_download_url_request_filter import ReviewDownloadUrlRequestFilter
from .types.upload_url_response import UploadUrlResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BalkanID:
    def __init__(self, *, base_url: str, api_key: str, timeout: typing.Optional[float] = 60):
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url, api_key=api_key, httpx_client=httpx.Client(timeout=timeout)
        )

    def post_integrations_upload_url(self, *, integration_id: str) -> UploadUrlResponse:
        """
        ### BalkanID Entitlements upload CSV Format

        In this section, we will explain the BalkanID Entitlements CSV format.

        ### Sample CSV

        | **Project** | <u> **Privilege Name** </u> | <u> **Privilege Value** </u> | **Email** | **User ID** | **Username** | **Name** | **Connection** | **Connection Type** | **Resource** | **Resource Type** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | respository-role | ops | repository |
        | balkanid | push | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | respository-role | ops | repository |
        | balkanid | admin | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | respository-role | ops | repository |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | respository-role | ops | repository |
        | balkanid | push | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | respository-role | ops | repository |
        | balkanid | admin | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | respository-role | ops | repository |


        **NOTE**: Columns that are <u> underlined </u> are required always.

        NOTE: In this sample we are using Github example for familiarity. Please note that BalkanID offers a direct Github integration.

        **Column Definitions**

        | Column Name   |   Column Description  |
        | --- | --- |
        | Project | *Optional* \- This is a “project”-level of organization in your application. This can be a Github organization, Slack organization, AWS account number, Azure directory, Google domain, Okta Site URL, etc. In the sample CSV, this is a Github organization “balkanid”. While optional, it is recommended that you provide Project value. If not provided, the Project value is set to “default”. |
        | Privilege Name | *Required* \- The name of the action/permission/entitlement. These are typically actions that can be taken on a resource. In the sample CSV, these are “pull”, “push”, and “admin”, which are actions associated with a repository. |
        | Privilege Value | *Required* \- In many cases, these will be “true”. In some cases, it is useful to model an explicit deny by including entitlements where Privilege Value is “false”. In the sample CSV, we see both “true” and “false” privilege values. |
        | Email | *One of Email, User ID, or Username required* \- The email associated with the identity to which this entitlement belongs to, if available. In the sample CSV, this is “ayden@example.com”. |
        | User ID | *One of Email, User ID, or Username required* \- Some applications have an ID that is separate from email or username. This is the place to include that ID. |
        | Username | *One of Email, User ID, or Username required* \- The username associated with the identity to which this entitlement belongs to. In the sample CSV, this is “koch71”. |
        | Name | *Optional* \- The name of the identity to which this entitlement belongs to, if available. This can be the name of a person, a service account, or other names. |
        | Connection | *Optional*, **required if Connection Type is present** \- Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Type | *Optional*, **required if Connection is present** \- Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Resource | *Optional*, **required if Resource Type is present** \- The resource this entitlement references. In the sample CSV, the resource is the “ops” repository. |
        | Resource Type | *Optional*, **required if Resource is present** \- A useful resource type that groups resources in your application. This can be a Github repository/organization/application, AWS service, a Slack channel, etc. In the sample CSV, the resource type is “repository”. |

        **Required Columns**

        Privilege Name and Privilege Value are always required.

        One of Email, User ID, or Username are required. You may provide one, two, or all three of Email, User ID, or Username.

        If you provide Connection or Connection Type column, the other one Connection Type or Connection is required.

        If you provide Resource or Resource Type column, the other one Resource Type or Resource is required.

        All other columns are optional.

        ### Restrictions

        When Email, User ID, and Username are provided together, instead of only one of them, they always have to correspond to the same triplet.

        For example, the following is valid because the triplet of Email, User ID, and Username is the same in both rows:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01234567 | koch71 |
        | ayden@example.com | 01234567 | koch71 |

        However, the following is not valid and will result in an error, because the same Email and User ID have two different Usernames associated with them:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01235467 | koch71 |
        | ayden@example.com | 01235467 | ayden71 |

        Similarly, the following is not valid and will result in an error, because the Username and User ID have two different Emails associated with them:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01235467 | koch71 |
        | ayden.koch@example.com | 01235467 | koch71 |

        Similarly, the following is not valid and will result in an error because the Username and Email have two different User IDs associated with them:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01235467 | koch71 |
        | ayden@example.com | 98765432 | koch71 |

        In summary, you only need to provide one of: Email, User ID, Username. If you provide more than one, the combination of Email, User ID, and or Username must be the same on every row they appear on.

        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/entitlements.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Entitlements CSV format](#balkanid-entitlements-upload-csv-format).

        Parameters:
            - integration_id: str. The integration ID to which the entitlements belong to.

        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "integrations/upload-url"),
            json=jsonable_encoder({"integrationID": integration_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_integrations_download_url(self, *, integration_id: str) -> DownloadUrlResponse:
        """
        ### BalkanID Entitlements download CSV Format

        In this section, we will explain the BalkanID Entitlements CSV format.

        ### Sample CSV

        | **Project** | **Privilege Name** | **Privilege Value** | **Email** | **User ID** | **Username** | **Name** | **Connection** | **Connection Type** | **Resource** | **Resource Type** | **Employee ID** | **Labels** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | repository-role | ops | repository |     |     |
        | balkanid | push | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | repository-role | ops | repository |     |     |
        | balkanid | admin | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | repository-role | ops | repository |     |     |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | repository-role | ops | repository |     |     |
        | balkanid | push | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | repository-role | ops | repository |     |     |
        | balkanid | admin | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | repository-role | ops | repository |     | \[{"source":"brn:bid:balkanid:::02GFREWAWDFR3RG264H6QWERT5:app:compute/privileged","version":"20220726","value":{"text":"Privileged"},"key":"entitlement/privileged"}\] |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        NOTE: In this sample we are using Github example for familiarity.

        **Column Definitions**

        | Column Name   |   Column Description  |
        | --- | --- |
        | Project | This is a “project”-level of organization in your application. This can be a Github organization, Slack organization, AWS account number, Azure directory, Google domain, Okta Site URL, etc. In the sample CSV, this is a Github organization “balkanid”. While optional, it is recommended that you provide Project value. If not provided, the Project value is set to “default”. |
        | Privilege Name | The name of the action/permission/entitlement. These are typically actions that can be taken on a resource. In the sample CSV, these are “pull”, “push”, and “admin”, which are actions associated with a repository. |
        | Privilege Value | In many cases, these will be “true”. In some cases, it is useful to model an explicit deny by including entitlements where Privilege Value is “false”. In the sample CSV, we see both “true” and “false” privilege values. |
        | Email | The email associated with the identity to which this entitlement belongs to, if available. In the sample CSV, this is “ayden@example.com”. |
        | User ID | Some applications have an ID that is separate from email or username. This is the place to include that ID. |
        | Username | The username associated with the identity to which this entitlement belongs to. In the sample CSV, this is “koch71”. |
        | Name | The name of the identity to which this entitlement belongs to, if available. This can be the name of a person, a service account, or other names. |
        | Connection | Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Type | Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Resource | The resource this entitlement references. In the sample CSV, the resource is the “ops” repository. |
        | Resource Type | A useful resource type that groups resources in your application. This can be a Github repository/organization/application, AWS service, a Slack channel, etc. In the sample CSV, the resource type is “repository”. |
        | Employee ID | ID of the Employee, if mapped |
        | Labels | Insights such as privileged, sod, outlier, over entitled. |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Entitlements CSV format](#balkanid-entitlements-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.

        Parameters:
            - integration_id: str. The integration ID to which the entitlements belong to.

        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "integrations/download-url"),
            json=jsonable_encoder({"integrationID": integration_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_employees_download_url(self) -> DownloadUrlResponse:
        """
        ### BalkanID Employees download CSV Format

        In this section, we will explain the BalkanID Employees CSV format.

        ### Sample CSV

        | **Employee ID** | **Full Name** | **First Name** | **Last Name** | <u> **Work Email** </u> | **Department** | **Title** | <u> **Start Date** </u> | **End Date** | **Employment Type** | **Manager** | **Manager Work Email** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | 1   | Ahmed Ali | Ahmed | Ali | aali@example.com | Sales | Sales Representative | 01/21/2021 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 2   | Maria Gomez | Maria | Gomez | mgomez@example.com | Marketing | Marketing Manager | 07/13/2020 |     | Part-time | Ahmed Ali | aali@example.com |
        | 3   | Xiaoyun Liu | Xiaoyun | Liu | xliu@example.com | IT  | IT Analyst | 01/01/2019 |     | Contractor | Maria Gomez | mgomez@example.com |
        | 4   | Fatimah Al-Saud | Fatimah | Al-Saud | fasaud@example.com | HR  | HR Coordinator | 05/20/2019 |     | Full-time | Ahmed Ali | aali@example.com |
        | 5   | Pierre Dupont | Pierre | Dupont | pdupont@example.com | Operations | Operations Manager | 08/15/2019 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 6   | Siti Fatimah | Siti | Fatimah | sfatimah@example.com | Finance | Financial Analyst | 10/31/2019 |     | Part-time | Ahmed Ali | aali@example.com |
        | 7   | Taro Yamada | Taro | Yamada | tyamada@example.com | Legal | Lawyer | 01/01/2020 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 8   | Nadezhda Ivanova | Nadezhda | Ivanova | nivanova@example.com | Engineering | Mechanical Engineer | 03/15/2020 |     | Contractor | Ahmed Ali | aali@example.com |
        | 9   | Muhammad Khan | Muhammad | Khan | mkhan@example.com | Customer | Service | 06/30/2020 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 10  | Sanjay Gupta | Sanjay | Gupta | sgupta@example.com | Research | Research Analyst | 09/15/2020 |     | Full-time | Ahmed Ali | aali@example.com |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        |  Column Name   |   Column Description  |
        | --- | --- |
        | Employee ID | *Optional* \- A unique identifier for the employee. This can be a number or a string. In the sample CSV, this is: 1, 2, 3, etc. |
        | Full Name | *One of Full Name, First Name, or Last Name required* \- The employee's full name. This is the recommended name field to use. In the sample CSV, this is: Ahmed Ali, Maria Gomez, etc. |
        | First Name | *One of Full Name, First Name, or Last Name required* \- The employee's first name. Using Full Name is recommended, but First Name can also be provided. In the sample CSV, this is: Ahmed, Maria, etc. |
        | Last Name | *One of Full Name, First Name, or Last Name required* \- The employee's last name. Using Full Name is recommended, but Last Name can also be provided. In the sample CSV, this is: Ali, Gomez, etc. |
        | Work Email | *Required* \- The work email of the employee. In the sample CSV, this is: aali@example.com, mgomez@example.com, etc. |
        | Department | *Optional* \- The employee's department. In the sample CSV, this is: Sales, Marketing, etc. |
        | Title | *Optional*\- The employee's job title. In the sample CSV, this is: Sales Representative, Marketing Manager, etc. |
        | Start Date | *Required* \- The employee's start date in MM/DD/YYYY format. In the sample CSV, this is: 01/21/2021, 07/13/2020, etc. |
        | End Date | *Optional* \- The employee's termination date, if any, in MM/DD/YYYY format. In the sample CSV, there are no End Dates listed, meaning everyone is still with the company. |
        | Employment Type | *Optional* \- The type of employment. In the sample CSV, this is: Full-time, Part-time, etc. |
        | Manager | *Optional* \- The full name of the employee's manager. In the sample CSV, this is: Maria Gomez, Ahmed Ali, etc. |
        | Manager Work Email | *Optional* \- The work email of the employee's manager. In the sample CSV, this is: mgomez@example.com, aali@example.com, etc. |

        **Required Columns**

        Work Email and Start Date are always required.

        One of Full Name, First Name, or Last Name are required. You may provide one, two, or all three of Full Name, First Name, or Last Name.

        All other columns are optional.

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Employees CSV format](#balkanid-employees-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "employees/download-url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_relations_employees_identities_upload_url(self) -> UploadUrlResponse:
        """
        ### BalkanID Relations upload CSV Format

        In this section, we will explain the BalkanID Relations CSV format.

        **Sample CSV**

        | <u> **Identity ID** </u> | <u> **Username** </u> | **Identity email** | <u> **Identity name** </u> | <u> **App ID** </u> | <u> **App Name** </u> | **App Description** | **Relation type** | **Employee email** | **Employee name** | **Employee department** | **Employee job title** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | id/U-ysy2l6niyJmThu_Z-9urozE8tQBAEmJhjZ4nVxphg | ses-smtp-user.20220203-154927 |     | ses-smtp-user.20220203-154927 | aws/01FX103897S15JVJAR17GS3SQT | Amazon Web Services |     | owns | sam@example.com |     |     |     |
        | id/xjyKMctjdu6l3iaJwo6OkvJ8BMtvFrmWEz4yIK5xrks | anrew.garfield |     | anrew.garfield | aws/01FX103897S15JVJAR17GS3SQC | Amazon Web Services |     |     |     |     |     |     |
        | id/YPvK3hg7UfMQTz5VdEb8HraIouOCr35BQxpYlVKrYdg | michael.keaton |     | michael.keaton | aws/01FX103897S15JVJAR17GS3SQC | Amazon Web Services |     |     |     |     |     |     |
        | email/0g3BUiakDZW63KtF3wajG85noCRZdlzVH9SKKVXMfT0 | james@example.com | james@example.com | James S | google/01H965ZRNQHAS2B8GKJA85X75C | Google |     |     |     |     |     |     |
        | email/0urU-a0COLlg3FIyI1pPAcmZM7d9zpmG8O2b3HAuirs | sam@example.com | sam@example.com | Sam L | google/01H965ZRNQHAS2B8GKJA85X75C | Google |     | is  | sam@example.com | Sam L | Engineering | Staff Engineer |
        | email/CUp7jz61_N5K2qctJNyKsSFy1pZSpDneEStYN89dImw | michael@example.com | michael@example.com | Michael K | google/01H965ZRNQHAS2B8GKJA85X75C | Google |     | is  | michael@example.com | Micheal K | Engineering | Head of Engineering |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        |  Column Name   |   Column Description  |
        | --- | --- |
        | Identity ID | *Required*, unique Identity ID |
        | Username | *Required*, username of the identity |
        | Identity email | *Optional*, Email of the Identity |
        | Identity name | *Required*, Name of the identity |
        | App ID | *Required*, Unique ID of the application |
        | App Name | *Required*, name of the application |
        | App Description | *Optional* |
        | Relation type | *Optional*, Type of relationship, currently support "IS", "OWNS" |
        | Employee email | *Optional*, the email of the employee according to the balkanid tenant |
        | Employee name | *Optional*, Name of the employee |
        | Employee department | *Optional*, Department of the employee |
        | Employee job title | *Optional*, Title of the employee |

        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/relations.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Relations CSV format](#balkanid-relations-upload-csv-format).
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", "relations_employees_identities/upload-url"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_relations_employees_identities_download_url(self) -> DownloadUrlResponse:
        """
        ### BalkanID Relations download CSV Format

        In this section, we will explain the BalkanID Relations CSV format.

        **Sample CSV**

        | <u> **Identity ID** </u> | <u> **Username** </u> | **Identity email** | <u> **Identity name** </u> | <u> **App ID** </u> | <u> **App Name** </u> | **App Description** | **Relation type** | **Employee email** | **Employee name** | **Employee department** | **Employee job title** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | id/U-ysy2l6niyJmThu_Z-9urozE8tQBAEmJhjZ4nVxphg | ses-smtp-user.20220203-154927 |     | ses-smtp-user.20220203-154927 | aws/01FX103897S15JVJAR17GS3SQT | Amazon Web Services |     | owns | sam@example.com |     |     |     |
        | id/xjyKMctjdu6l3iaJwo6OkvJ8BMtvFrmWEz4yIK5xrks | anrew.garfield |     | anrew.garfield | aws/01FX103897S15JVJAR17GS3SQC | Amazon Web Services |     |     |     |     |     |     |
        | id/YPvK3hg7UfMQTz5VdEb8HraIouOCr35BQxpYlVKrYdg | michael.keaton |     | michael.keaton | aws/01FX103897S15JVJAR17GS3SQC | Amazon Web Services |     |     |     |     |     |     |
        | email/0g3BUiakDZW63KtF3wajG85noCRZdlzVH9SKKVXMfT0 | james@example.com | james@example.com | James S | google/01H965ZRNQHAS2B8GKJA85X75C | Google |     |     |     |     |     |     |
        | email/0urU-a0COLlg3FIyI1pPAcmZM7d9zpmG8O2b3HAuirs | sam@example.com | sam@example.com | Sam L | google/01H965ZRNQHAS2B8GKJA85X75C | Google |     | is  | sam@example.com | Sam L | Engineering | Staff Engineer |
        | email/CUp7jz61_N5K2qctJNyKsSFy1pZSpDneEStYN89dImw | michael@example.com | michael@example.com | Michael K | google/01H965ZRNQHAS2B8GKJA85X75C | Google |     | is  | michael@example.com | Micheal K | Engineering | Head of Engineering |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        |  Column Name   |   Column Description  |
        | --- | --- |
        | Identity ID | *Required*, unique Identity ID |
        | Username | *Required*, username of the identity |
        | Identity email | *Optional*, Email of the Identity |
        | Identity name | *Required*, Name of the identity |
        | App ID | *Required*, Unique ID of the application |
        | App Name | *Required*, name of the application |
        | App Description | *Optional* |
        | Relation type | *Optional*, Type of relationship, currently support "IS", "OWNS" |
        | Employee email | *Optional*, the email of the employee according to the balkanid tenant |
        | Employee name | *Optional*, Name of the employee |
        | Employee department | *Optional*, Department of the employee |
        | Employee job title | *Optional*, Title of the employee |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Relations CSV format](#balkanid-relations-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", "relations_employees_identities/download-url"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_reviews_upload_url(self) -> UploadUrlResponse:
        """
        ### BalkanID Access Reviews upload CSV Format

        In this section, we will explain the BalkanID Access Reviews CSV format.

        **Sample CSV**

        This example contains example of both changing status of pre-existing review
        and creating a new review.

        |       ID        |       Identity ID     | Identity Name | Identity Email  | Identity Username |     Job Title     |   Department   | Manager | Employment Type  | Campaign Name | Request ID | Application ID | Application Name | Application Description | Connection | Connection Type | <u> Reviewer ID </u> | Created At  | Review Status | <u> Updated By </u> | <u> Updated At </u> |     Resource      | Resource Type | Permission Name | Permission Value |    Project    |
        |----------------|------------------------|---------------|-----------------|-------------------|------------------|----------------|---------|------------------|---------------|------------|----------------|--------------------|------------------------|------------|-----------------|------------|------------|--------------|------------|------------|------------------|---------------|----------------|-----------------|--------------|
        | 01HA02R3MHB80NZE27JVZTRM8B | finKM9KRb8xPz-A3w5OEw25XtImLTrxjKV5JE6gCMs4 |    Albert     | albert@example.com |       albert      | Co-founder, COO/CSO | Finance & Operations |  James  | Salaried, full-time | Test campaign |            | GA02R3MHB80NZE27JVZTRM8B |       Google      |                       |            | 2023-09-10 |    rejected   | sam@example.com | 2023-09-10 |  Test Resource  |   application  |  some permission  |       true       |  myGithubOrg |
        |                |                        |               |                 |                   |                    |                |         |                    | Test campaign |            |                  |       Github      |                       | Test Connection |      team      | james@example.com | 2023-09-10 |               | james@example.com | 2023-09-10 |    Test Resource  |   application  |  some permission  |       true       |  myGithubOrg |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | Column Name        | Column Description                                                                                                      |
        |--------------------|--------------------------------------------------------------------------------------------------------------------------|
        | ID                 | *Optional, required if doing a status change*: Contains the unique ID of the review.                                    |
        | Identity ID        | *Optional*, unique ID of the identity in the application.                                                                  |
        | Identity Name      | *Optional*, Name of the identity.                                                                                          |
        | Identity Email     | *Optional, required if creating a new review*: Email of the identity.                                                       |
        | Identity Username  | *Optional, required if creating a new review*: Username of the identity.                                                    |
        | Job Title          | *Optional*, The job title of identity, for which the access review needs to be done.                                      |
        | Department         | *Optional*, The department to which the identity belongs, for which the access review needs to be done.                 |
        | Manager            | *Optional*, The job title of identity, for which the access review needs to be done.                                      |
        | Employment Type    | *Optional*, Employment type of the identity, such as Full-Time, Salaried, Contractor, Intern, etc.                         |
        | Campaign Name      | *Optional, required if creating a new review under a campaign*: Name of the campaign (campaign must exist in tenant).   |
        | Request ID         | *Optional, required if creating a new review under an access request*: Unique ID of the request.                         |
        | Application ID     | *Optional, required if creating a new review*:                                                                           |
        | Application Name   | *Optional, required if creating a new review*: Name of the application for which review is created.                      |
        | Application Description | *Optional*, Description of the application.                                                                             |
        | Connection         | *Optional, required if Connection Type is present*: Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Type    | *Optional, required if Connection is present*: Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Reviewer ID        | *Required*, email of the reviewer.                                                                                       |
        | Created At         | *Optional*, creation date of the review.                                                                                  |
        | Review Status      | *Optional, required if changing status of a pre-existing review*: Allows `approved` for approving a review, `rejected` for rejecting a review, `delegated` for delegating/reassigning it to someone else. |
        | Updated By         | *Required*: Email of the user who changed status of review, must be the same email who was assigned the review.         |
        | Updated At         | *Required*, Date at which the review of updated or created, in the format YYYY-MM-DD.                                    |
        | Resource           | *Optional, required if creating a new review*: resource name.                                                             |
        | Resource Type      | *Optional, required if creating a new review*: resource type.                                                             |
        | Permission Name    | *Optional, required if creating a new review*: Name of the permission.                                                     |
        | Permission Value   | *Optional, required if creating a new review*: Takes true or false.                                                        |
        | Project            | *Optional*, Name of the project.                                                                                         |

        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/reviews.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Access Reviews CSV format](#balkanid-access-reviews-upload-csv-format).
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "reviews/upload-url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_reviews_download_url(
        self, *, filter: typing.Optional[ReviewDownloadUrlRequestFilter] = OMIT, include_activity_log: bool
    ) -> DownloadUrlResponse:
        """
        ### BalkanID Access Reviews download CSV Format

        In this section, we will explain the BalkanID Access Reviews CSV format.

        **Sample CSV**

        | <u> Access Review ID </u>                      | <u> Permission</u>  | <u> Permission Value </u> | Resource         | Resource Type | Identity ID                             | <u> Identity Type</u>  | Identity Email      | Identity Username | Identity Name | Employee Email    | Job Title | Department | Manager | Employment Type | <u> Campaign Name</u>  | <u> Application Name</u>  | Application Description                             | Connections   | Connection Types | <u> Reviewer</u>  | <u> Reviewer ID </u> | <u> Access Review Creation Date</u>  | Access Review Completion Date | <u> Review Status </u> | Activity Log                                                                                                                                                                                                                                                                      |
        |--------------------------------------|------------|-------------------|------------------|---------------|-----------------------------------------|--------------|----------------------|-------------------|---------------|-------------------|------------|------------|---------|-----------------|----------------|------------------|-----------------------------------------------------|---------------|------------------|-----------|------------|--------------------------|-----------------------------|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
        | 01H90W5FM2RY663D6AFNG9HEJ9           | owner      | TRUE              | Frontend Repo   | Repository    | 76yi-IQGt_K6apHfRslIOCs_bIn91x31Jaccv89pkc4 | employee     | john.doe@example.com | john.doe@example.com | John Doe      | john.doe@example.com | Engineer   | Engineering |         | Full time       | Campaign 1     | Github           | GitHub is a code hosting platform for version control and collaboration | read          | repository-role  | Jane Doe  | jane.doe@example.com | 2023-08-29               |                         | overdue       | [{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>john.doe@example.com</u>&nbsp;</font></a>","Actor Name":"John Doe","Activity Comment":"","Previous Status":"","Status":"created","Timestamp":"2023-08-29T14:46:36+00:00"},{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>jane.doe@example.com</u>&nbsp;</font></a>","Actor Name":"Jane Doe"Activity Comment":"","Previous Status":"created","Status":"started","Timestamp":"2023-08-29T14:46:36+00:00"}] |
        | 01H90W5FM2RY663D6AFP7DBEAB           | owner      | TRUE              | Backend Repo    | Repository    | 76yi-IQGt_K6apHfRslIOCs_bIn91x31Jaccv89pkc4 | employee     | john.doe@example.com | john.doe@example.com | John Doe      | john.doe@example.com | Engineer   | Engineering |         | Full time       | Campaign 1     | Github           | GitHub is a code hosting platform for version control and collaboration | write         | repository-role  | Jane Doe  | jane.doe@example.com | 2023-08-29               |                         | overdue       | [{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>john.doe@example.com</u></font></a><a href="mailto:dhruv.shah@balkan.id"><font>&nbsp;</font></a>","Actor Name":"John Doe","Activity Comment":"","Previous Status":"","Status":"created","Timestamp":"2023-08-29T14:46:36+00:00"},{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>jane.doe@example.com</u></font></a><a href="mailto:dhruv.shah@balkan.id"><font>&nbsp;</font></a>","Actor Name":"Jane Doe","Activity Comment":"","Previous Status":"created","Status":"started","Timestamp":"2023-08-29T14:46:36+00:00"}] |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | **Column Name**                | **Column Description**                                                                                                                                |
        |---------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|
        | Access Review ID                | *Required* - This is a unique access review ID for each entitlement generated by the BalkanID processing engine and serves as an identifier for each review as a part of a campaign. |
        | Permission                      | *Required* - The name of the action/permission/entitlement. These are typically actions that can be taken on a resource. In the sample CSV, these are “pull”, “push”, and “admin”, which are actions associated with a repository. |
        | Permission Value                | *Required* - In many cases, these will be “true”. In some cases, it is useful to model an explicit deny by including entitlements where Privilege Value is “false”. In the sample CSV, we see both “true” and “false” privilege values. |
        | Resource                        | *Optional*, *Required if Resource Type is Present* - The resource this entitlement references. In the sample CSV, the resource is the “ops” repository. |
        | Resource Type                   | *Optional*, *Required if Resource is Present* - A useful resource type that groups resources in your application. This can be a Github repository/organization/application, AWS service, a Slack channel, etc. In the sample CSV, the resource type is “repository”. |
        | Identity ID                     | Unique ID for each identity generated by the BalkanID entitlements processing engine. |
        | Identity Type                   | *Required* - The type of the identity. Can be any of employee, service account, or undefined. |
        | Identity Email                  | *One of Email, User ID, or Username* - The email associated with the identity to which this entitlement belongs to |
        | Identity Username               | *One of Email, User ID, or Username* - The username associated with the identity to which this entitlement belongs to |
        | Identity Name                   | *Optional* - The name of the identity to which this entitlement belongs to, if available. This can be the name of a person, a service account, or other names. |
        | Employee Email                  | *One of Email, User ID, or Username* - The email associated with the employee to which this entitlement belongs to |
        | Job Title                       | The job title of the identity, for which the access review needs to be done. |
        | Department                      | The department to which the identity belongs, for which the access review needs to be done. |
        | Manager                         | The job title of identity, for which the access review needs to be done. |
        | Employment Type                 | Employment type of the identity, such as Full-Time, Salaried, Contractor, Intern, etc. |
        | Campaign Name                   | *Required* - Name of the Campaign to which the reviews belong to. |
        | Application Name                | *Required* - The name of the application for which the entitlements need to be reviewed. |
        | Application Description         | *Optional* - The description of the application for which the entitlements need to be reviewed. |
        | Connections                     | *Optional*, *Required if Connection Type is Present* - Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Types                | *Optional*, *Required if Connection is Present* - Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Reviewer                        | *Required* - The name of the identity to which this review is assigned. This can be the name of a person or other names. |
        | Reviewer ID                     | *Required* - Email ID of the reviewer, the identity to which the review is assigned. |
        | Access Review Creation Date     | *Required* - The date on which the access review was created in YYYY-MM-DD format. |
        | Access Review Completion Date   | *Optional*, *Required if access review is completed is Present* - The date on which the access review was completed in YYYY-MM-DD format. |
        | Review Status                   | *Required* - This can be a complete, overdue, etc. depending on the status. |
        | Activity Log                    | *Optional* - List of actions performed on the entitlement. |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Access Reviews CSV format](#balkanid-access-reviews-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.

        Parameters:
            - filter: typing.Optional[ReviewDownloadUrlRequestFilter]. Filter by a campaign or a request. Only one filter can be applied at a time.

            - include_activity_log: bool. Include the activity log for each review.

        """
        _request: typing.Dict[str, typing.Any] = {"includeActivityLog": include_activity_log}
        if filter is not OMIT:
            _request["filter"] = filter
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "reviews/download-url"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_requests_upload_url(self) -> UploadUrlResponse:
        """
        ### BalkanID Access Requests upload CSV Format

        In this section, we will explain the BalkanID Access Requests CSV format.

        **Sample CSV 1**

        | <u> **requester** </u> | <u> **request_type** </u> | <u> **app** </u> | <u> **project** </u> | **reference** | **duration** |
        | --- | --- | --- | --- | --- | --- |
        | james@example.com | grant | James Q | james@example.com | Engineering | Software Engineer | Jason P | jason@balkan.id | aws | web-team | group | example | permanent | jira | EN-123456 |
        | mary@example.com | revoke | Mary K | mary@example.com | Engineering | Software Engineer | Jason P | jason@balkan.id | aws | core | group | example | permanent | jira | EN-123457 |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        NOTE: In this sample we are using AWS just as an example.

        ### Sample CSV 2

        | <u> **requester** </u> | <u> **request_type** </u> | <u> **app** </u> | <u> **project** </u> | **reference** | **duration** |
        | --- | --- | --- | --- | --- | --- |
        | elaine@example.com | grant | github | balkanid | patrick@example.com | 24h |
        | jacob@example.com | grant | github | project | jason@example.com | 720h |

        NOTE: In this sample we are using Github just as example.

        **Column Definitions**

        | Field | Example | Comment |
        | --- | --- | --- |
        | requester | mike@example.test | Email of the request originator. Must be a user of the system |
        | request_type | add / remove | Supports provisioning & de-provisioning |
        | employee | John Doe | Name of the employee the access is requested for, if other than requester |
        | employee_email | john@example.test | Email of the employee the access is requested for, if other than requester |
        | department | Engineering | Department where there employee the access is requested for works |
        | title | Software Engineer II | Job title of the employee the access is requested for |
        | manager | Mike Bloom | Name of the manager |
        | manager_email | mike@example.test | Email of the manager |
        | app | github | App the access is requested for |
        | connection | admins | Name of the connection the access is requested for |
        | connection_type | group | Type of connection the access is requested for |
        | project | balkanid | Project / environment the access is requested for |
        | resource | deployment | Name of the resource the access is requested for |
        | resource_type | repository | Type of the resource the access is requested for |
        | privilege_name | pull, s3:GetObject, access | Alphanumeric name of the privilege / also referred to as fine grained permissions in some applications |
        | privilege_value | true/false, true | Alphanumeric with the extracted permission. Recommended: true / false. |
        | username | mbloom123 | preferred username |
        | reference | Software Engineer II OR chris@example.test | Reference entitlements: - either an employee email or - a job title |
        | duration | 60m, permanent | How long is the access needed (in seconds, minutes, hours, etc). Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”. If one needs for 1 hour, then it will 1h or 60m. |
        | source | Jira | Source system |
        | source_id | D-12345 | Source system ID |

        NOTE: Any other extra columns will be stored as metadata in the request object

        Additional Details about processing:

        * If the file contains same employee several times for the same source\_id or source\_id empty, we will merge into a single request

        **Required Columns**

        requester, request_type, app, project are always required.

        One of reference or connection & connection_type are always required.

        If you provide connection or connection\_type column, the other one connection\_type or connection is required.

        If you provide resource or resource\_type column, the other one resource\_type or resource is required.

        All other columns are optional.

        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/requests.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Access Requests CSV format](#balkanid-access-requests-upload-csv-format).
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "requests/upload-url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_requests_download_url(self, *, include_completed: bool) -> DownloadUrlResponse:
        """
        ### BalkanID Access Requests download CSV Format

        In this section, we will explain the BalkanID Access Requests CSV format.

        **Sample CSV**

        | <u> Request ID </u>             | <u> Requester </u>           | <u> Username</u>  | <u> Work Email</u>       | Reference       | Duration | Expiration Date        | Provision Date | Source | Source ID                      | <u> Request Type</u>  |<u>  App </u>                         | Connection    | Connection Type | Resource | Resource Type | Privilege Name | Privilege Value |
        |------------------------|---------------------|----------|-----------------|-----------------|----------|------------------------|----------------|--------|--------------------------------|--------------|-----------------------------|---------------|-----------------|-----------|---------------|----------------|-----------------|
        | 01H9VNFTZD1T44TCSKGEBWNTZD | ayden@email.com | ayden    | james@email.com | sam@email.com  |          | 2023-09-22 18:30:00    |                |        |                                | grant        | github/01H965ZRNQHAS2B8GKJA85X75D | Core Engineering | team            |           |               |                |                 |
        | 01H9VNFTZD1T44TCSKGEBWNTZD | ayden@email.com | ayden    | james@email.com | sam@email.com  |          | 2023-09-22 18:30:00    |                |        |                                | grant        | github/01H965ZRNQHAS2B8GKJA85X75D | engineering-all | team            |           |               |                |                 |
        | 01H9VNFTZD1T44TCSKGEBWNTZD | ayden@email.com | ayden    | james@email.com | sam@email.com  |          | 2023-09-22 18:30:00    |                |        |                                | grant        | github/01H965ZRNQHAS2B8GKJA85X75D | Test team      | team            |           |               |                |                 |
        | 01H9TT26TBD20AW5NGB3X5MFTP | ayden@email.com | ayden    | james@email.com |                 |          |                        |                |        |                                | grant        | aws/01GG223987S15JVJAR17GS3SQT  | customers      | group           |           |               |                |                 |
        | 01H9TT26TBD20AW5NGB3X5MFTP | ayden@email.com | ayden    | james@email.com |                 |          |                        |                |        |                                | revoke       | aws/01GG223987S15JVJAR17GS3SQT  | support        | group           |           |               |                |                 |
        | 01H9T8PDBF8MZ9WTFYG2622Q91 | sam@email.com   | sam      | ayden@email.com | james@email.com | 68m0s    |                        |                |        |                                | revoke       | google                        |               |                 |           |               |                |                 |
        | 01H9TTPDBF8MZ9WTFYG2322H91 | sam@email.com   | sam      | james@email.com | ayden@email.com | 45m0s    |                        |                |        |                                | grant        | google                        |               |                 |           |               |                |                 |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | Column Name         | Column Description                                                                                                      |
        |---------------------|-------------------------------------------------------------------------------------------------------------------------|
        | Request ID          | *Required -* This is a unique request ID for each request generated by the BalkanID processing engine and serves as an identifier. |
        | Requester           | *Required -* Email of the request originator.                                                                         |
        | Username            | *Required -* Full name of the request originator.                                                                      |
        | Work Email          | *Required -* Email of the employee the access is requested for, if other than the requester.                        |
        | Reference           | *Optional,* Reference entitlements: contains employee email.                                                             |
        | Duration            | *Optional,* How long is the access needed (in seconds, minutes, hours, etc). Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”. If one needs it for 1 hour, then it will be 1h or 60m. |
        | Expiration Date     | *Optional,* Expiration Date of the access request.                                                                      |
        | Provision Date      | *Optional,* Provision Date of the access request.                                                                       |
        | Source              | *Optional,* Source system.                                                                                              |
        | Source ID           | *Optional,* Source system ID.                                                                                           |
        | Request Type        | *Required -* Contains whether the request is for "grant" (provisioning) or "revoke" (deprovisioning) of a resource. |
        | App                 | *Required -* App the access is requested for.                                                                         |
        | Connection          | *Optional, *Required if Connection Type is present* -* Name of the connection the access is requested for.         |
        | Connection Type     | *Optional, *Required if Connection is present* -* Type of connection the access is requested for.                  |
        | Resource            | *Optional, *Required if Resource Type is present* -* Name of the resource the access is requested for.                |
        | Resource Type       | *Optional, *Required if Resource is present* -* Type of the resource the access is requested for.                    |
        | Privilege Name      | *Optional, *Required if Privilege Value is present* -* Alphanumeric name of the privilege, also referred to as fine-grained permissions in some applications. |
        | Privilege Value     | *Optional, *Required if Privilege Name is present* -* Alphanumeric with the extracted permission, either "true" or "false". |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Access Requests CSV format](#balkanid-access-requests-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.

        Parameters:
            - include_completed: bool. Include completed requests in the download.

        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "requests/download-url"),
            json=jsonable_encoder({"includeCompleted": include_completed}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_campaigns_upload_url(self) -> UploadUrlResponse:
        """
        ### BalkanID Campaigns upload CSV Format

        In this section, we will explain the BalkanID Campaigns CSV format.

        **Sample CSV**

        | <u>Name  </u>       | Description         | <u>Start Date  <u/>                 | <u>End Date </u>                    | <u>Is Draft</u> |
        | ------------ | ------------------- | ---------------------------- | ---------------------------- | -------- |
        | CSV campaign 1 | This is campaign 1 | 2023-12-03T09:00:00-05:00    | 2023-12-04T18:00:00-05:00    | TRUE     |
        | CSV campaign 2 | This is campaign 2 | 2023-12-03T09:00:00+05:30    | 2023-12-04T18:00:00+05:30    | TRUE     |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | Column name    | Column Description                               |
        | ---------------| -------------------------------------------------|
        | Name           | *Required* - Name of the campaign                  |
        | Description    | *Optional* - Description of the campaign         |
        | Start Date     | *Required* - Date and time of starting the campaign with timezone |
        | End Date       | *Required* - Date and time of ending the campaign with timezone   |
        | Is Draft       | *Required* - Whether the campaign is a draft or not |


        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/campaigns.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Campaigns CSV format](#balkanid-campaigns-upload-csv-format).
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "campaigns/upload-url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_campaigns_download_url(self, *, include_completed: bool, include_draft: bool) -> DownloadUrlResponse:
        """
        ### BalkanID Campaigns download CSV Format

        In this section, we will explain the BalkanID Campaigns CSV format.

        **Sample CSV**

        | <u> ID </u>                   | <u> Name </u>                 | Description                  | <u> Status </u>   | <u> Start Date </u> | <u> End Date </u>   | <u> Percentage Completed </u> |
        | ----------------------------- | --------------------- | ---------------------------- | --------- | ---------- | ---------- | -------------------- |
        | 01HA02WD9PGPJA5FV4CNGYGGNM   | Test campaign 3       | Some random campaign         | draft     | 2023-09-06 | 2023-09-20 | 0.00                 |
        | 01HA02TFB8JBSF2BWBJBWVP696   | Test Campaign 2       | This is a campaign description | completed | 2023-09-06 | 2023-09-22 | 100.00               |
        | 01HA02R3KH676CD9XHZAY8SCDZ   | Test campaign          | This is a test campaign      | pending   | 2023-09-07 | 2023-09-26 | 35.24                |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | Column name      | Column Description                               |
        | -----------------| -------------------------------------------------|
        | ID               | *Required* - This is a unique campaign ID for each campaign generated by the BalkanID processing engine and serves as an identifier for each campaign |
        | Name             | *Required* - This is the name of the campaign       |
        | Description      | *Optional* - This is the description of the campaign |
        | Status           | *Required* - The can be pending, draft, etc. depending on the status |
        | Start Date       | *Required* - The start date of the campaign - The date is in the YYYY-MM-DD format |
        | End Date         | *Required* - The end date of the campaign - The date is in the YYYY-MM-DD format |
        | Percentage Completed | *Required* - Percentage of reviews completed which belongs to that campaign |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Campaigns CSV format](#balkanid-campaigns-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.

        Parameters:
            - include_completed: bool. Include completed campaigns in the download.

            - include_draft: bool. Include draft campaigns in the download.

        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "campaigns/download-url"),
            json=jsonable_encoder({"includeCompleted": include_completed, "includeDraft": include_draft}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncBalkanID:
    def __init__(self, *, base_url: str, api_key: str, timeout: typing.Optional[float] = 60):
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url, api_key=api_key, httpx_client=httpx.AsyncClient(timeout=timeout)
        )

    async def post_integrations_upload_url(self, *, integration_id: str) -> UploadUrlResponse:
        """
        ### BalkanID Entitlements upload CSV Format

        In this section, we will explain the BalkanID Entitlements CSV format.

        ### Sample CSV

        | **Project** | <u> **Privilege Name** </u> | <u> **Privilege Value** </u> | **Email** | **User ID** | **Username** | **Name** | **Connection** | **Connection Type** | **Resource** | **Resource Type** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | respository-role | ops | repository |
        | balkanid | push | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | respository-role | ops | repository |
        | balkanid | admin | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | respository-role | ops | repository |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | respository-role | ops | repository |
        | balkanid | push | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | respository-role | ops | repository |
        | balkanid | admin | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | respository-role | ops | repository |


        **NOTE**: Columns that are <u> underlined </u> are required always.

        NOTE: In this sample we are using Github example for familiarity. Please note that BalkanID offers a direct Github integration.

        **Column Definitions**

        | Column Name   |   Column Description  |
        | --- | --- |
        | Project | *Optional* \- This is a “project”-level of organization in your application. This can be a Github organization, Slack organization, AWS account number, Azure directory, Google domain, Okta Site URL, etc. In the sample CSV, this is a Github organization “balkanid”. While optional, it is recommended that you provide Project value. If not provided, the Project value is set to “default”. |
        | Privilege Name | *Required* \- The name of the action/permission/entitlement. These are typically actions that can be taken on a resource. In the sample CSV, these are “pull”, “push”, and “admin”, which are actions associated with a repository. |
        | Privilege Value | *Required* \- In many cases, these will be “true”. In some cases, it is useful to model an explicit deny by including entitlements where Privilege Value is “false”. In the sample CSV, we see both “true” and “false” privilege values. |
        | Email | *One of Email, User ID, or Username required* \- The email associated with the identity to which this entitlement belongs to, if available. In the sample CSV, this is “ayden@example.com”. |
        | User ID | *One of Email, User ID, or Username required* \- Some applications have an ID that is separate from email or username. This is the place to include that ID. |
        | Username | *One of Email, User ID, or Username required* \- The username associated with the identity to which this entitlement belongs to. In the sample CSV, this is “koch71”. |
        | Name | *Optional* \- The name of the identity to which this entitlement belongs to, if available. This can be the name of a person, a service account, or other names. |
        | Connection | *Optional*, **required if Connection Type is present** \- Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Type | *Optional*, **required if Connection is present** \- Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Resource | *Optional*, **required if Resource Type is present** \- The resource this entitlement references. In the sample CSV, the resource is the “ops” repository. |
        | Resource Type | *Optional*, **required if Resource is present** \- A useful resource type that groups resources in your application. This can be a Github repository/organization/application, AWS service, a Slack channel, etc. In the sample CSV, the resource type is “repository”. |

        **Required Columns**

        Privilege Name and Privilege Value are always required.

        One of Email, User ID, or Username are required. You may provide one, two, or all three of Email, User ID, or Username.

        If you provide Connection or Connection Type column, the other one Connection Type or Connection is required.

        If you provide Resource or Resource Type column, the other one Resource Type or Resource is required.

        All other columns are optional.

        ### Restrictions

        When Email, User ID, and Username are provided together, instead of only one of them, they always have to correspond to the same triplet.

        For example, the following is valid because the triplet of Email, User ID, and Username is the same in both rows:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01234567 | koch71 |
        | ayden@example.com | 01234567 | koch71 |

        However, the following is not valid and will result in an error, because the same Email and User ID have two different Usernames associated with them:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01235467 | koch71 |
        | ayden@example.com | 01235467 | ayden71 |

        Similarly, the following is not valid and will result in an error, because the Username and User ID have two different Emails associated with them:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01235467 | koch71 |
        | ayden.koch@example.com | 01235467 | koch71 |

        Similarly, the following is not valid and will result in an error because the Username and Email have two different User IDs associated with them:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01235467 | koch71 |
        | ayden@example.com | 98765432 | koch71 |

        In summary, you only need to provide one of: Email, User ID, Username. If you provide more than one, the combination of Email, User ID, and or Username must be the same on every row they appear on.

        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/entitlements.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Entitlements CSV format](#balkanid-entitlements-upload-csv-format).

        Parameters:
            - integration_id: str. The integration ID to which the entitlements belong to.

        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "integrations/upload-url"),
            json=jsonable_encoder({"integrationID": integration_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_integrations_download_url(self, *, integration_id: str) -> DownloadUrlResponse:
        """
        ### BalkanID Entitlements download CSV Format

        In this section, we will explain the BalkanID Entitlements CSV format.

        ### Sample CSV

        | **Project** | **Privilege Name** | **Privilege Value** | **Email** | **User ID** | **Username** | **Name** | **Connection** | **Connection Type** | **Resource** | **Resource Type** | **Employee ID** | **Labels** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | repository-role | ops | repository |     |     |
        | balkanid | push | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | repository-role | ops | repository |     |     |
        | balkanid | admin | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | repository-role | ops | repository |     |     |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | repository-role | ops | repository |     |     |
        | balkanid | push | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | repository-role | ops | repository |     |     |
        | balkanid | admin | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | repository-role | ops | repository |     | \[{"source":"brn:bid:balkanid:::02GFREWAWDFR3RG264H6QWERT5:app:compute/privileged","version":"20220726","value":{"text":"Privileged"},"key":"entitlement/privileged"}\] |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        NOTE: In this sample we are using Github example for familiarity.

        **Column Definitions**

        | Column Name   |   Column Description  |
        | --- | --- |
        | Project | This is a “project”-level of organization in your application. This can be a Github organization, Slack organization, AWS account number, Azure directory, Google domain, Okta Site URL, etc. In the sample CSV, this is a Github organization “balkanid”. While optional, it is recommended that you provide Project value. If not provided, the Project value is set to “default”. |
        | Privilege Name | The name of the action/permission/entitlement. These are typically actions that can be taken on a resource. In the sample CSV, these are “pull”, “push”, and “admin”, which are actions associated with a repository. |
        | Privilege Value | In many cases, these will be “true”. In some cases, it is useful to model an explicit deny by including entitlements where Privilege Value is “false”. In the sample CSV, we see both “true” and “false” privilege values. |
        | Email | The email associated with the identity to which this entitlement belongs to, if available. In the sample CSV, this is “ayden@example.com”. |
        | User ID | Some applications have an ID that is separate from email or username. This is the place to include that ID. |
        | Username | The username associated with the identity to which this entitlement belongs to. In the sample CSV, this is “koch71”. |
        | Name | The name of the identity to which this entitlement belongs to, if available. This can be the name of a person, a service account, or other names. |
        | Connection | Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Type | Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Resource | The resource this entitlement references. In the sample CSV, the resource is the “ops” repository. |
        | Resource Type | A useful resource type that groups resources in your application. This can be a Github repository/organization/application, AWS service, a Slack channel, etc. In the sample CSV, the resource type is “repository”. |
        | Employee ID | ID of the Employee, if mapped |
        | Labels | Insights such as privileged, sod, outlier, over entitled. |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Entitlements CSV format](#balkanid-entitlements-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.

        Parameters:
            - integration_id: str. The integration ID to which the entitlements belong to.

        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "integrations/download-url"),
            json=jsonable_encoder({"integrationID": integration_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_employees_download_url(self) -> DownloadUrlResponse:
        """
        ### BalkanID Employees download CSV Format

        In this section, we will explain the BalkanID Employees CSV format.

        ### Sample CSV

        | **Employee ID** | **Full Name** | **First Name** | **Last Name** | <u> **Work Email** </u> | **Department** | **Title** | <u> **Start Date** </u> | **End Date** | **Employment Type** | **Manager** | **Manager Work Email** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | 1   | Ahmed Ali | Ahmed | Ali | aali@example.com | Sales | Sales Representative | 01/21/2021 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 2   | Maria Gomez | Maria | Gomez | mgomez@example.com | Marketing | Marketing Manager | 07/13/2020 |     | Part-time | Ahmed Ali | aali@example.com |
        | 3   | Xiaoyun Liu | Xiaoyun | Liu | xliu@example.com | IT  | IT Analyst | 01/01/2019 |     | Contractor | Maria Gomez | mgomez@example.com |
        | 4   | Fatimah Al-Saud | Fatimah | Al-Saud | fasaud@example.com | HR  | HR Coordinator | 05/20/2019 |     | Full-time | Ahmed Ali | aali@example.com |
        | 5   | Pierre Dupont | Pierre | Dupont | pdupont@example.com | Operations | Operations Manager | 08/15/2019 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 6   | Siti Fatimah | Siti | Fatimah | sfatimah@example.com | Finance | Financial Analyst | 10/31/2019 |     | Part-time | Ahmed Ali | aali@example.com |
        | 7   | Taro Yamada | Taro | Yamada | tyamada@example.com | Legal | Lawyer | 01/01/2020 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 8   | Nadezhda Ivanova | Nadezhda | Ivanova | nivanova@example.com | Engineering | Mechanical Engineer | 03/15/2020 |     | Contractor | Ahmed Ali | aali@example.com |
        | 9   | Muhammad Khan | Muhammad | Khan | mkhan@example.com | Customer | Service | 06/30/2020 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 10  | Sanjay Gupta | Sanjay | Gupta | sgupta@example.com | Research | Research Analyst | 09/15/2020 |     | Full-time | Ahmed Ali | aali@example.com |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        |  Column Name   |   Column Description  |
        | --- | --- |
        | Employee ID | *Optional* \- A unique identifier for the employee. This can be a number or a string. In the sample CSV, this is: 1, 2, 3, etc. |
        | Full Name | *One of Full Name, First Name, or Last Name required* \- The employee's full name. This is the recommended name field to use. In the sample CSV, this is: Ahmed Ali, Maria Gomez, etc. |
        | First Name | *One of Full Name, First Name, or Last Name required* \- The employee's first name. Using Full Name is recommended, but First Name can also be provided. In the sample CSV, this is: Ahmed, Maria, etc. |
        | Last Name | *One of Full Name, First Name, or Last Name required* \- The employee's last name. Using Full Name is recommended, but Last Name can also be provided. In the sample CSV, this is: Ali, Gomez, etc. |
        | Work Email | *Required* \- The work email of the employee. In the sample CSV, this is: aali@example.com, mgomez@example.com, etc. |
        | Department | *Optional* \- The employee's department. In the sample CSV, this is: Sales, Marketing, etc. |
        | Title | *Optional*\- The employee's job title. In the sample CSV, this is: Sales Representative, Marketing Manager, etc. |
        | Start Date | *Required* \- The employee's start date in MM/DD/YYYY format. In the sample CSV, this is: 01/21/2021, 07/13/2020, etc. |
        | End Date | *Optional* \- The employee's termination date, if any, in MM/DD/YYYY format. In the sample CSV, there are no End Dates listed, meaning everyone is still with the company. |
        | Employment Type | *Optional* \- The type of employment. In the sample CSV, this is: Full-time, Part-time, etc. |
        | Manager | *Optional* \- The full name of the employee's manager. In the sample CSV, this is: Maria Gomez, Ahmed Ali, etc. |
        | Manager Work Email | *Optional* \- The work email of the employee's manager. In the sample CSV, this is: mgomez@example.com, aali@example.com, etc. |

        **Required Columns**

        Work Email and Start Date are always required.

        One of Full Name, First Name, or Last Name are required. You may provide one, two, or all three of Full Name, First Name, or Last Name.

        All other columns are optional.

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Employees CSV format](#balkanid-employees-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "employees/download-url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_relations_employees_identities_upload_url(self) -> UploadUrlResponse:
        """
        ### BalkanID Relations upload CSV Format

        In this section, we will explain the BalkanID Relations CSV format.

        **Sample CSV**

        | <u> **Identity ID** </u> | <u> **Username** </u> | **Identity email** | <u> **Identity name** </u> | <u> **App ID** </u> | <u> **App Name** </u> | **App Description** | **Relation type** | **Employee email** | **Employee name** | **Employee department** | **Employee job title** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | id/U-ysy2l6niyJmThu_Z-9urozE8tQBAEmJhjZ4nVxphg | ses-smtp-user.20220203-154927 |     | ses-smtp-user.20220203-154927 | aws/01FX103897S15JVJAR17GS3SQT | Amazon Web Services |     | owns | sam@example.com |     |     |     |
        | id/xjyKMctjdu6l3iaJwo6OkvJ8BMtvFrmWEz4yIK5xrks | anrew.garfield |     | anrew.garfield | aws/01FX103897S15JVJAR17GS3SQC | Amazon Web Services |     |     |     |     |     |     |
        | id/YPvK3hg7UfMQTz5VdEb8HraIouOCr35BQxpYlVKrYdg | michael.keaton |     | michael.keaton | aws/01FX103897S15JVJAR17GS3SQC | Amazon Web Services |     |     |     |     |     |     |
        | email/0g3BUiakDZW63KtF3wajG85noCRZdlzVH9SKKVXMfT0 | james@example.com | james@example.com | James S | google/01H965ZRNQHAS2B8GKJA85X75C | Google |     |     |     |     |     |     |
        | email/0urU-a0COLlg3FIyI1pPAcmZM7d9zpmG8O2b3HAuirs | sam@example.com | sam@example.com | Sam L | google/01H965ZRNQHAS2B8GKJA85X75C | Google |     | is  | sam@example.com | Sam L | Engineering | Staff Engineer |
        | email/CUp7jz61_N5K2qctJNyKsSFy1pZSpDneEStYN89dImw | michael@example.com | michael@example.com | Michael K | google/01H965ZRNQHAS2B8GKJA85X75C | Google |     | is  | michael@example.com | Micheal K | Engineering | Head of Engineering |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        |  Column Name   |   Column Description  |
        | --- | --- |
        | Identity ID | *Required*, unique Identity ID |
        | Username | *Required*, username of the identity |
        | Identity email | *Optional*, Email of the Identity |
        | Identity name | *Required*, Name of the identity |
        | App ID | *Required*, Unique ID of the application |
        | App Name | *Required*, name of the application |
        | App Description | *Optional* |
        | Relation type | *Optional*, Type of relationship, currently support "IS", "OWNS" |
        | Employee email | *Optional*, the email of the employee according to the balkanid tenant |
        | Employee name | *Optional*, Name of the employee |
        | Employee department | *Optional*, Department of the employee |
        | Employee job title | *Optional*, Title of the employee |

        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/relations.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Relations CSV format](#balkanid-relations-upload-csv-format).
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", "relations_employees_identities/upload-url"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_relations_employees_identities_download_url(self) -> DownloadUrlResponse:
        """
        ### BalkanID Relations download CSV Format

        In this section, we will explain the BalkanID Relations CSV format.

        **Sample CSV**

        | <u> **Identity ID** </u> | <u> **Username** </u> | **Identity email** | <u> **Identity name** </u> | <u> **App ID** </u> | <u> **App Name** </u> | **App Description** | **Relation type** | **Employee email** | **Employee name** | **Employee department** | **Employee job title** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | id/U-ysy2l6niyJmThu_Z-9urozE8tQBAEmJhjZ4nVxphg | ses-smtp-user.20220203-154927 |     | ses-smtp-user.20220203-154927 | aws/01FX103897S15JVJAR17GS3SQT | Amazon Web Services |     | owns | sam@example.com |     |     |     |
        | id/xjyKMctjdu6l3iaJwo6OkvJ8BMtvFrmWEz4yIK5xrks | anrew.garfield |     | anrew.garfield | aws/01FX103897S15JVJAR17GS3SQC | Amazon Web Services |     |     |     |     |     |     |
        | id/YPvK3hg7UfMQTz5VdEb8HraIouOCr35BQxpYlVKrYdg | michael.keaton |     | michael.keaton | aws/01FX103897S15JVJAR17GS3SQC | Amazon Web Services |     |     |     |     |     |     |
        | email/0g3BUiakDZW63KtF3wajG85noCRZdlzVH9SKKVXMfT0 | james@example.com | james@example.com | James S | google/01H965ZRNQHAS2B8GKJA85X75C | Google |     |     |     |     |     |     |
        | email/0urU-a0COLlg3FIyI1pPAcmZM7d9zpmG8O2b3HAuirs | sam@example.com | sam@example.com | Sam L | google/01H965ZRNQHAS2B8GKJA85X75C | Google |     | is  | sam@example.com | Sam L | Engineering | Staff Engineer |
        | email/CUp7jz61_N5K2qctJNyKsSFy1pZSpDneEStYN89dImw | michael@example.com | michael@example.com | Michael K | google/01H965ZRNQHAS2B8GKJA85X75C | Google |     | is  | michael@example.com | Micheal K | Engineering | Head of Engineering |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        |  Column Name   |   Column Description  |
        | --- | --- |
        | Identity ID | *Required*, unique Identity ID |
        | Username | *Required*, username of the identity |
        | Identity email | *Optional*, Email of the Identity |
        | Identity name | *Required*, Name of the identity |
        | App ID | *Required*, Unique ID of the application |
        | App Name | *Required*, name of the application |
        | App Description | *Optional* |
        | Relation type | *Optional*, Type of relationship, currently support "IS", "OWNS" |
        | Employee email | *Optional*, the email of the employee according to the balkanid tenant |
        | Employee name | *Optional*, Name of the employee |
        | Employee department | *Optional*, Department of the employee |
        | Employee job title | *Optional*, Title of the employee |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Relations CSV format](#balkanid-relations-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", "relations_employees_identities/download-url"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_reviews_upload_url(self) -> UploadUrlResponse:
        """
        ### BalkanID Access Reviews upload CSV Format

        In this section, we will explain the BalkanID Access Reviews CSV format.

        **Sample CSV**

        This example contains example of both changing status of pre-existing review
        and creating a new review.

        |       ID        |       Identity ID     | Identity Name | Identity Email  | Identity Username |     Job Title     |   Department   | Manager | Employment Type  | Campaign Name | Request ID | Application ID | Application Name | Application Description | Connection | Connection Type | <u> Reviewer ID </u> | Created At  | Review Status | <u> Updated By </u> | <u> Updated At </u> |     Resource      | Resource Type | Permission Name | Permission Value |    Project    |
        |----------------|------------------------|---------------|-----------------|-------------------|------------------|----------------|---------|------------------|---------------|------------|----------------|--------------------|------------------------|------------|-----------------|------------|------------|--------------|------------|------------|------------------|---------------|----------------|-----------------|--------------|
        | 01HA02R3MHB80NZE27JVZTRM8B | finKM9KRb8xPz-A3w5OEw25XtImLTrxjKV5JE6gCMs4 |    Albert     | albert@example.com |       albert      | Co-founder, COO/CSO | Finance & Operations |  James  | Salaried, full-time | Test campaign |            | GA02R3MHB80NZE27JVZTRM8B |       Google      |                       |            | 2023-09-10 |    rejected   | sam@example.com | 2023-09-10 |  Test Resource  |   application  |  some permission  |       true       |  myGithubOrg |
        |                |                        |               |                 |                   |                    |                |         |                    | Test campaign |            |                  |       Github      |                       | Test Connection |      team      | james@example.com | 2023-09-10 |               | james@example.com | 2023-09-10 |    Test Resource  |   application  |  some permission  |       true       |  myGithubOrg |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | Column Name        | Column Description                                                                                                      |
        |--------------------|--------------------------------------------------------------------------------------------------------------------------|
        | ID                 | *Optional, required if doing a status change*: Contains the unique ID of the review.                                    |
        | Identity ID        | *Optional*, unique ID of the identity in the application.                                                                  |
        | Identity Name      | *Optional*, Name of the identity.                                                                                          |
        | Identity Email     | *Optional, required if creating a new review*: Email of the identity.                                                       |
        | Identity Username  | *Optional, required if creating a new review*: Username of the identity.                                                    |
        | Job Title          | *Optional*, The job title of identity, for which the access review needs to be done.                                      |
        | Department         | *Optional*, The department to which the identity belongs, for which the access review needs to be done.                 |
        | Manager            | *Optional*, The job title of identity, for which the access review needs to be done.                                      |
        | Employment Type    | *Optional*, Employment type of the identity, such as Full-Time, Salaried, Contractor, Intern, etc.                         |
        | Campaign Name      | *Optional, required if creating a new review under a campaign*: Name of the campaign (campaign must exist in tenant).   |
        | Request ID         | *Optional, required if creating a new review under an access request*: Unique ID of the request.                         |
        | Application ID     | *Optional, required if creating a new review*:                                                                           |
        | Application Name   | *Optional, required if creating a new review*: Name of the application for which review is created.                      |
        | Application Description | *Optional*, Description of the application.                                                                             |
        | Connection         | *Optional, required if Connection Type is present*: Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Type    | *Optional, required if Connection is present*: Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Reviewer ID        | *Required*, email of the reviewer.                                                                                       |
        | Created At         | *Optional*, creation date of the review.                                                                                  |
        | Review Status      | *Optional, required if changing status of a pre-existing review*: Allows `approved` for approving a review, `rejected` for rejecting a review, `delegated` for delegating/reassigning it to someone else. |
        | Updated By         | *Required*: Email of the user who changed status of review, must be the same email who was assigned the review.         |
        | Updated At         | *Required*, Date at which the review of updated or created, in the format YYYY-MM-DD.                                    |
        | Resource           | *Optional, required if creating a new review*: resource name.                                                             |
        | Resource Type      | *Optional, required if creating a new review*: resource type.                                                             |
        | Permission Name    | *Optional, required if creating a new review*: Name of the permission.                                                     |
        | Permission Value   | *Optional, required if creating a new review*: Takes true or false.                                                        |
        | Project            | *Optional*, Name of the project.                                                                                         |

        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/reviews.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Access Reviews CSV format](#balkanid-access-reviews-upload-csv-format).
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "reviews/upload-url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_reviews_download_url(
        self, *, filter: typing.Optional[ReviewDownloadUrlRequestFilter] = OMIT, include_activity_log: bool
    ) -> DownloadUrlResponse:
        """
        ### BalkanID Access Reviews download CSV Format

        In this section, we will explain the BalkanID Access Reviews CSV format.

        **Sample CSV**

        | <u> Access Review ID </u>                      | <u> Permission</u>  | <u> Permission Value </u> | Resource         | Resource Type | Identity ID                             | <u> Identity Type</u>  | Identity Email      | Identity Username | Identity Name | Employee Email    | Job Title | Department | Manager | Employment Type | <u> Campaign Name</u>  | <u> Application Name</u>  | Application Description                             | Connections   | Connection Types | <u> Reviewer</u>  | <u> Reviewer ID </u> | <u> Access Review Creation Date</u>  | Access Review Completion Date | <u> Review Status </u> | Activity Log                                                                                                                                                                                                                                                                      |
        |--------------------------------------|------------|-------------------|------------------|---------------|-----------------------------------------|--------------|----------------------|-------------------|---------------|-------------------|------------|------------|---------|-----------------|----------------|------------------|-----------------------------------------------------|---------------|------------------|-----------|------------|--------------------------|-----------------------------|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
        | 01H90W5FM2RY663D6AFNG9HEJ9           | owner      | TRUE              | Frontend Repo   | Repository    | 76yi-IQGt_K6apHfRslIOCs_bIn91x31Jaccv89pkc4 | employee     | john.doe@example.com | john.doe@example.com | John Doe      | john.doe@example.com | Engineer   | Engineering |         | Full time       | Campaign 1     | Github           | GitHub is a code hosting platform for version control and collaboration | read          | repository-role  | Jane Doe  | jane.doe@example.com | 2023-08-29               |                         | overdue       | [{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>john.doe@example.com</u>&nbsp;</font></a>","Actor Name":"John Doe","Activity Comment":"","Previous Status":"","Status":"created","Timestamp":"2023-08-29T14:46:36+00:00"},{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>jane.doe@example.com</u>&nbsp;</font></a>","Actor Name":"Jane Doe"Activity Comment":"","Previous Status":"created","Status":"started","Timestamp":"2023-08-29T14:46:36+00:00"}] |
        | 01H90W5FM2RY663D6AFP7DBEAB           | owner      | TRUE              | Backend Repo    | Repository    | 76yi-IQGt_K6apHfRslIOCs_bIn91x31Jaccv89pkc4 | employee     | john.doe@example.com | john.doe@example.com | John Doe      | john.doe@example.com | Engineer   | Engineering |         | Full time       | Campaign 1     | Github           | GitHub is a code hosting platform for version control and collaboration | write         | repository-role  | Jane Doe  | jane.doe@example.com | 2023-08-29               |                         | overdue       | [{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>john.doe@example.com</u></font></a><a href="mailto:dhruv.shah@balkan.id"><font>&nbsp;</font></a>","Actor Name":"John Doe","Activity Comment":"","Previous Status":"","Status":"created","Timestamp":"2023-08-29T14:46:36+00:00"},{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>jane.doe@example.com</u></font></a><a href="mailto:dhruv.shah@balkan.id"><font>&nbsp;</font></a>","Actor Name":"Jane Doe","Activity Comment":"","Previous Status":"created","Status":"started","Timestamp":"2023-08-29T14:46:36+00:00"}] |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | **Column Name**                | **Column Description**                                                                                                                                |
        |---------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|
        | Access Review ID                | *Required* - This is a unique access review ID for each entitlement generated by the BalkanID processing engine and serves as an identifier for each review as a part of a campaign. |
        | Permission                      | *Required* - The name of the action/permission/entitlement. These are typically actions that can be taken on a resource. In the sample CSV, these are “pull”, “push”, and “admin”, which are actions associated with a repository. |
        | Permission Value                | *Required* - In many cases, these will be “true”. In some cases, it is useful to model an explicit deny by including entitlements where Privilege Value is “false”. In the sample CSV, we see both “true” and “false” privilege values. |
        | Resource                        | *Optional*, *Required if Resource Type is Present* - The resource this entitlement references. In the sample CSV, the resource is the “ops” repository. |
        | Resource Type                   | *Optional*, *Required if Resource is Present* - A useful resource type that groups resources in your application. This can be a Github repository/organization/application, AWS service, a Slack channel, etc. In the sample CSV, the resource type is “repository”. |
        | Identity ID                     | Unique ID for each identity generated by the BalkanID entitlements processing engine. |
        | Identity Type                   | *Required* - The type of the identity. Can be any of employee, service account, or undefined. |
        | Identity Email                  | *One of Email, User ID, or Username* - The email associated with the identity to which this entitlement belongs to |
        | Identity Username               | *One of Email, User ID, or Username* - The username associated with the identity to which this entitlement belongs to |
        | Identity Name                   | *Optional* - The name of the identity to which this entitlement belongs to, if available. This can be the name of a person, a service account, or other names. |
        | Employee Email                  | *One of Email, User ID, or Username* - The email associated with the employee to which this entitlement belongs to |
        | Job Title                       | The job title of the identity, for which the access review needs to be done. |
        | Department                      | The department to which the identity belongs, for which the access review needs to be done. |
        | Manager                         | The job title of identity, for which the access review needs to be done. |
        | Employment Type                 | Employment type of the identity, such as Full-Time, Salaried, Contractor, Intern, etc. |
        | Campaign Name                   | *Required* - Name of the Campaign to which the reviews belong to. |
        | Application Name                | *Required* - The name of the application for which the entitlements need to be reviewed. |
        | Application Description         | *Optional* - The description of the application for which the entitlements need to be reviewed. |
        | Connections                     | *Optional*, *Required if Connection Type is Present* - Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Types                | *Optional*, *Required if Connection is Present* - Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Reviewer                        | *Required* - The name of the identity to which this review is assigned. This can be the name of a person or other names. |
        | Reviewer ID                     | *Required* - Email ID of the reviewer, the identity to which the review is assigned. |
        | Access Review Creation Date     | *Required* - The date on which the access review was created in YYYY-MM-DD format. |
        | Access Review Completion Date   | *Optional*, *Required if access review is completed is Present* - The date on which the access review was completed in YYYY-MM-DD format. |
        | Review Status                   | *Required* - This can be a complete, overdue, etc. depending on the status. |
        | Activity Log                    | *Optional* - List of actions performed on the entitlement. |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Access Reviews CSV format](#balkanid-access-reviews-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.

        Parameters:
            - filter: typing.Optional[ReviewDownloadUrlRequestFilter]. Filter by a campaign or a request. Only one filter can be applied at a time.

            - include_activity_log: bool. Include the activity log for each review.

        """
        _request: typing.Dict[str, typing.Any] = {"includeActivityLog": include_activity_log}
        if filter is not OMIT:
            _request["filter"] = filter
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "reviews/download-url"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_requests_upload_url(self) -> UploadUrlResponse:
        """
        ### BalkanID Access Requests upload CSV Format

        In this section, we will explain the BalkanID Access Requests CSV format.

        **Sample CSV 1**

        | <u> **requester** </u> | <u> **request_type** </u> | <u> **app** </u> | <u> **project** </u> | **reference** | **duration** |
        | --- | --- | --- | --- | --- | --- |
        | james@example.com | grant | James Q | james@example.com | Engineering | Software Engineer | Jason P | jason@balkan.id | aws | web-team | group | example | permanent | jira | EN-123456 |
        | mary@example.com | revoke | Mary K | mary@example.com | Engineering | Software Engineer | Jason P | jason@balkan.id | aws | core | group | example | permanent | jira | EN-123457 |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        NOTE: In this sample we are using AWS just as an example.

        ### Sample CSV 2

        | <u> **requester** </u> | <u> **request_type** </u> | <u> **app** </u> | <u> **project** </u> | **reference** | **duration** |
        | --- | --- | --- | --- | --- | --- |
        | elaine@example.com | grant | github | balkanid | patrick@example.com | 24h |
        | jacob@example.com | grant | github | project | jason@example.com | 720h |

        NOTE: In this sample we are using Github just as example.

        **Column Definitions**

        | Field | Example | Comment |
        | --- | --- | --- |
        | requester | mike@example.test | Email of the request originator. Must be a user of the system |
        | request_type | add / remove | Supports provisioning & de-provisioning |
        | employee | John Doe | Name of the employee the access is requested for, if other than requester |
        | employee_email | john@example.test | Email of the employee the access is requested for, if other than requester |
        | department | Engineering | Department where there employee the access is requested for works |
        | title | Software Engineer II | Job title of the employee the access is requested for |
        | manager | Mike Bloom | Name of the manager |
        | manager_email | mike@example.test | Email of the manager |
        | app | github | App the access is requested for |
        | connection | admins | Name of the connection the access is requested for |
        | connection_type | group | Type of connection the access is requested for |
        | project | balkanid | Project / environment the access is requested for |
        | resource | deployment | Name of the resource the access is requested for |
        | resource_type | repository | Type of the resource the access is requested for |
        | privilege_name | pull, s3:GetObject, access | Alphanumeric name of the privilege / also referred to as fine grained permissions in some applications |
        | privilege_value | true/false, true | Alphanumeric with the extracted permission. Recommended: true / false. |
        | username | mbloom123 | preferred username |
        | reference | Software Engineer II OR chris@example.test | Reference entitlements: - either an employee email or - a job title |
        | duration | 60m, permanent | How long is the access needed (in seconds, minutes, hours, etc). Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”. If one needs for 1 hour, then it will 1h or 60m. |
        | source | Jira | Source system |
        | source_id | D-12345 | Source system ID |

        NOTE: Any other extra columns will be stored as metadata in the request object

        Additional Details about processing:

        * If the file contains same employee several times for the same source\_id or source\_id empty, we will merge into a single request

        **Required Columns**

        requester, request_type, app, project are always required.

        One of reference or connection & connection_type are always required.

        If you provide connection or connection\_type column, the other one connection\_type or connection is required.

        If you provide resource or resource\_type column, the other one resource\_type or resource is required.

        All other columns are optional.

        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/requests.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Access Requests CSV format](#balkanid-access-requests-upload-csv-format).
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "requests/upload-url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_requests_download_url(self, *, include_completed: bool) -> DownloadUrlResponse:
        """
        ### BalkanID Access Requests download CSV Format

        In this section, we will explain the BalkanID Access Requests CSV format.

        **Sample CSV**

        | <u> Request ID </u>             | <u> Requester </u>           | <u> Username</u>  | <u> Work Email</u>       | Reference       | Duration | Expiration Date        | Provision Date | Source | Source ID                      | <u> Request Type</u>  |<u>  App </u>                         | Connection    | Connection Type | Resource | Resource Type | Privilege Name | Privilege Value |
        |------------------------|---------------------|----------|-----------------|-----------------|----------|------------------------|----------------|--------|--------------------------------|--------------|-----------------------------|---------------|-----------------|-----------|---------------|----------------|-----------------|
        | 01H9VNFTZD1T44TCSKGEBWNTZD | ayden@email.com | ayden    | james@email.com | sam@email.com  |          | 2023-09-22 18:30:00    |                |        |                                | grant        | github/01H965ZRNQHAS2B8GKJA85X75D | Core Engineering | team            |           |               |                |                 |
        | 01H9VNFTZD1T44TCSKGEBWNTZD | ayden@email.com | ayden    | james@email.com | sam@email.com  |          | 2023-09-22 18:30:00    |                |        |                                | grant        | github/01H965ZRNQHAS2B8GKJA85X75D | engineering-all | team            |           |               |                |                 |
        | 01H9VNFTZD1T44TCSKGEBWNTZD | ayden@email.com | ayden    | james@email.com | sam@email.com  |          | 2023-09-22 18:30:00    |                |        |                                | grant        | github/01H965ZRNQHAS2B8GKJA85X75D | Test team      | team            |           |               |                |                 |
        | 01H9TT26TBD20AW5NGB3X5MFTP | ayden@email.com | ayden    | james@email.com |                 |          |                        |                |        |                                | grant        | aws/01GG223987S15JVJAR17GS3SQT  | customers      | group           |           |               |                |                 |
        | 01H9TT26TBD20AW5NGB3X5MFTP | ayden@email.com | ayden    | james@email.com |                 |          |                        |                |        |                                | revoke       | aws/01GG223987S15JVJAR17GS3SQT  | support        | group           |           |               |                |                 |
        | 01H9T8PDBF8MZ9WTFYG2622Q91 | sam@email.com   | sam      | ayden@email.com | james@email.com | 68m0s    |                        |                |        |                                | revoke       | google                        |               |                 |           |               |                |                 |
        | 01H9TTPDBF8MZ9WTFYG2322H91 | sam@email.com   | sam      | james@email.com | ayden@email.com | 45m0s    |                        |                |        |                                | grant        | google                        |               |                 |           |               |                |                 |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | Column Name         | Column Description                                                                                                      |
        |---------------------|-------------------------------------------------------------------------------------------------------------------------|
        | Request ID          | *Required -* This is a unique request ID for each request generated by the BalkanID processing engine and serves as an identifier. |
        | Requester           | *Required -* Email of the request originator.                                                                         |
        | Username            | *Required -* Full name of the request originator.                                                                      |
        | Work Email          | *Required -* Email of the employee the access is requested for, if other than the requester.                        |
        | Reference           | *Optional,* Reference entitlements: contains employee email.                                                             |
        | Duration            | *Optional,* How long is the access needed (in seconds, minutes, hours, etc). Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”. If one needs it for 1 hour, then it will be 1h or 60m. |
        | Expiration Date     | *Optional,* Expiration Date of the access request.                                                                      |
        | Provision Date      | *Optional,* Provision Date of the access request.                                                                       |
        | Source              | *Optional,* Source system.                                                                                              |
        | Source ID           | *Optional,* Source system ID.                                                                                           |
        | Request Type        | *Required -* Contains whether the request is for "grant" (provisioning) or "revoke" (deprovisioning) of a resource. |
        | App                 | *Required -* App the access is requested for.                                                                         |
        | Connection          | *Optional, *Required if Connection Type is present* -* Name of the connection the access is requested for.         |
        | Connection Type     | *Optional, *Required if Connection is present* -* Type of connection the access is requested for.                  |
        | Resource            | *Optional, *Required if Resource Type is present* -* Name of the resource the access is requested for.                |
        | Resource Type       | *Optional, *Required if Resource is present* -* Type of the resource the access is requested for.                    |
        | Privilege Name      | *Optional, *Required if Privilege Value is present* -* Alphanumeric name of the privilege, also referred to as fine-grained permissions in some applications. |
        | Privilege Value     | *Optional, *Required if Privilege Name is present* -* Alphanumeric with the extracted permission, either "true" or "false". |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Access Requests CSV format](#balkanid-access-requests-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.

        Parameters:
            - include_completed: bool. Include completed requests in the download.

        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "requests/download-url"),
            json=jsonable_encoder({"includeCompleted": include_completed}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_campaigns_upload_url(self) -> UploadUrlResponse:
        """
        ### BalkanID Campaigns upload CSV Format

        In this section, we will explain the BalkanID Campaigns CSV format.

        **Sample CSV**

        | <u>Name  </u>       | Description         | <u>Start Date  <u/>                 | <u>End Date </u>                    | <u>Is Draft</u> |
        | ------------ | ------------------- | ---------------------------- | ---------------------------- | -------- |
        | CSV campaign 1 | This is campaign 1 | 2023-12-03T09:00:00-05:00    | 2023-12-04T18:00:00-05:00    | TRUE     |
        | CSV campaign 2 | This is campaign 2 | 2023-12-03T09:00:00+05:30    | 2023-12-04T18:00:00+05:30    | TRUE     |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | Column name    | Column Description                               |
        | ---------------| -------------------------------------------------|
        | Name           | *Required* - Name of the campaign                  |
        | Description    | *Optional* - Description of the campaign         |
        | Start Date     | *Required* - Date and time of starting the campaign with timezone |
        | End Date       | *Required* - Date and time of ending the campaign with timezone   |
        | Is Draft       | *Required* - Whether the campaign is a draft or not |


        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/campaigns.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Campaigns CSV format](#balkanid-campaigns-upload-csv-format).
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "campaigns/upload-url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_campaigns_download_url(self, *, include_completed: bool, include_draft: bool) -> DownloadUrlResponse:
        """
        ### BalkanID Campaigns download CSV Format

        In this section, we will explain the BalkanID Campaigns CSV format.

        **Sample CSV**

        | <u> ID </u>                   | <u> Name </u>                 | Description                  | <u> Status </u>   | <u> Start Date </u> | <u> End Date </u>   | <u> Percentage Completed </u> |
        | ----------------------------- | --------------------- | ---------------------------- | --------- | ---------- | ---------- | -------------------- |
        | 01HA02WD9PGPJA5FV4CNGYGGNM   | Test campaign 3       | Some random campaign         | draft     | 2023-09-06 | 2023-09-20 | 0.00                 |
        | 01HA02TFB8JBSF2BWBJBWVP696   | Test Campaign 2       | This is a campaign description | completed | 2023-09-06 | 2023-09-22 | 100.00               |
        | 01HA02R3KH676CD9XHZAY8SCDZ   | Test campaign          | This is a test campaign      | pending   | 2023-09-07 | 2023-09-26 | 35.24                |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | Column name      | Column Description                               |
        | -----------------| -------------------------------------------------|
        | ID               | *Required* - This is a unique campaign ID for each campaign generated by the BalkanID processing engine and serves as an identifier for each campaign |
        | Name             | *Required* - This is the name of the campaign       |
        | Description      | *Optional* - This is the description of the campaign |
        | Status           | *Required* - The can be pending, draft, etc. depending on the status |
        | Start Date       | *Required* - The start date of the campaign - The date is in the YYYY-MM-DD format |
        | End Date         | *Required* - The end date of the campaign - The date is in the YYYY-MM-DD format |
        | Percentage Completed | *Required* - Percentage of reviews completed which belongs to that campaign |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Campaigns CSV format](#balkanid-campaigns-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.

        Parameters:
            - include_completed: bool. Include completed campaigns in the download.

            - include_draft: bool. Include draft campaigns in the download.

        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "campaigns/download-url"),
            json=jsonable_encoder({"includeCompleted": include_completed, "includeDraft": include_draft}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
