# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ReviewDownloadUrlRequestFilterRequest(pydantic.BaseModel):
    """
    Filter by a request. Only one request can be applied at a time.
    """

    id: typing.Optional[str] = pydantic.Field(
        description=("The request ID. *Optional* if `source` and `sourceID` are provided.\n")
    )
    source: typing.Optional[str] = pydantic.Field(description=("The source system. *Optional* if `id` is provided.\n"))
    source_id: typing.Optional[str] = pydantic.Field(
        alias="sourceID", description=("The source system ID. *Optional* if `id` is provided.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
