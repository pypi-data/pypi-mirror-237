# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .review_download_url_request_filter_campaign import ReviewDownloadUrlRequestFilterCampaign
from .review_download_url_request_filter_request import ReviewDownloadUrlRequestFilterRequest

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ReviewDownloadUrlRequestFilter(pydantic.BaseModel):
    """
    Filter by a campaign or a request. Only one filter can be applied at a time.
    """

    campaign: typing.Optional[ReviewDownloadUrlRequestFilterCampaign] = pydantic.Field(
        description=("Filter by a campaign. Only one campaign can be applied at a time.\n")
    )
    request: typing.Optional[ReviewDownloadUrlRequestFilterRequest] = pydantic.Field(
        description=("Filter by a request. Only one request can be applied at a time.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
