# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...types.download_url_response import DownloadUrlResponse
from ...types.upload_url_response import UploadUrlResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class IntegrationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def upload(self, *, integration_id: str) -> UploadUrlResponse:
        """
        ### BalkanID Entitlements upload CSV Format

        In this section, we will explain the BalkanID Entitlements CSV format.

        ### Sample CSV

        | **Project** | <u> **Privilege Name** </u> | <u> **Privilege Value** </u> | **Email** | **User ID** | **Username** | **Name** | **Connection** | **Connection Type** | **Resource** | **Resource Type** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | respository-role | ops | repository |
        | balkanid | push | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | respository-role | ops | repository |
        | balkanid | admin | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | respository-role | ops | repository |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | respository-role | ops | repository |
        | balkanid | push | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | respository-role | ops | repository |
        | balkanid | admin | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | respository-role | ops | repository |


        **NOTE**: Columns that are <u> underlined </u> are required always.

        NOTE: In this sample we are using Github example for familiarity. Please note that BalkanID offers a direct Github integration.

        **Column Definitions**

        | Column Name   |   Column Description  |
        | --- | --- |
        | Project | *Optional* \- This is a “project”-level of organization in your application. This can be a Github organization, Slack organization, AWS account number, Azure directory, Google domain, Okta Site URL, etc. In the sample CSV, this is a Github organization “balkanid”. While optional, it is recommended that you provide Project value. If not provided, the Project value is set to “default”. |
        | Privilege Name | *Required* \- The name of the action/permission/entitlement. These are typically actions that can be taken on a resource. In the sample CSV, these are “pull”, “push”, and “admin”, which are actions associated with a repository. |
        | Privilege Value | *Required* \- In many cases, these will be “true”. In some cases, it is useful to model an explicit deny by including entitlements where Privilege Value is “false”. In the sample CSV, we see both “true” and “false” privilege values. |
        | Email | *One of Email, User ID, or Username required* \- The email associated with the identity to which this entitlement belongs to, if available. In the sample CSV, this is “ayden@example.com”. |
        | User ID | *One of Email, User ID, or Username required* \- Some applications have an ID that is separate from email or username. This is the place to include that ID. |
        | Username | *One of Email, User ID, or Username required* \- The username associated with the identity to which this entitlement belongs to. In the sample CSV, this is “koch71”. |
        | Name | *Optional* \- The name of the identity to which this entitlement belongs to, if available. This can be the name of a person, a service account, or other names. |
        | Connection | *Optional*, **required if Connection Type is present** \- Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Type | *Optional*, **required if Connection is present** \- Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Resource | *Optional*, **required if Resource Type is present** \- The resource this entitlement references. In the sample CSV, the resource is the “ops” repository. |
        | Resource Type | *Optional*, **required if Resource is present** \- A useful resource type that groups resources in your application. This can be a Github repository/organization/application, AWS service, a Slack channel, etc. In the sample CSV, the resource type is “repository”. |

        **Required Columns**

        Privilege Name and Privilege Value are always required.

        One of Email, User ID, or Username are required. You may provide one, two, or all three of Email, User ID, or Username.

        If you provide Connection or Connection Type column, the other one Connection Type or Connection is required.

        If you provide Resource or Resource Type column, the other one Resource Type or Resource is required.

        All other columns are optional.

        ### Restrictions

        When Email, User ID, and Username are provided together, instead of only one of them, they always have to correspond to the same triplet.

        For example, the following is valid because the triplet of Email, User ID, and Username is the same in both rows:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01234567 | koch71 |
        | ayden@example.com | 01234567 | koch71 |

        However, the following is not valid and will result in an error, because the same Email and User ID have two different Usernames associated with them:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01235467 | koch71 |
        | ayden@example.com | 01235467 | ayden71 |

        Similarly, the following is not valid and will result in an error, because the Username and User ID have two different Emails associated with them:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01235467 | koch71 |
        | ayden.koch@example.com | 01235467 | koch71 |

        Similarly, the following is not valid and will result in an error because the Username and Email have two different User IDs associated with them:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01235467 | koch71 |
        | ayden@example.com | 98765432 | koch71 |

        In summary, you only need to provide one of: Email, User ID, Username. If you provide more than one, the combination of Email, User ID, and or Username must be the same on every row they appear on.

        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/entitlements.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Entitlements CSV format](#balkanid-entitlements-upload-csv-format).

        Parameters:
            - integration_id: str. The integration ID to which the entitlements belong to.

        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/rest/v0/integrations/upload-url"),
            json=jsonable_encoder({"integrationID": integration_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def download(self, *, integration_id: str) -> DownloadUrlResponse:
        """
        ### BalkanID Entitlements download CSV Format

        In this section, we will explain the BalkanID Entitlements CSV format.

        ### Sample CSV

        | **Project** | **Privilege Name** | **Privilege Value** | **Email** | **User ID** | **Username** | **Name** | **Connection** | **Connection Type** | **Resource** | **Resource Type** | **Employee ID** | **Labels** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | repository-role | ops | repository |     |     |
        | balkanid | push | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | repository-role | ops | repository |     |     |
        | balkanid | admin | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | repository-role | ops | repository |     |     |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | repository-role | ops | repository |     |     |
        | balkanid | push | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | repository-role | ops | repository |     |     |
        | balkanid | admin | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | repository-role | ops | repository |     | \[{"source":"brn:bid:balkanid:::02GFREWAWDFR3RG264H6QWERT5:app:compute/privileged","version":"20220726","value":{"text":"Privileged"},"key":"entitlement/privileged"}\] |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        NOTE: In this sample we are using Github example for familiarity.

        **Column Definitions**

        | Column Name   |   Column Description  |
        | --- | --- |
        | Project | This is a “project”-level of organization in your application. This can be a Github organization, Slack organization, AWS account number, Azure directory, Google domain, Okta Site URL, etc. In the sample CSV, this is a Github organization “balkanid”. While optional, it is recommended that you provide Project value. If not provided, the Project value is set to “default”. |
        | Privilege Name | The name of the action/permission/entitlement. These are typically actions that can be taken on a resource. In the sample CSV, these are “pull”, “push”, and “admin”, which are actions associated with a repository. |
        | Privilege Value | In many cases, these will be “true”. In some cases, it is useful to model an explicit deny by including entitlements where Privilege Value is “false”. In the sample CSV, we see both “true” and “false” privilege values. |
        | Email | The email associated with the identity to which this entitlement belongs to, if available. In the sample CSV, this is “ayden@example.com”. |
        | User ID | Some applications have an ID that is separate from email or username. This is the place to include that ID. |
        | Username | The username associated with the identity to which this entitlement belongs to. In the sample CSV, this is “koch71”. |
        | Name | The name of the identity to which this entitlement belongs to, if available. This can be the name of a person, a service account, or other names. |
        | Connection | Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Type | Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Resource | The resource this entitlement references. In the sample CSV, the resource is the “ops” repository. |
        | Resource Type | A useful resource type that groups resources in your application. This can be a Github repository/organization/application, AWS service, a Slack channel, etc. In the sample CSV, the resource type is “repository”. |
        | Employee ID | ID of the Employee, if mapped |
        | Labels | Insights such as privileged, sod, outlier, over entitled. |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Entitlements CSV format](#balkanid-entitlements-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.

        Parameters:
            - integration_id: str. The integration ID to which the entitlements belong to.

        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/rest/v0/integrations/download-url"),
            json=jsonable_encoder({"integrationID": integration_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncIntegrationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def upload(self, *, integration_id: str) -> UploadUrlResponse:
        """
        ### BalkanID Entitlements upload CSV Format

        In this section, we will explain the BalkanID Entitlements CSV format.

        ### Sample CSV

        | **Project** | <u> **Privilege Name** </u> | <u> **Privilege Value** </u> | **Email** | **User ID** | **Username** | **Name** | **Connection** | **Connection Type** | **Resource** | **Resource Type** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | respository-role | ops | repository |
        | balkanid | push | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | respository-role | ops | repository |
        | balkanid | admin | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | respository-role | ops | repository |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | respository-role | ops | repository |
        | balkanid | push | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | respository-role | ops | repository |
        | balkanid | admin | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | respository-role | ops | repository |


        **NOTE**: Columns that are <u> underlined </u> are required always.

        NOTE: In this sample we are using Github example for familiarity. Please note that BalkanID offers a direct Github integration.

        **Column Definitions**

        | Column Name   |   Column Description  |
        | --- | --- |
        | Project | *Optional* \- This is a “project”-level of organization in your application. This can be a Github organization, Slack organization, AWS account number, Azure directory, Google domain, Okta Site URL, etc. In the sample CSV, this is a Github organization “balkanid”. While optional, it is recommended that you provide Project value. If not provided, the Project value is set to “default”. |
        | Privilege Name | *Required* \- The name of the action/permission/entitlement. These are typically actions that can be taken on a resource. In the sample CSV, these are “pull”, “push”, and “admin”, which are actions associated with a repository. |
        | Privilege Value | *Required* \- In many cases, these will be “true”. In some cases, it is useful to model an explicit deny by including entitlements where Privilege Value is “false”. In the sample CSV, we see both “true” and “false” privilege values. |
        | Email | *One of Email, User ID, or Username required* \- The email associated with the identity to which this entitlement belongs to, if available. In the sample CSV, this is “ayden@example.com”. |
        | User ID | *One of Email, User ID, or Username required* \- Some applications have an ID that is separate from email or username. This is the place to include that ID. |
        | Username | *One of Email, User ID, or Username required* \- The username associated with the identity to which this entitlement belongs to. In the sample CSV, this is “koch71”. |
        | Name | *Optional* \- The name of the identity to which this entitlement belongs to, if available. This can be the name of a person, a service account, or other names. |
        | Connection | *Optional*, **required if Connection Type is present** \- Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Type | *Optional*, **required if Connection is present** \- Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Resource | *Optional*, **required if Resource Type is present** \- The resource this entitlement references. In the sample CSV, the resource is the “ops” repository. |
        | Resource Type | *Optional*, **required if Resource is present** \- A useful resource type that groups resources in your application. This can be a Github repository/organization/application, AWS service, a Slack channel, etc. In the sample CSV, the resource type is “repository”. |

        **Required Columns**

        Privilege Name and Privilege Value are always required.

        One of Email, User ID, or Username are required. You may provide one, two, or all three of Email, User ID, or Username.

        If you provide Connection or Connection Type column, the other one Connection Type or Connection is required.

        If you provide Resource or Resource Type column, the other one Resource Type or Resource is required.

        All other columns are optional.

        ### Restrictions

        When Email, User ID, and Username are provided together, instead of only one of them, they always have to correspond to the same triplet.

        For example, the following is valid because the triplet of Email, User ID, and Username is the same in both rows:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01234567 | koch71 |
        | ayden@example.com | 01234567 | koch71 |

        However, the following is not valid and will result in an error, because the same Email and User ID have two different Usernames associated with them:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01235467 | koch71 |
        | ayden@example.com | 01235467 | ayden71 |

        Similarly, the following is not valid and will result in an error, because the Username and User ID have two different Emails associated with them:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01235467 | koch71 |
        | ayden.koch@example.com | 01235467 | koch71 |

        Similarly, the following is not valid and will result in an error because the Username and Email have two different User IDs associated with them:

        | **Email** | **User ID** | **Username** |
        | --- | --- | --- |
        | ayden@example.com | 01235467 | koch71 |
        | ayden@example.com | 98765432 | koch71 |

        In summary, you only need to provide one of: Email, User ID, Username. If you provide more than one, the combination of Email, User ID, and or Username must be the same on every row they appear on.

        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/entitlements.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Entitlements CSV format](#balkanid-entitlements-upload-csv-format).

        Parameters:
            - integration_id: str. The integration ID to which the entitlements belong to.

        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/rest/v0/integrations/upload-url"),
            json=jsonable_encoder({"integrationID": integration_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def download(self, *, integration_id: str) -> DownloadUrlResponse:
        """
        ### BalkanID Entitlements download CSV Format

        In this section, we will explain the BalkanID Entitlements CSV format.

        ### Sample CSV

        | **Project** | **Privilege Name** | **Privilege Value** | **Email** | **User ID** | **Username** | **Name** | **Connection** | **Connection Type** | **Resource** | **Resource Type** | **Employee ID** | **Labels** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | repository-role | ops | repository |     |     |
        | balkanid | push | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | repository-role | ops | repository |     |     |
        | balkanid | admin | false | ayden@example.com | 01234567 | koch71 | Ayden Koch | read | repository-role | ops | repository |     |     |
        | balkanid | pull | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | repository-role | ops | repository |     |     |
        | balkanid | push | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | repository-role | ops | repository |     |     |
        | balkanid | admin | true | ayden@example.com | 01234567 | koch71 | Ayden Koch | admin | repository-role | ops | repository |     | \[{"source":"brn:bid:balkanid:::02GFREWAWDFR3RG264H6QWERT5:app:compute/privileged","version":"20220726","value":{"text":"Privileged"},"key":"entitlement/privileged"}\] |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        NOTE: In this sample we are using Github example for familiarity.

        **Column Definitions**

        | Column Name   |   Column Description  |
        | --- | --- |
        | Project | This is a “project”-level of organization in your application. This can be a Github organization, Slack organization, AWS account number, Azure directory, Google domain, Okta Site URL, etc. In the sample CSV, this is a Github organization “balkanid”. While optional, it is recommended that you provide Project value. If not provided, the Project value is set to “default”. |
        | Privilege Name | The name of the action/permission/entitlement. These are typically actions that can be taken on a resource. In the sample CSV, these are “pull”, “push”, and “admin”, which are actions associated with a repository. |
        | Privilege Value | In many cases, these will be “true”. In some cases, it is useful to model an explicit deny by including entitlements where Privilege Value is “false”. In the sample CSV, we see both “true” and “false” privilege values. |
        | Email | The email associated with the identity to which this entitlement belongs to, if available. In the sample CSV, this is “ayden@example.com”. |
        | User ID | Some applications have an ID that is separate from email or username. This is the place to include that ID. |
        | Username | The username associated with the identity to which this entitlement belongs to. In the sample CSV, this is “koch71”. |
        | Name | The name of the identity to which this entitlement belongs to, if available. This can be the name of a person, a service account, or other names. |
        | Connection | Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Type | Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Resource | The resource this entitlement references. In the sample CSV, the resource is the “ops” repository. |
        | Resource Type | A useful resource type that groups resources in your application. This can be a Github repository/organization/application, AWS service, a Slack channel, etc. In the sample CSV, the resource type is “repository”. |
        | Employee ID | ID of the Employee, if mapped |
        | Labels | Insights such as privileged, sod, outlier, over entitled. |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Entitlements CSV format](#balkanid-entitlements-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.

        Parameters:
            - integration_id: str. The integration ID to which the entitlements belong to.

        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/rest/v0/integrations/download-url"),
            json=jsonable_encoder({"integrationID": integration_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
