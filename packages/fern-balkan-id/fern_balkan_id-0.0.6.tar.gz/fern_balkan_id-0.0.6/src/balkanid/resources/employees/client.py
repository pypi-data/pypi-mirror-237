# This file was auto-generated by Fern from our API Definition.

import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...types.download_url_response import DownloadUrlResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class EmployeesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def download(self) -> DownloadUrlResponse:
        """
        ### BalkanID Employees download CSV Format

        In this section, we will explain the BalkanID Employees CSV format.

        ### Sample CSV

        | **Employee ID** | **Full Name** | **First Name** | **Last Name** | <u> **Work Email** </u> | **Department** | **Title** | <u> **Start Date** </u> | **End Date** | **Employment Type** | **Manager** | **Manager Work Email** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | 1   | Ahmed Ali | Ahmed | Ali | aali@example.com | Sales | Sales Representative | 01/21/2021 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 2   | Maria Gomez | Maria | Gomez | mgomez@example.com | Marketing | Marketing Manager | 07/13/2020 |     | Part-time | Ahmed Ali | aali@example.com |
        | 3   | Xiaoyun Liu | Xiaoyun | Liu | xliu@example.com | IT  | IT Analyst | 01/01/2019 |     | Contractor | Maria Gomez | mgomez@example.com |
        | 4   | Fatimah Al-Saud | Fatimah | Al-Saud | fasaud@example.com | HR  | HR Coordinator | 05/20/2019 |     | Full-time | Ahmed Ali | aali@example.com |
        | 5   | Pierre Dupont | Pierre | Dupont | pdupont@example.com | Operations | Operations Manager | 08/15/2019 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 6   | Siti Fatimah | Siti | Fatimah | sfatimah@example.com | Finance | Financial Analyst | 10/31/2019 |     | Part-time | Ahmed Ali | aali@example.com |
        | 7   | Taro Yamada | Taro | Yamada | tyamada@example.com | Legal | Lawyer | 01/01/2020 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 8   | Nadezhda Ivanova | Nadezhda | Ivanova | nivanova@example.com | Engineering | Mechanical Engineer | 03/15/2020 |     | Contractor | Ahmed Ali | aali@example.com |
        | 9   | Muhammad Khan | Muhammad | Khan | mkhan@example.com | Customer | Service | 06/30/2020 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 10  | Sanjay Gupta | Sanjay | Gupta | sgupta@example.com | Research | Research Analyst | 09/15/2020 |     | Full-time | Ahmed Ali | aali@example.com |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        |  Column Name   |   Column Description  |
        | --- | --- |
        | Employee ID | *Optional* \- A unique identifier for the employee. This can be a number or a string. In the sample CSV, this is: 1, 2, 3, etc. |
        | Full Name | *One of Full Name, First Name, or Last Name required* \- The employee's full name. This is the recommended name field to use. In the sample CSV, this is: Ahmed Ali, Maria Gomez, etc. |
        | First Name | *One of Full Name, First Name, or Last Name required* \- The employee's first name. Using Full Name is recommended, but First Name can also be provided. In the sample CSV, this is: Ahmed, Maria, etc. |
        | Last Name | *One of Full Name, First Name, or Last Name required* \- The employee's last name. Using Full Name is recommended, but Last Name can also be provided. In the sample CSV, this is: Ali, Gomez, etc. |
        | Work Email | *Required* \- The work email of the employee. In the sample CSV, this is: aali@example.com, mgomez@example.com, etc. |
        | Department | *Optional* \- The employee's department. In the sample CSV, this is: Sales, Marketing, etc. |
        | Title | *Optional*\- The employee's job title. In the sample CSV, this is: Sales Representative, Marketing Manager, etc. |
        | Start Date | *Required* \- The employee's start date in MM/DD/YYYY format. In the sample CSV, this is: 01/21/2021, 07/13/2020, etc. |
        | End Date | *Optional* \- The employee's termination date, if any, in MM/DD/YYYY format. In the sample CSV, there are no End Dates listed, meaning everyone is still with the company. |
        | Employment Type | *Optional* \- The type of employment. In the sample CSV, this is: Full-time, Part-time, etc. |
        | Manager | *Optional* \- The full name of the employee's manager. In the sample CSV, this is: Maria Gomez, Ahmed Ali, etc. |
        | Manager Work Email | *Optional* \- The work email of the employee's manager. In the sample CSV, this is: mgomez@example.com, aali@example.com, etc. |

        **Required Columns**

        Work Email and Start Date are always required.

        One of Full Name, First Name, or Last Name are required. You may provide one, two, or all three of Full Name, First Name, or Last Name.

        All other columns are optional.

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Employees CSV format](#balkanid-employees-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/rest/v0/employees/download-url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncEmployeesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def download(self) -> DownloadUrlResponse:
        """
        ### BalkanID Employees download CSV Format

        In this section, we will explain the BalkanID Employees CSV format.

        ### Sample CSV

        | **Employee ID** | **Full Name** | **First Name** | **Last Name** | <u> **Work Email** </u> | **Department** | **Title** | <u> **Start Date** </u> | **End Date** | **Employment Type** | **Manager** | **Manager Work Email** |
        | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
        | 1   | Ahmed Ali | Ahmed | Ali | aali@example.com | Sales | Sales Representative | 01/21/2021 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 2   | Maria Gomez | Maria | Gomez | mgomez@example.com | Marketing | Marketing Manager | 07/13/2020 |     | Part-time | Ahmed Ali | aali@example.com |
        | 3   | Xiaoyun Liu | Xiaoyun | Liu | xliu@example.com | IT  | IT Analyst | 01/01/2019 |     | Contractor | Maria Gomez | mgomez@example.com |
        | 4   | Fatimah Al-Saud | Fatimah | Al-Saud | fasaud@example.com | HR  | HR Coordinator | 05/20/2019 |     | Full-time | Ahmed Ali | aali@example.com |
        | 5   | Pierre Dupont | Pierre | Dupont | pdupont@example.com | Operations | Operations Manager | 08/15/2019 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 6   | Siti Fatimah | Siti | Fatimah | sfatimah@example.com | Finance | Financial Analyst | 10/31/2019 |     | Part-time | Ahmed Ali | aali@example.com |
        | 7   | Taro Yamada | Taro | Yamada | tyamada@example.com | Legal | Lawyer | 01/01/2020 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 8   | Nadezhda Ivanova | Nadezhda | Ivanova | nivanova@example.com | Engineering | Mechanical Engineer | 03/15/2020 |     | Contractor | Ahmed Ali | aali@example.com |
        | 9   | Muhammad Khan | Muhammad | Khan | mkhan@example.com | Customer | Service | 06/30/2020 |     | Full-time | Maria Gomez | mgomez@example.com |
        | 10  | Sanjay Gupta | Sanjay | Gupta | sgupta@example.com | Research | Research Analyst | 09/15/2020 |     | Full-time | Ahmed Ali | aali@example.com |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        |  Column Name   |   Column Description  |
        | --- | --- |
        | Employee ID | *Optional* \- A unique identifier for the employee. This can be a number or a string. In the sample CSV, this is: 1, 2, 3, etc. |
        | Full Name | *One of Full Name, First Name, or Last Name required* \- The employee's full name. This is the recommended name field to use. In the sample CSV, this is: Ahmed Ali, Maria Gomez, etc. |
        | First Name | *One of Full Name, First Name, or Last Name required* \- The employee's first name. Using Full Name is recommended, but First Name can also be provided. In the sample CSV, this is: Ahmed, Maria, etc. |
        | Last Name | *One of Full Name, First Name, or Last Name required* \- The employee's last name. Using Full Name is recommended, but Last Name can also be provided. In the sample CSV, this is: Ali, Gomez, etc. |
        | Work Email | *Required* \- The work email of the employee. In the sample CSV, this is: aali@example.com, mgomez@example.com, etc. |
        | Department | *Optional* \- The employee's department. In the sample CSV, this is: Sales, Marketing, etc. |
        | Title | *Optional*\- The employee's job title. In the sample CSV, this is: Sales Representative, Marketing Manager, etc. |
        | Start Date | *Required* \- The employee's start date in MM/DD/YYYY format. In the sample CSV, this is: 01/21/2021, 07/13/2020, etc. |
        | End Date | *Optional* \- The employee's termination date, if any, in MM/DD/YYYY format. In the sample CSV, there are no End Dates listed, meaning everyone is still with the company. |
        | Employment Type | *Optional* \- The type of employment. In the sample CSV, this is: Full-time, Part-time, etc. |
        | Manager | *Optional* \- The full name of the employee's manager. In the sample CSV, this is: Maria Gomez, Ahmed Ali, etc. |
        | Manager Work Email | *Optional* \- The work email of the employee's manager. In the sample CSV, this is: mgomez@example.com, aali@example.com, etc. |

        **Required Columns**

        Work Email and Start Date are always required.

        One of Full Name, First Name, or Last Name are required. You may provide one, two, or all three of Full Name, First Name, or Last Name.

        All other columns are optional.

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Employees CSV format](#balkanid-employees-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/rest/v0/employees/download-url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
