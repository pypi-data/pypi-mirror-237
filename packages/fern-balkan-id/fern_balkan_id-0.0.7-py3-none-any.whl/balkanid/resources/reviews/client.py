# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...types.download_url_response import DownloadUrlResponse
from ...types.review_download_url_request_filter import ReviewDownloadUrlRequestFilter
from ...types.upload_url_response import UploadUrlResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ReviewsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def upload(self) -> UploadUrlResponse:
        """
        ### BalkanID Access Reviews upload CSV Format

        In this section, we will explain the BalkanID Access Reviews CSV format.

        **Sample CSV**

        This example contains example of both changing status of pre-existing review
        and creating a new review.

        |       ID        |       Identity ID     | Identity Name | Identity Email  | Identity Username |     Job Title     |   Department   | Manager | Employment Type  | Campaign Name | Request ID | Application ID | Application Name | Application Description | Connection | Connection Type | <u> Reviewer ID </u> | Created At  | Review Status | <u> Updated By </u> | <u> Updated At </u> |     Resource      | Resource Type | Permission Name | Permission Value |    Project    |
        |----------------|------------------------|---------------|-----------------|-------------------|------------------|----------------|---------|------------------|---------------|------------|----------------|--------------------|------------------------|------------|-----------------|------------|------------|--------------|------------|------------|------------------|---------------|----------------|-----------------|--------------|
        | 01HA02R3MHB80NZE27JVZTRM8B | finKM9KRb8xPz-A3w5OEw25XtImLTrxjKV5JE6gCMs4 |    Albert     | albert@example.com |       albert      | Co-founder, COO/CSO | Finance & Operations |  James  | Salaried, full-time | Test campaign |            | GA02R3MHB80NZE27JVZTRM8B |       Google      |                       |            | 2023-09-10 |    rejected   | sam@example.com | 2023-09-10 |  Test Resource  |   application  |  some permission  |       true       |  myGithubOrg |
        |                |                        |               |                 |                   |                    |                |         |                    | Test campaign |            |                  |       Github      |                       | Test Connection |      team      | james@example.com | 2023-09-10 |               | james@example.com | 2023-09-10 |    Test Resource  |   application  |  some permission  |       true       |  myGithubOrg |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | Column Name        | Column Description                                                                                                      |
        |--------------------|--------------------------------------------------------------------------------------------------------------------------|
        | ID                 | *Optional, required if doing a status change*: Contains the unique ID of the review.                                    |
        | Identity ID        | *Optional*, unique ID of the identity in the application.                                                                  |
        | Identity Name      | *Optional*, Name of the identity.                                                                                          |
        | Identity Email     | *Optional, required if creating a new review*: Email of the identity.                                                       |
        | Identity Username  | *Optional, required if creating a new review*: Username of the identity.                                                    |
        | Job Title          | *Optional*, The job title of identity, for which the access review needs to be done.                                      |
        | Department         | *Optional*, The department to which the identity belongs, for which the access review needs to be done.                 |
        | Manager            | *Optional*, The job title of identity, for which the access review needs to be done.                                      |
        | Employment Type    | *Optional*, Employment type of the identity, such as Full-Time, Salaried, Contractor, Intern, etc.                         |
        | Campaign Name      | *Optional, required if creating a new review under a campaign*: Name of the campaign (campaign must exist in tenant).   |
        | Request ID         | *Optional, required if creating a new review under an access request*: Unique ID of the request.                         |
        | Application ID     | *Optional, required if creating a new review*:                                                                           |
        | Application Name   | *Optional, required if creating a new review*: Name of the application for which review is created.                      |
        | Application Description | *Optional*, Description of the application.                                                                             |
        | Connection         | *Optional, required if Connection Type is present*: Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Type    | *Optional, required if Connection is present*: Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Reviewer ID        | *Required*, email of the reviewer.                                                                                       |
        | Created At         | *Optional*, creation date of the review.                                                                                  |
        | Review Status      | *Optional, required if changing status of a pre-existing review*: Allows `approved` for approving a review, `rejected` for rejecting a review, `delegated` for delegating/reassigning it to someone else. |
        | Updated By         | *Required*: Email of the user who changed status of review, must be the same email who was assigned the review.         |
        | Updated At         | *Required*, Date at which the review of updated or created, in the format YYYY-MM-DD.                                    |
        | Resource           | *Optional, required if creating a new review*: resource name.                                                             |
        | Resource Type      | *Optional, required if creating a new review*: resource type.                                                             |
        | Permission Name    | *Optional, required if creating a new review*: Name of the permission.                                                     |
        | Permission Value   | *Optional, required if creating a new review*: Takes true or false.                                                        |
        | Project            | *Optional*, Name of the project.                                                                                         |

        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/reviews.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Access Reviews CSV format](#balkanid-access-reviews-upload-csv-format).
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/rest/v0/reviews/upload-url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def download(
        self, *, filter: typing.Optional[ReviewDownloadUrlRequestFilter] = OMIT, include_activity_log: bool
    ) -> DownloadUrlResponse:
        """
        ### BalkanID Access Reviews download CSV Format

        In this section, we will explain the BalkanID Access Reviews CSV format.

        **Sample CSV**

        | <u> Access Review ID </u>                      | <u> Permission</u>  | <u> Permission Value </u> | Resource         | Resource Type | Identity ID                             | <u> Identity Type</u>  | Identity Email      | Identity Username | Identity Name | Employee Email    | Job Title | Department | Manager | Employment Type | <u> Campaign Name</u>  | <u> Application Name</u>  | Application Description                             | Connections   | Connection Types | <u> Reviewer</u>  | <u> Reviewer ID </u> | <u> Access Review Creation Date</u>  | Access Review Completion Date | <u> Review Status </u> | Activity Log                                                                                                                                                                                                                                                                      |
        |--------------------------------------|------------|-------------------|------------------|---------------|-----------------------------------------|--------------|----------------------|-------------------|---------------|-------------------|------------|------------|---------|-----------------|----------------|------------------|-----------------------------------------------------|---------------|------------------|-----------|------------|--------------------------|-----------------------------|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
        | 01H90W5FM2RY663D6AFNG9HEJ9           | owner      | TRUE              | Frontend Repo   | Repository    | 76yi-IQGt_K6apHfRslIOCs_bIn91x31Jaccv89pkc4 | employee     | john.doe@example.com | john.doe@example.com | John Doe      | john.doe@example.com | Engineer   | Engineering |         | Full time       | Campaign 1     | Github           | GitHub is a code hosting platform for version control and collaboration | read          | repository-role  | Jane Doe  | jane.doe@example.com | 2023-08-29               |                         | overdue       | [{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>john.doe@example.com</u>&nbsp;</font></a>","Actor Name":"John Doe","Activity Comment":"","Previous Status":"","Status":"created","Timestamp":"2023-08-29T14:46:36+00:00"},{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>jane.doe@example.com</u>&nbsp;</font></a>","Actor Name":"Jane Doe"Activity Comment":"","Previous Status":"created","Status":"started","Timestamp":"2023-08-29T14:46:36+00:00"}] |
        | 01H90W5FM2RY663D6AFP7DBEAB           | owner      | TRUE              | Backend Repo    | Repository    | 76yi-IQGt_K6apHfRslIOCs_bIn91x31Jaccv89pkc4 | employee     | john.doe@example.com | john.doe@example.com | John Doe      | john.doe@example.com | Engineer   | Engineering |         | Full time       | Campaign 1     | Github           | GitHub is a code hosting platform for version control and collaboration | write         | repository-role  | Jane Doe  | jane.doe@example.com | 2023-08-29               |                         | overdue       | [{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>john.doe@example.com</u></font></a><a href="mailto:dhruv.shah@balkan.id"><font>&nbsp;</font></a>","Actor Name":"John Doe","Activity Comment":"","Previous Status":"","Status":"created","Timestamp":"2023-08-29T14:46:36+00:00"},{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>jane.doe@example.com</u></font></a><a href="mailto:dhruv.shah@balkan.id"><font>&nbsp;</font></a>","Actor Name":"Jane Doe","Activity Comment":"","Previous Status":"created","Status":"started","Timestamp":"2023-08-29T14:46:36+00:00"}] |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | **Column Name**                | **Column Description**                                                                                                                                |
        |---------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|
        | Access Review ID                | *Required* - This is a unique access review ID for each entitlement generated by the BalkanID processing engine and serves as an identifier for each review as a part of a campaign. |
        | Permission                      | *Required* - The name of the action/permission/entitlement. These are typically actions that can be taken on a resource. In the sample CSV, these are “pull”, “push”, and “admin”, which are actions associated with a repository. |
        | Permission Value                | *Required* - In many cases, these will be “true”. In some cases, it is useful to model an explicit deny by including entitlements where Privilege Value is “false”. In the sample CSV, we see both “true” and “false” privilege values. |
        | Resource                        | *Optional*, *Required if Resource Type is Present* - The resource this entitlement references. In the sample CSV, the resource is the “ops” repository. |
        | Resource Type                   | *Optional*, *Required if Resource is Present* - A useful resource type that groups resources in your application. This can be a Github repository/organization/application, AWS service, a Slack channel, etc. In the sample CSV, the resource type is “repository”. |
        | Identity ID                     | Unique ID for each identity generated by the BalkanID entitlements processing engine. |
        | Identity Type                   | *Required* - The type of the identity. Can be any of employee, service account, or undefined. |
        | Identity Email                  | *One of Email, User ID, or Username* - The email associated with the identity to which this entitlement belongs to |
        | Identity Username               | *One of Email, User ID, or Username* - The username associated with the identity to which this entitlement belongs to |
        | Identity Name                   | *Optional* - The name of the identity to which this entitlement belongs to, if available. This can be the name of a person, a service account, or other names. |
        | Employee Email                  | *One of Email, User ID, or Username* - The email associated with the employee to which this entitlement belongs to |
        | Job Title                       | The job title of the identity, for which the access review needs to be done. |
        | Department                      | The department to which the identity belongs, for which the access review needs to be done. |
        | Manager                         | The job title of identity, for which the access review needs to be done. |
        | Employment Type                 | Employment type of the identity, such as Full-Time, Salaried, Contractor, Intern, etc. |
        | Campaign Name                   | *Required* - Name of the Campaign to which the reviews belong to. |
        | Application Name                | *Required* - The name of the application for which the entitlements need to be reviewed. |
        | Application Description         | *Optional* - The description of the application for which the entitlements need to be reviewed. |
        | Connections                     | *Optional*, *Required if Connection Type is Present* - Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Types                | *Optional*, *Required if Connection is Present* - Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Reviewer                        | *Required* - The name of the identity to which this review is assigned. This can be the name of a person or other names. |
        | Reviewer ID                     | *Required* - Email ID of the reviewer, the identity to which the review is assigned. |
        | Access Review Creation Date     | *Required* - The date on which the access review was created in YYYY-MM-DD format. |
        | Access Review Completion Date   | *Optional*, *Required if access review is completed is Present* - The date on which the access review was completed in YYYY-MM-DD format. |
        | Review Status                   | *Required* - This can be a complete, overdue, etc. depending on the status. |
        | Activity Log                    | *Optional* - List of actions performed on the entitlement. |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Access Reviews CSV format](#balkanid-access-reviews-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.

        Parameters:
            - filter: typing.Optional[ReviewDownloadUrlRequestFilter]. Filter by a campaign or a request. Only one filter can be applied at a time.

            - include_activity_log: bool. Include the activity log for each review.

        """
        _request: typing.Dict[str, typing.Any] = {"includeActivityLog": include_activity_log}
        if filter is not OMIT:
            _request["filter"] = filter
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/rest/v0/reviews/download-url"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncReviewsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def upload(self) -> UploadUrlResponse:
        """
        ### BalkanID Access Reviews upload CSV Format

        In this section, we will explain the BalkanID Access Reviews CSV format.

        **Sample CSV**

        This example contains example of both changing status of pre-existing review
        and creating a new review.

        |       ID        |       Identity ID     | Identity Name | Identity Email  | Identity Username |     Job Title     |   Department   | Manager | Employment Type  | Campaign Name | Request ID | Application ID | Application Name | Application Description | Connection | Connection Type | <u> Reviewer ID </u> | Created At  | Review Status | <u> Updated By </u> | <u> Updated At </u> |     Resource      | Resource Type | Permission Name | Permission Value |    Project    |
        |----------------|------------------------|---------------|-----------------|-------------------|------------------|----------------|---------|------------------|---------------|------------|----------------|--------------------|------------------------|------------|-----------------|------------|------------|--------------|------------|------------|------------------|---------------|----------------|-----------------|--------------|
        | 01HA02R3MHB80NZE27JVZTRM8B | finKM9KRb8xPz-A3w5OEw25XtImLTrxjKV5JE6gCMs4 |    Albert     | albert@example.com |       albert      | Co-founder, COO/CSO | Finance & Operations |  James  | Salaried, full-time | Test campaign |            | GA02R3MHB80NZE27JVZTRM8B |       Google      |                       |            | 2023-09-10 |    rejected   | sam@example.com | 2023-09-10 |  Test Resource  |   application  |  some permission  |       true       |  myGithubOrg |
        |                |                        |               |                 |                   |                    |                |         |                    | Test campaign |            |                  |       Github      |                       | Test Connection |      team      | james@example.com | 2023-09-10 |               | james@example.com | 2023-09-10 |    Test Resource  |   application  |  some permission  |       true       |  myGithubOrg |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | Column Name        | Column Description                                                                                                      |
        |--------------------|--------------------------------------------------------------------------------------------------------------------------|
        | ID                 | *Optional, required if doing a status change*: Contains the unique ID of the review.                                    |
        | Identity ID        | *Optional*, unique ID of the identity in the application.                                                                  |
        | Identity Name      | *Optional*, Name of the identity.                                                                                          |
        | Identity Email     | *Optional, required if creating a new review*: Email of the identity.                                                       |
        | Identity Username  | *Optional, required if creating a new review*: Username of the identity.                                                    |
        | Job Title          | *Optional*, The job title of identity, for which the access review needs to be done.                                      |
        | Department         | *Optional*, The department to which the identity belongs, for which the access review needs to be done.                 |
        | Manager            | *Optional*, The job title of identity, for which the access review needs to be done.                                      |
        | Employment Type    | *Optional*, Employment type of the identity, such as Full-Time, Salaried, Contractor, Intern, etc.                         |
        | Campaign Name      | *Optional, required if creating a new review under a campaign*: Name of the campaign (campaign must exist in tenant).   |
        | Request ID         | *Optional, required if creating a new review under an access request*: Unique ID of the request.                         |
        | Application ID     | *Optional, required if creating a new review*:                                                                           |
        | Application Name   | *Optional, required if creating a new review*: Name of the application for which review is created.                      |
        | Application Description | *Optional*, Description of the application.                                                                             |
        | Connection         | *Optional, required if Connection Type is present*: Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Type    | *Optional, required if Connection is present*: Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Reviewer ID        | *Required*, email of the reviewer.                                                                                       |
        | Created At         | *Optional*, creation date of the review.                                                                                  |
        | Review Status      | *Optional, required if changing status of a pre-existing review*: Allows `approved` for approving a review, `rejected` for rejecting a review, `delegated` for delegating/reassigning it to someone else. |
        | Updated By         | *Required*: Email of the user who changed status of review, must be the same email who was assigned the review.         |
        | Updated At         | *Required*, Date at which the review of updated or created, in the format YYYY-MM-DD.                                    |
        | Resource           | *Optional, required if creating a new review*: resource name.                                                             |
        | Resource Type      | *Optional, required if creating a new review*: resource type.                                                             |
        | Permission Name    | *Optional, required if creating a new review*: Name of the permission.                                                     |
        | Permission Value   | *Optional, required if creating a new review*: Takes true or false.                                                        |
        | Project            | *Optional*, Name of the project.                                                                                         |

        ### Upload the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to upload the CSV in BalkanID Canonical CSV format to the pre-signed URL.
        Below is a summary of the request using `curl`:
        ```
        curl -X PUT <pre-signed url> --data-binary @./path/to/reviews.csv
        ```
        The request URL is the pre-signed URL from previous step.

        The request method is `PUT`.

        Required request body is the CSV in [BalkanID Access Reviews CSV format](#balkanid-access-reviews-upload-csv-format).
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/rest/v0/reviews/upload-url"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UploadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def download(
        self, *, filter: typing.Optional[ReviewDownloadUrlRequestFilter] = OMIT, include_activity_log: bool
    ) -> DownloadUrlResponse:
        """
        ### BalkanID Access Reviews download CSV Format

        In this section, we will explain the BalkanID Access Reviews CSV format.

        **Sample CSV**

        | <u> Access Review ID </u>                      | <u> Permission</u>  | <u> Permission Value </u> | Resource         | Resource Type | Identity ID                             | <u> Identity Type</u>  | Identity Email      | Identity Username | Identity Name | Employee Email    | Job Title | Department | Manager | Employment Type | <u> Campaign Name</u>  | <u> Application Name</u>  | Application Description                             | Connections   | Connection Types | <u> Reviewer</u>  | <u> Reviewer ID </u> | <u> Access Review Creation Date</u>  | Access Review Completion Date | <u> Review Status </u> | Activity Log                                                                                                                                                                                                                                                                      |
        |--------------------------------------|------------|-------------------|------------------|---------------|-----------------------------------------|--------------|----------------------|-------------------|---------------|-------------------|------------|------------|---------|-----------------|----------------|------------------|-----------------------------------------------------|---------------|------------------|-----------|------------|--------------------------|-----------------------------|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
        | 01H90W5FM2RY663D6AFNG9HEJ9           | owner      | TRUE              | Frontend Repo   | Repository    | 76yi-IQGt_K6apHfRslIOCs_bIn91x31Jaccv89pkc4 | employee     | john.doe@example.com | john.doe@example.com | John Doe      | john.doe@example.com | Engineer   | Engineering |         | Full time       | Campaign 1     | Github           | GitHub is a code hosting platform for version control and collaboration | read          | repository-role  | Jane Doe  | jane.doe@example.com | 2023-08-29               |                         | overdue       | [{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>john.doe@example.com</u>&nbsp;</font></a>","Actor Name":"John Doe","Activity Comment":"","Previous Status":"","Status":"created","Timestamp":"2023-08-29T14:46:36+00:00"},{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>jane.doe@example.com</u>&nbsp;</font></a>","Actor Name":"Jane Doe"Activity Comment":"","Previous Status":"created","Status":"started","Timestamp":"2023-08-29T14:46:36+00:00"}] |
        | 01H90W5FM2RY663D6AFP7DBEAB           | owner      | TRUE              | Backend Repo    | Repository    | 76yi-IQGt_K6apHfRslIOCs_bIn91x31Jaccv89pkc4 | employee     | john.doe@example.com | john.doe@example.com | John Doe      | john.doe@example.com | Engineer   | Engineering |         | Full time       | Campaign 1     | Github           | GitHub is a code hosting platform for version control and collaboration | write         | repository-role  | Jane Doe  | jane.doe@example.com | 2023-08-29               |                         | overdue       | [{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>john.doe@example.com</u></font></a><a href="mailto:dhruv.shah@balkan.id"><font>&nbsp;</font></a>","Actor Name":"John Doe","Activity Comment":"","Previous Status":"","Status":"created","Timestamp":"2023-08-29T14:46:36+00:00"},{"Actor ID":"<a href="mailto:dhruv.shah@balkan.id"><font><u>jane.doe@example.com</u></font></a><a href="mailto:dhruv.shah@balkan.id"><font>&nbsp;</font></a>","Actor Name":"Jane Doe","Activity Comment":"","Previous Status":"created","Status":"started","Timestamp":"2023-08-29T14:46:36+00:00"}] |

        **NOTE**: Columns that are <u> underlined </u> are required always.

        **Column Definitions**

        | **Column Name**                | **Column Description**                                                                                                                                |
        |---------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|
        | Access Review ID                | *Required* - This is a unique access review ID for each entitlement generated by the BalkanID processing engine and serves as an identifier for each review as a part of a campaign. |
        | Permission                      | *Required* - The name of the action/permission/entitlement. These are typically actions that can be taken on a resource. In the sample CSV, these are “pull”, “push”, and “admin”, which are actions associated with a repository. |
        | Permission Value                | *Required* - In many cases, these will be “true”. In some cases, it is useful to model an explicit deny by including entitlements where Privilege Value is “false”. In the sample CSV, we see both “true” and “false” privilege values. |
        | Resource                        | *Optional*, *Required if Resource Type is Present* - The resource this entitlement references. In the sample CSV, the resource is the “ops” repository. |
        | Resource Type                   | *Optional*, *Required if Resource is Present* - A useful resource type that groups resources in your application. This can be a Github repository/organization/application, AWS service, a Slack channel, etc. In the sample CSV, the resource type is “repository”. |
        | Identity ID                     | Unique ID for each identity generated by the BalkanID entitlements processing engine. |
        | Identity Type                   | *Required* - The type of the identity. Can be any of employee, service account, or undefined. |
        | Identity Email                  | *One of Email, User ID, or Username* - The email associated with the identity to which this entitlement belongs to |
        | Identity Username               | *One of Email, User ID, or Username* - The username associated with the identity to which this entitlement belongs to |
        | Identity Name                   | *Optional* - The name of the identity to which this entitlement belongs to, if available. This can be the name of a person, a service account, or other names. |
        | Employee Email                  | *One of Email, User ID, or Username* - The email associated with the employee to which this entitlement belongs to |
        | Job Title                       | The job title of the identity, for which the access review needs to be done. |
        | Department                      | The department to which the identity belongs, for which the access review needs to be done. |
        | Manager                         | The job title of identity, for which the access review needs to be done. |
        | Employment Type                 | Employment type of the identity, such as Full-Time, Salaried, Contractor, Intern, etc. |
        | Campaign Name                   | *Required* - Name of the Campaign to which the reviews belong to. |
        | Application Name                | *Required* - The name of the application for which the entitlements need to be reviewed. |
        | Application Description         | *Optional* - The description of the application for which the entitlements need to be reviewed. |
        | Connections                     | *Optional*, *Required if Connection Type is Present* - Connection describes how the identity (identified by the Username) gains the privilege (identified by Privilege Name and Privilege Value) to the resource (identified by Resource and Resource Type). In the sample CSV, the connection is the repository role granted to the identity: “read” and “admin”. |
        | Connection Types                | *Optional*, *Required if Connection is Present* - Connection Type describes the type of the Connection. Typical connection types are “role”, “policy”, “group”, but can include others depending on your application authorization structure. In the sample CSV, this is “repository-role”. |
        | Reviewer                        | *Required* - The name of the identity to which this review is assigned. This can be the name of a person or other names. |
        | Reviewer ID                     | *Required* - Email ID of the reviewer, the identity to which the review is assigned. |
        | Access Review Creation Date     | *Required* - The date on which the access review was created in YYYY-MM-DD format. |
        | Access Review Completion Date   | *Optional*, *Required if access review is completed is Present* - The date on which the access review was completed in YYYY-MM-DD format. |
        | Review Status                   | *Required* - This can be a complete, overdue, etc. depending on the status. |
        | Activity Log                    | *Optional* - List of actions performed on the entitlement. |

        ### Download the CSV file via the pre-signed URL
        After retrieving the pre-signed URL in the previous step, all that remains is to download the CSV in [BalkanID Access Reviews CSV format](#balkanid-access-reviews-download-csv-format) from the pre-signed URL.
        To use the polling URL, first send an HTTP request with the method `HEAD` to the `pollingUrl`.
        If the response status code is `404`, the file is not ready, and you should retry this polling request after a delay.
        If the response status code is `200`, the file is ready, and you may proceed to download the CSV from the received `url`.

        Parameters:
            - filter: typing.Optional[ReviewDownloadUrlRequestFilter]. Filter by a campaign or a request. Only one filter can be applied at a time.

            - include_activity_log: bool. Include the activity log for each review.

        """
        _request: typing.Dict[str, typing.Any] = {"includeActivityLog": include_activity_log}
        if filter is not OMIT:
            _request["filter"] = filter
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/rest/v0/reviews/download-url"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DownloadUrlResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
