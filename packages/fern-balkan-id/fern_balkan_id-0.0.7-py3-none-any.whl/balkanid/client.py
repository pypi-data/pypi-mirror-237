# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import BalkanIDEnvironment
from .resources.campaigns.client import AsyncCampaignsClient, CampaignsClient
from .resources.employees.client import AsyncEmployeesClient, EmployeesClient
from .resources.integrations.client import AsyncIntegrationsClient, IntegrationsClient
from .resources.relations.client import AsyncRelationsClient, RelationsClient
from .resources.requests.client import AsyncRequestsClient, RequestsClient
from .resources.reviews.client import AsyncReviewsClient, ReviewsClient


class BalkanID:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: BalkanIDEnvironment = BalkanIDEnvironment.PRODUCTION,
        x_api_key_id: str,
        api_key: str,
        timeout: typing.Optional[float] = 60
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            x_api_key_id=x_api_key_id,
            api_key=api_key,
            httpx_client=httpx.Client(timeout=timeout),
        )
        self.integrations = IntegrationsClient(client_wrapper=self._client_wrapper)
        self.employees = EmployeesClient(client_wrapper=self._client_wrapper)
        self.relations = RelationsClient(client_wrapper=self._client_wrapper)
        self.reviews = ReviewsClient(client_wrapper=self._client_wrapper)
        self.requests = RequestsClient(client_wrapper=self._client_wrapper)
        self.campaigns = CampaignsClient(client_wrapper=self._client_wrapper)


class AsyncBalkanID:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: BalkanIDEnvironment = BalkanIDEnvironment.PRODUCTION,
        x_api_key_id: str,
        api_key: str,
        timeout: typing.Optional[float] = 60
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            x_api_key_id=x_api_key_id,
            api_key=api_key,
            httpx_client=httpx.AsyncClient(timeout=timeout),
        )
        self.integrations = AsyncIntegrationsClient(client_wrapper=self._client_wrapper)
        self.employees = AsyncEmployeesClient(client_wrapper=self._client_wrapper)
        self.relations = AsyncRelationsClient(client_wrapper=self._client_wrapper)
        self.reviews = AsyncReviewsClient(client_wrapper=self._client_wrapper)
        self.requests = AsyncRequestsClient(client_wrapper=self._client_wrapper)
        self.campaigns = AsyncCampaignsClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: BalkanIDEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
