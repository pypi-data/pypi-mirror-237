# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_butil.ipynb.

# %% auto 0
__all__ = ['boolcall', 'echobool', 'ascall', 'callbool', 'asbool', 'tern2x', 'mapbool', 'mapbools', 'bmap', 'bany', 'ball']

# %% ../nbs/02_butil.ipynb 4
from typing import Any, overload

# %% ../nbs/02_butil.ipynb 5
from atyp import (BoolCall, BoolFunc, BoolCalls, Bools)
from nlit import ECHO, __PAIRWISE__, __INNER_OP__
from chck import isbool, iscall, isiter, isbtype, isbcall, isboolcall

from .futil import (hasvargs, haskwargs, islambda, lambdastr)

# %% ../nbs/02_butil.ipynb 7
def boolcall(b: Any = None) -> BoolCall:
    '''
    Normalizes a Boolean callable to either bool or Callable.
    
    Parameters
    ----------
    b : BoolCall, optional
        The value to normalize.
        
    Returns
    -------
    BoolCall
        The normalized value.
    '''
    return b if isboolcall(b) else bool

def echobool(b: bool) -> BoolFunc:
    '''
    Creates a function that echoes a given boolean value.
    
    Parameters
    ----------
    b : bool
        The boolean value to echo.
        
    Returns
    -------
    BoolFunc
        The function that echoes the given boolean value.
    '''
    assert isbool(b), 'b must be bool'
    func = lambda *args, **kwargs: b
    func.__name__ = f'{ECHO.capitalize()}{b}'
    return func

def ascall(b: BoolCall) -> BoolFunc:
    '''Normalizes a BoolCall to a BoolFunc.
    
    Parameters
    ----------
    b : BoolCall
        The value to normalize.
        
    Returns
    -------
    BoolFunc
        The normalized value.
    '''
    b = boolcall(b)
    return b if iscall(b) else echobool(b)


def callbool(v: Any, b: BoolFunc, *args, **kwargs) -> bool:
    '''Evaluates a boolean function with the given value and optional arguments.
    
    Parameters
    ----------
    v : Any
        The value to evaluate.
    b : BoolFunc
        The boolean function to use for the evaluation.
    args : tuple, optional
        Additional arguments to pass to the function.
    kwargs : dict, optional
        Additional keyword arguments to pass to the function.
        
    Returns
    -------
    bool
        The result of the evaluation.
    '''
    b = ascall(b)
    if hasvargs(b) and haskwargs(b): return b(v, *args, **kwargs)
    elif haskwargs(b): return b(v, **kwargs)
    elif hasvargs(b):  return b(v, *args)
    return b(v)

def asbool(v: Any, b: BoolCall, *args, **kwargs) -> bool:
    '''Evaluates a BoolCall with the given value and optional arguments.
    
    Parameters
    ----------
    v : Any
        The value to evaluate.
    b : BoolCall
        The boolean function or value to use for the evaluation.
    args : tuple, optional
        Additional arguments to pass to the function.
    kwargs : dict, optional
        Additional keyword arguments to pass to the function.
        
    Returns
    -------
    bool
        The result of the evaluation.
    '''
    return callbool(v, ascall(b), *args, **kwargs)

# %% ../nbs/02_butil.ipynb 8
def tern2x(
    val: Any, boola: BoolCall = None, boolb: BoolCall = None, 
    yesa: Any = None, yesb: Any = None, noab: Any = None
) -> bool:
    '''Apply ternary logic based on two boolean functions.
    
    Parameters
    ----------
    val : Any
        The value to evaluate.
    boola, boolb : BoolCall, optional
        Functions to apply to `val` to determine the outcome.
    yesa, yesb, noab : Any, optional
        Return values based on the outcomes of `boola` and `boolb`.

    Returns
    -------
    bool
        One of the return values (`yesa`, `yesb`, `noab`).

    Examples
    --------
    In python:
    ```python
    yesa if asbool(val, boola) else yesb if asbool(val, boolb) else noab
    ```
    In javascript:
    ```javascript
    boola(val) ? yesa : boolb(val) ? yesb : noab
    ```
    '''
    return yesa if asbool(val, boola) else yesb if asbool(val, boolb) else noab


# %% ../nbs/02_butil.ipynb 9
def mapbool(vals: list, b: BoolCall, *args, **kwargs) -> Bools:
    '''
    Maps a BoolCall over a list of values and returns a list of booleans.
    
    Parameters
    ----------
    vals : list
        List of values to be evaluated.
    b : BoolCall
        The boolean function or value to use for the evaluation.
    *args
        Additional arguments to pass to the function.
    **kwargs
        Additional keyword arguments to pass to the function.
        
    Returns
    -------
    Bools
        A list of boolean values resulting from the evaluations.
        e.g. list((bool(v1), bool(v2), ...))
    '''
    return list(asbool(v, b, *args, **kwargs) for v in vals)

def mapbools(vals: list, bools: BoolCalls, *args, **kwargs) -> Bools:
    '''
    Maps a list of BoolCalls over a list of values.
    
    Parameters
    ----------
    vals : list
        List of values to be evaluated.
    bools : BoolCalls
        A list of boolean functions or values to use for the evaluations.
    *args
        Additional arguments to pass to the function.
    **kwargs
        Additional keyword arguments to pass to the function.

    Returns
    -------
    Bools
        A list of boolean values resulting from the evaluations.        
    '''
    
    return list(asbool(v, b, *args, **kwargs) for v, b in zip(vals, bools))    

@overload
def bmap(vals: list, bools: BoolCalls, *args, **kwargs) -> Bools: ...
def bmap(vals: list, b: BoolCall, *args, **kwargs) -> Bools:
    '''
    Maps a BoolCall or a list of BoolCalls over a list of values.
    
    Parameters
    ----------
    vals : list
        List of values to be evaluated.
    b : Union[BoolCall, BoolCalls]
        The boolean function or list of boolean functions/values to use for the evaluation.
    *args
        Additional arguments to pass to the function.
    **kwargs
        Additional keyword arguments to pass to the function.

    Other Parameters
    ----------------
    __pairwise__ : bool, optional
        If `True`, the result will be a list of tuples of booleans
        e.g. `list((bool1(v1), bool2(v2), ...))`. 
        If `False`, however, the result will be a list of tuples of tuples of booleans
        e.g. `list((bool1(v1), bool1(v2), ...), (bool2(v1), bool2(v2), ...), ...)`
        
    Returns
    -------
    Bools
        A list of boolean values resulting from the evaluations.
    '''
    if isiter(b): 
        pw = kwargs.get(__PAIRWISE__, True)
        if pw and not len(vals) == len(b):
            raise ValueError('Length of vals must equal length of bools for pairwise mapping')
        if pw:
            return mapbools(vals, b, *args, **kwargs)        
        else:
            return list(mapbool(vals, bcur, *args, **kwargs) for bcur in b)
    return mapbool(vals, b, *args, **kwargs)

@overload
def bany(vals: list, bools: BoolCalls, *args, **kwargs) -> bool: ...
def bany(vals: Any, b: BoolCall, *args, **kwargs) -> bool:
    '''
    Checks if any value in the list evaluates to True using the given BoolCall or list of BoolCalls.
    
    Parameters
    ----------
    vals : list
        List of values to be evaluated.
    b : Union[BoolCall, BoolCalls]
        The boolean function or list of boolean functions/values to use for the evaluation.
    *args
        Additional arguments to pass to the function.
    **kwargs
        Additional keyword arguments to pass to the function.

    Other Parameters
    ----------------
    __pairwise__ : bool, optional
        If `True`, `any` will be run over list of tuples of booleans 
        e.g. `any(list((bool1(v1), bool2(v2), ...)))`. 
        If `False`, however, `any` will be applied to list of tuples of tuples of booleans
        e.g. 
        ```python
            any(list(
                    op(bool1(v1), bool1(v2), ...), 
                    op(bool2(v1), bool2(v2), ...)
            , ...))
        ```
        where `op` is defined by the `__inner_op__` keyword argument.

    __inner_op__ : Callable, default=any
        The function to apply to the tuples of booleans if `__pairwise__` is `False`.
        Defaults to `any`.
        
    Returns
    -------
    bool
        True if any value in the list evaluates to True, otherwise False.
    '''
    bools = bmap(vals, b, *args, **kwargs)
    if isiter(b):
        pw = kwargs.get(__PAIRWISE__, True)
        op = kwargs.get(__INNER_OP__, any)
        if pw: return any(bools)
        else: return any(op(bcur) for bcur in bools)
    return any(bools)

@overload
def ball(vals: list, bools: BoolCalls, *args, **kwargs) -> bool: ...
def ball(vals: list, b: BoolCall, *args, **kwargs) -> bool:
    '''
    Checks if all values in the list evaluate to True using the given BoolCall or list of BoolCalls.
    
    Parameters
    ----------
    vals : list
        List of values to be evaluated.
    b : Union[BoolCall, BoolCalls]
        The boolean function or list of boolean functions/values to use for the evaluation.
    *args
        Additional arguments to pass to the function.
    **kwargs
        Additional keyword arguments to pass to the function.

    Other Parameters
    ----------------
    __pairwise__ : bool, optional
        If `True`, `all` will be run over list of tuples of booleans 
        e.g. `any(list((bool1(v1), bool2(v2), ...)))`. 
        If `False`, however, `all` will be applied to list of tuples of tuples of booleans
        e.g. 
        ```python
            all(list(
                    op(bool1(v1), bool1(v2), ...), 
                    op(bool2(v1), bool2(v2), ...)
            , ...))
        ```
        where `op` is defined by the `__inner_op__` keyword argument.

    __inner_op__ : Callable, default=all
        The function to apply to the tuples of booleans if `__pairwise__` is `False`.
        Defaults to `any`.
        
    Returns
    -------
    bool
        True if all values in the list evaluate to True, otherwise False.
    '''
    bools = bmap(vals, b, *args, **kwargs)
    if isiter(b): 
        pw = kwargs.get(__PAIRWISE__, True)
        op = kwargs.get(__INNER_OP__, all)
        if pw: return all(bools)
        else: return all(op(bcur) for bcur in bools)
    return all(bools)
