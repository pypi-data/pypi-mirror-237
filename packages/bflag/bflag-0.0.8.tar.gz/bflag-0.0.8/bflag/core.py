# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_core.ipynb.

# %% auto 0
__all__ = ['bflag']

# %% ../nbs/03_core.ipynb 4
import inspect
from typing import Any, Callable, Optional, overload

from atyp import (BoolCall, BoolFunc, Bools, BoolCalls) 

# %% ../nbs/03_core.ipynb 5
from .futil import (islambda, lambdastr, getdefs)
from .butil import (boolcall, ascall, asbool, tern2x, bmap, bany, ball)

# %% ../nbs/03_core.ipynb 7
class bflag(Callable):
    '''
    A class for handling boolean flags with optional callable functionality.

    The `bflag` class aims to normalize, convert, and evaluate boolean functions or values.
    It provides class methods and instance methods to ensure that the boolean function or value
    passed is in an executable and normalized form.

    Attributes
    ----------
    bool : bool, optional
        The boolean value if the flag represents a simple boolean value.

    func : Callable
        The function representing the flag's behavior.

    clsname -> str
        Returns the name of the class.

    Methods
    -------    
    boolcall(b: BoolCall) -> BoolCall
        Normalizes a Boolean callable to either bool or Callable.

    ascall(b: BoolCall) -> BoolFunc
        Converts a BoolCall to BoolFunc.

    asbool(v: Any, b: BoolCall, *args, **kwargs) -> bool
        Evaluates a BoolCall with the given value and optional arguments.

    tern2x(
        val: Any, boola: BoolCall = None, boolb: BoolCall = None, 
        yesa: Any = None, yesb: Any = None, noab: Any = None
    ) -> bool
        Evaluate two boolean functions with ternary logic.

    __call__(val, *args, **kwargs) -> bool
        Makes the instance callable and returns a bool.

    
    bmap(vals: list, bools: BoolCalls, *args, **kwargs) -> bool
        Evaluates the bools over the provided values pairwise.

    bany(vals: list, bools: BoolCalls, *args, **kwargs) -> bool
        Evaluates whether any of the values satisfy the bools pairwise.

    ball(vals: list, bools: BoolCalls, *args, **kwargs) -> bool
        Evaluates if all of the values satisfy the bools pairwise.


    map(vals: list, *args, **kwargs) -> bool
        Evaluates self over the provided values.

    any(vals: list, *args, **kwargs) -> bool
        Evaluates whether any of the values satisfy the instance.

    all(vals: list, *args, **kwargs) -> bool
        Evaluates if all of the values satisfy the instance.
    


    Notes
    -----
    The pipeline of how `bflag` works is as follows:

    1. `boolcall(b: BoolCall) -> BoolCall`
        - Ensure that `b` is either an instance of a `bool` or a `Callable`.

    2. `ascall(b: BoolCall) -> BoolFunc`
        - Convert `b` to a `BoolFunc` i.e., a `Callable` that returns a `bool`.

    3. `callbool(v: Any, b: BoolCall, *args, **kwargs) -> bool`
        - Evaluate `b` with `v` and optional arguments.

    4. `asbool(v: Any, b: BoolCall, *args, **kwargs) -> bool`
        - Essentially an alias for `callbool` but with a more descriptive name
            and calls `ascall` on `b` to ensure that it is a `BoolFunc`.

    This means that `bflag` will ensure that `b` is a `BoolFunc` and then evaluate it with `v` and optional arguments.  

    Examples
    --------
    Create flags for positive, negative, and zero values:

    >>> posflag = bflag(lambda v: v > 0)
    >>> negflag = bflag(lambda v: v < 0)
    >>> zerflag = bflag(lambda v: v == 0)

    Evaluate flags:

    >>> posflag(1)
    True
    >>> posflag(-1)
    False

    >>> negflag(1)
    False
    >>> negflag(-1)
    True

    >>> zerflag(1)
    False
    >>> zerflag(0)
    True  
    '''

    @property
    def clsname(self) -> str: return type(self).__name__
    
    @classmethod
    def boolcall(cls, b: BoolCall = None) -> BoolCall:
        '''Class method to normalize a Boolean callable to either bool or Callable.
        
        Parameters
        ----------
        b : BoolCall, optional
            The value to normalize.
            
        Returns
        -------
        BoolCall
            The normalized value.
        '''
        return boolcall(b)
    
    @classmethod
    def ascall(cls, b: BoolCall = None) -> BoolFunc:
        '''Class method to convert a BoolCall to BoolFunc.
        
        Parameters
        ----------
        b : BoolCall, optional
            The value to convert.
            
        Returns
        -------
        BoolFunc
            The converted function.
        '''
        return ascall(b)
    
    @classmethod
    def asbool(cls, v: Any, b: BoolCall, *args, **kwargs) -> bool:
        '''Class method to evaluate a BoolCall with the given value and optional arguments.
        
        Parameters
        ----------
        v : Any
            The value to evaluate.
        b : BoolCall
            The boolean function or value to use for the evaluation.
        args : tuple, optional
            Additional arguments to pass to the function.
        kwargs : dict, optional
            Additional keyword arguments to pass to the function.
            
        Returns
        -------
        bool
            The result of the evaluation.
        '''        
        return asbool(v, b, *args, **kwargs)
    
    @classmethod
    def tern2x(cls,
        val: Any, boola: BoolCall = None, boolb: BoolCall = None, 
        yesa: Any = None, yesb: Any = None, noab: Any = None
    ) -> bool:
        '''Class method to apply ternary logic on two boolean functions.
        
        Parameters
        ----------
        val : Any
            The value to evaluate.
        boola, boolb : BoolCall, optional
            Functions to apply to `val` to determine the outcome.
        yesa, yesb, noab : Any, optional
            Return values based on the outcomes of `boola` and `boolb`.

        Returns
        -------
        bool
            One of the return values (`yesa`, `yesb`, `noab`).

        Examples
        --------
        In python:
        ```python
        yesa if asbool(val, boola) else yesb if asbool(val, boolb) else noab
        ```
        In javascript:
        ```javascript
        boola(val) ? yesa : boolb(val) ? yesb : noab
        ```
        '''
        return tern2x(val, boola, boolb, yesa, yesb, noab)
    
    @overload
    @classmethod
    def bmap(cls, vals: list, bools: BoolCalls = None, *args, **kwargs) -> Bools: ...
    @classmethod
    def bmap(cls, vals: list, b: BoolCall, *args, **kwargs) -> Bools:
        '''
        Maps a BoolCall or a list of BoolCalls over a list of values.
        
        Parameters
        ----------
        vals : list
            List of values to be evaluated.
        b : Union[BoolCall, BoolCalls]
            The boolean function or list of boolean functions/values to use for the evaluation.
        *args
            Additional arguments to pass to the function.
        **kwargs
            Additional keyword arguments to pass to the function.

        Other Parameters
        ----------------
        __pairwise__ : bool, optional
            If `True`, the result will be a list of tuples of booleans
            e.g. `list((bool1(v1), bool2(v2), ...))`. 
            If `False`, however, the result will be a list of tuples of tuples of booleans
            e.g. `list((bool1(v1), bool1(v2), ...), (bool2(v1), bool2(v2), ...), ...)`
            
        Returns
        -------
        Bools
            A list of boolean values resulting from the evaluations.
        '''
        return bmap(vals, b, *args, **kwargs)
    
    @overload
    @classmethod
    def bany(cls, vals: list, bools: BoolCalls = None, *args, **kwargs) -> bool: ...
    @classmethod
    def bany(cls, vals: list, b: BoolCall, *args, **kwargs) -> bool:
        '''
        Checks if any value in the list evaluates to True using the given BoolCall or list of BoolCalls.
        
        Parameters
        ----------
        vals : list
            List of values to be evaluated.
        b : Union[BoolCall, BoolCalls]
            The boolean function or list of boolean functions/values to use for the evaluation.
        *args
            Additional arguments to pass to the function.
        **kwargs
            Additional keyword arguments to pass to the function.

        Other Parameters
        ----------------
        __pairwise__ : bool, optional
            If `True`, `any` will be run over list of tuples of booleans 
            e.g. `any(list((bool1(v1), bool2(v2), ...)))`. 
            If `False`, however, `any` will be applied to list of tuples of tuples of booleans
            e.g. 
            ```python
                any(list(
                        op(bool1(v1), bool1(v2), ...), 
                        op(bool2(v1), bool2(v2), ...)
                , ...))
            ```
            where `op` is defined by the `__inner_op__` keyword argument.

        __inner_op__ : Callable, default=any
            The function to apply to the tuples of booleans if `__pairwise__` is `False`.
            Defaults to `any`.
            
        Returns
        -------
        bool
            True if any value in the list evaluates to True, otherwise False.
        '''
        return bany(vals, b, *args, **kwargs)
    
    @overload
    @classmethod
    def ball(cls, vals: list, bools: BoolCalls = None, *args, **kwargs) -> bool: ...
    @classmethod
    def ball(cls, vals: list, b: BoolCall, *args, **kwargs) -> bool:
        '''
        Checks if all values in the list evaluate to True using the given BoolCall or list of BoolCalls.
        
        Parameters
        ----------
        vals : list
            List of values to be evaluated.
        b : Union[BoolCall, BoolCalls]
            The boolean function or list of boolean functions/values to use for the evaluation.
        *args
            Additional arguments to pass to the function.
        **kwargs
            Additional keyword arguments to pass to the function.

        Other Parameters
        ----------------
        __pairwise__ : bool, optional
            If `True`, `all` will be run over list of tuples of booleans 
            e.g. `any(list((bool1(v1), bool2(v2), ...)))`. 
            If `False`, however, `all` will be applied to list of tuples of tuples of booleans
            e.g. 
            ```python
                all(list(
                        op(bool1(v1), bool1(v2), ...), 
                        op(bool2(v1), bool2(v2), ...)
                , ...))
            ```
            where `op` is defined by the `__inner_op__` keyword argument.

        __inner_op__ : Callable, default=all
            The function to apply to the tuples of booleans if `__pairwise__` is `False`.
            Defaults to `any`.
            
        Returns
        -------
        bool
            True if all values in the list evaluate to True, otherwise False.
        '''
        return ball(vals, b, *args, **kwargs)
    
    def map(self, vals: list, *args, **kwargs) -> Bools:
        '''
        Evaluates the instance function over the provided values.
        
        Parameters
        ----------
        vals : list
            List of values to be evaluated.
        *args
            Additional arguments to pass to the instance function.
        **kwargs
            Additional keyword arguments to pass to the instance function.

        Other Parameters
        ----------------
        __pairwise__ : bool, optional
            If `True`, `any` will be run over list of tuples of booleans 
            e.g. `any(list((bool1(v1), bool2(v2), ...)))`. 
            If `False`, however, `any` will be applied to list of tuples of tuples of booleans
            e.g. 
            ```python
                any(list(
                        op(bool1(v1), bool1(v2), ...), 
                        op(bool2(v1), bool2(v2), ...)
                , ...))
            ```
            where `op` is defined by the `__inner_op__` keyword argument.

        __inner_op__ : Callable, default=any
            The function to apply to the tuples of booleans if `__pairwise__` is `False`.
            Defaults to `any`.
        
        Returns
        -------
        Bools
            A list of boolean values resulting from the evaluations.
        '''
        return self.bmap(vals, self, *args, **kwargs)
    
    def all(self, vals: list, *args, **kwargs) -> bool:
        '''
        Checks if all values in the list evaluate to True using the given BoolCall or list of BoolCalls.
        
        Parameters
        ----------
        vals : list
            List of values to be evaluated.
        b : Union[BoolCall, BoolCalls]
            The boolean function or list of boolean functions/values to use for the evaluation.
        *args
            Additional arguments to pass to the function.
        **kwargs
            Additional keyword arguments to pass to the function.

        Other Parameters
        ----------------
        __pairwise__ : bool, optional
            If `True`, `all` will be run over list of tuples of booleans 
            e.g. `any(list((bool1(v1), bool2(v2), ...)))`. 
            If `False`, however, `all` will be applied to list of tuples of tuples of booleans
            e.g. 
            ```python
                all(list(
                        op(bool1(v1), bool1(v2), ...), 
                        op(bool2(v1), bool2(v2), ...)
                , ...))
            ```
            where `op` is defined by the `__inner_op__` keyword argument.

        __inner_op__ : Callable, default=all
            The function to apply to the tuples of booleans if `__pairwise__` is `False`.
            Defaults to `any`.
            
        Returns
        -------
        bool
            True if all values in the list evaluate to True, otherwise False.
        '''
        return self.ball(vals, self, *args, **kwargs)
    
    def any(self, vals: list, *args, **kwargs) -> bool:
        '''
        Checks if any value in the list evaluates to True using the given BoolCall or list of BoolCalls.
        
        Parameters
        ----------
        vals : list
            List of values to be evaluated.
        b : Union[BoolCall, BoolCalls]
            The boolean function or list of boolean functions/values to use for the evaluation.
        *args
            Additional arguments to pass to the function.
        **kwargs
            Additional keyword arguments to pass to the function.

        Other Parameters
        ----------------
        __pairwise__ : bool, optional
            If `True`, `any` will be run over list of tuples of booleans 
            e.g. `any(list((bool1(v1), bool2(v2), ...)))`. 
            If `False`, however, `any` will be applied to list of tuples of tuples of booleans
            e.g. 
            ```python
                any(list(
                        op(bool1(v1), bool1(v2), ...), 
                        op(bool2(v1), bool2(v2), ...)
                , ...))
            ```
            where `op` is defined by the `__inner_op__` keyword argument.

        __inner_op__ : Callable, default=any
            The function to apply to the tuples of booleans if `__pairwise__` is `False`.
            Defaults to `any`.
            
        Returns
        -------
        bool
            True if any value in the list evaluates to True, otherwise False.
        '''
        return self.bany(vals, self, *args, **kwargs)
    
    @property
    def sigstr(self) -> str:
        '''Gets the signature string of the function.'''
        if islambda(self.func): return lambdastr(self.func)
        return inspect.signature(self.func).__str__()

    @property
    def fncstr(self) -> str:
        '''Gets the function string which includes the name and the signature.'''
        fnname = self.func.__name__.replace('<lambda>', '')
        fncstr = f'{fnname}{self.sigstr}'
        return self.bool if self.bool is not None else fncstr
    
    def __new__(cls, b: BoolCall = None, name: Optional[str] = None, *args, **kwargs) -> 'bflag':        
        obj = super().__new__(cls)
        obj.bool = b if isinstance(b, bool) else None
        obj.func = ascall(b)
        obj.name = name if name is not None else obj.clsname
        obj.varg = tuple(*args)
        obj.kwds = kwargs.copy()
        return obj

    def getdefs(self, val, *args, **kwargs):
        '''Gets the default arguments of the function.'''
        return getdefs(self.func, self.varg, self.kwds, val, *args, **kwargs)

    def __call__(self, val, *args, **kwargs) -> bool:
        '''Converts `val` to a `bool` utilizing the flag function.'''
        varg, kwds = self.getdefs(val, *args, **kwargs)
        return self.asbool(val, self.func, *varg, **kwds)
    
    def __str__(self) -> str:
        return f'{self.name}({self.fncstr})'
    
    def __repr__(self) -> str:
        return str(self)
