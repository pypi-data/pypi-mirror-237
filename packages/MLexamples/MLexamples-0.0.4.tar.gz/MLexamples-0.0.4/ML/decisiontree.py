# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_DecisionTree.ipynb.

# %% auto 0
__all__ = ['path', 'name', 'df', 'inputs', 'target', 'le_company', 'le_job', 'le_degree', 'inputs_n', 'n_points', 'x', 'y', 'z',
           'fig', 'ax', 'scatter', 'cbar', 'model', 'FEATURE_NAMES', 'img']

# %% ../nbs/02_DecisionTree.ipynb 6
import pandas as pd
from fastai.vision.all import *

# %% ../nbs/02_DecisionTree.ipynb 7
path = Path('Data')
name = 'salaries.csv'

# %% ../nbs/02_DecisionTree.ipynb 8
df = pd.read_csv(path/name)
df.head()

# %% ../nbs/02_DecisionTree.ipynb 9
inputs = df.drop('salary_more_then_100k',axis='columns')

# %% ../nbs/02_DecisionTree.ipynb 10
target = df['salary_more_then_100k']

# %% ../nbs/02_DecisionTree.ipynb 11
from sklearn.preprocessing import LabelEncoder

# %% ../nbs/02_DecisionTree.ipynb 12
le_company = LabelEncoder()
le_job = LabelEncoder()
le_degree = LabelEncoder()

# %% ../nbs/02_DecisionTree.ipynb 13
inputs['company_n'] = le_company.fit_transform(inputs['company'])
inputs['job_n'] = le_job.fit_transform(inputs['job'])
inputs['degree_n'] = le_degree.fit_transform(inputs['degree'])

# %% ../nbs/02_DecisionTree.ipynb 14
inputs

# %% ../nbs/02_DecisionTree.ipynb 15
inputs_n = inputs.drop(['company','job','degree'],axis='columns')

# %% ../nbs/02_DecisionTree.ipynb 16
inputs_n

# %% ../nbs/02_DecisionTree.ipynb 17
import matplotlib.pyplot as plt
import numpy as np

# %% ../nbs/02_DecisionTree.ipynb 18
np.random.seed(42)
n_points = len(inputs_n)
x = np.random.rand(n_points)
y = np.random.rand(n_points)
z = np.random.rand(n_points)

# %% ../nbs/02_DecisionTree.ipynb 19
inputs_n['company_n'] += (x-0.5)/10
inputs_n['job_n'] += (y-0.5)/10
inputs_n['degree_n'] += (z-0.5)/10

# %% ../nbs/02_DecisionTree.ipynb 20
# Create a 3D scatter plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.set_xlabel('degree_n')
ax.set_ylabel('job_n')
ax.set_zlabel('company_n')

scatter = ax.scatter(inputs_n['degree_n'],
           inputs_n['job_n'],
           inputs_n['company_n'],
           c=target,
           cmap='viridis',
           marker='+')

# Adding a color bar to show the mapping of colors to values in 'color_column'
cbar = fig.colorbar(scatter, ax=ax)
cbar.set_label('Color Column')

# %% ../nbs/02_DecisionTree.ipynb 21
target

# %% ../nbs/02_DecisionTree.ipynb 22
from sklearn import tree

# %% ../nbs/02_DecisionTree.ipynb 23
model = tree.DecisionTreeClassifier()
model.fit(inputs_n, target)

# %% ../nbs/02_DecisionTree.ipynb 24
model.score(inputs_n,target)

# %% ../nbs/02_DecisionTree.ipynb 25
from sklearn.tree import export_graphviz

# %% ../nbs/02_DecisionTree.ipynb 26
FEATURE_NAMES = ['company_n', 'job_n', 'degree_n']
export_graphviz(model, './Data/salary.dot', feature_names = FEATURE_NAMES)

# %% ../nbs/02_DecisionTree.ipynb 28
import matplotlib.pyplot as plt
import cv2 as cv

# %% ../nbs/02_DecisionTree.ipynb 29
img = cv.imread('./Data/salary.png')
plt.figure(figsize = (20, 20))
plt.imshow(img)

# %% ../nbs/02_DecisionTree.ipynb 31
model.predict([[2,1,0]])

# %% ../nbs/02_DecisionTree.ipynb 32
model.predict([[2,1,1]])
