# Generated by ariadne-codegen on 2023-10-28 17:06
# Source: churros/queries.gql

from typing import Dict

from .async_base_client import AsyncBaseClient
from .group import Group
from .login import Login
from .logout import Logout
from .me import Me
from .user import User


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def me(self) -> Me:
        query = gql(
            """
            query me {
              me {
                id
                uid
                email
                otherEmails
                firstName
                lastName
                fullName
                major {
                  id
                  uid
                  name
                  shortName
                  schools {
                    id
                    uid
                    name
                  }
                }
                minor {
                  id
                  uid
                  name
                  shortName
                  majors {
                    id
                  }
                }
                graduationYear
                yearTier
                apprentice
                address
                birthday
                description
                nickname
                phone
                pictureFile
                links {
                  computedValue
                  name
                }
                godparent {
                  id
                  uid
                  firstName
                  lastName
                  nickname
                  fullName
                }
                cededImageRightsToTVn7
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return Me.model_validate(data)

    async def user(self, uid: str) -> User:
        query = gql(
            """
            query user($uid: String!) {
              user(uid: $uid) {
                id
                uid
                email
                otherEmails
                firstName
                lastName
                fullName
                major {
                  id
                  uid
                  name
                  shortName
                  schools {
                    id
                    uid
                    name
                  }
                }
                minor {
                  id
                  uid
                  name
                  shortName
                  majors {
                    id
                  }
                }
                graduationYear
                yearTier
                apprentice
                address
                birthday
                description
                nickname
                phone
                pictureFile
                links {
                  computedValue
                  name
                }
                godparent {
                  id
                  uid
                  firstName
                  lastName
                  nickname
                  fullName
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"uid": uid}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return User.model_validate(data)

    async def group(self, uid: str) -> Group:
        query = gql(
            """
            query group($uid: String!) {
              group(uid: $uid) {
                uid
                name
                pictureFile
                email
                description
                selfJoinable
                website
                color
                studentAssociation {
                  name
                  uid
                  school {
                    uid
                    name
                  }
                }
                parent {
                  uid
                  name
                }
                members {
                  title
                  president
                  vicePresident
                  treasurer
                  secretary
                  member {
                    uid
                    fullName
                    email
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"uid": uid}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return Group.model_validate(data)

    async def login(self, username: str, password: str) -> Login:
        query = gql(
            """
            mutation login($username: String!, $password: String!) {
              login(email: $username, password: $password) {
                __typename
                ... on MutationLoginSuccess {
                  data {
                    token
                  }
                }
                ... on Error {
                  message
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"username": username, "password": password}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return Login.model_validate(data)

    async def logout(self) -> Logout:
        query = gql(
            """
            mutation logout {
              logout
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return Logout.model_validate(data)
