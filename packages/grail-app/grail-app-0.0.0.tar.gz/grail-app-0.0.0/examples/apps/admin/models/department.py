"""Autogenerated SQLAlchemy models based on OpenAlchemy models."""
# pylint: disable=no-member,super-init-not-called,unused-argument

import typing

import sqlalchemy
from sqlalchemy import orm

from open_alchemy import models

Base = models.Base  # type: ignore


class DepartmentDict(typing.TypedDict, total=False):
    """TypedDict for properties that are not required."""

    id: int
    name: typing.Optional[str]
    employees: typing.Sequence["DepartmentDict"]


class TDepartment(typing.Protocol):
    """
    SQLAlchemy model protocol.

    A part of a company.

    Attrs:
        id: Unique identifier for the department.
        name: The name of the department.
        employees: The employees working in the department.

    """

    # SQLAlchemy properties
    __table__: sqlalchemy.Table
    __tablename__: str
    query: orm.Query

    # Model properties
    id: 'sqlalchemy.Column[int]'
    name: 'sqlalchemy.Column[typing.Optional[str]]'
    employees: 'sqlalchemy.Column[typing.Sequence["TDepartment"]]'

    def __init__(self, id: typing.Optional[int] = None, name: typing.Optional[str] = None, employees: typing.Optional[typing.Sequence["TDepartment"]] = None) -> None:
        """
        Construct.

        Args:
            id: Unique identifier for the department.
            name: The name of the department.
            employees: The employees working in the department.

        """
        ...

    @classmethod
    def from_dict(cls, id: typing.Optional[int] = None, name: typing.Optional[str] = None, employees: typing.Optional[typing.Sequence["DepartmentDict"]] = None) -> "TDepartment":
        """
        Construct from a dictionary (eg. a POST payload).

        Args:
            id: Unique identifier for the department.
            name: The name of the department.
            employees: The employees working in the department.

        Returns:
            Model instance based on the dictionary.

        """
        ...

    @classmethod
    def from_str(cls, value: str) -> "TDepartment":
        """
        Construct from a JSON string (eg. a POST payload).

        Returns:
            Model instance based on the JSON string.

        """
        ...

    def to_dict(self) -> DepartmentDict:
        """
        Convert to a dictionary (eg. to send back for a GET request).

        Returns:
            Dictionary based on the model instance.

        """
        ...

    def to_str(self) -> str:
        """
        Convert to a JSON string (eg. to send back for a GET request).

        Returns:
            JSON string based on the model instance.

        """
        ...


Department: typing.Type[TDepartment] = models.Department  # type: ignore
