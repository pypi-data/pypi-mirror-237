# generated by datamodel-codegen:
#   filename:  FlaskApp.yaml
#   timestamp: 2023-10-25T09:40:25+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class SQLAColumn(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    datatype: Optional[Any] = Field(None, title="Datatype")
    default: Optional[Any] = Field(None, title="Default")
    foreign_key: Optional[Union[str, List[str]]] = Field(None, title="Foreign Key")
    nullable: Optional[bool] = Field(False, title="Nullable")


class Kind(Enum):
    Kind_many_to_many = "Kind.many_to_many"


class M2M(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    target: Union[str, List[str]] = Field(..., title="Target")
    backref: Optional[str] = Field(None, title="Backref")
    kind: Optional[Kind] = Field("Kind.many_to_many", title="Kind")
    secondary: str = Field(..., title="Secondary")


class Kind1(Enum):
    Kind_one_to_many = "Kind.one_to_many"


class O2M(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    target: Union[str, List[str]] = Field(..., title="Target")
    backref: Optional[str] = Field(None, title="Backref")
    kind: Optional[Kind1] = Field("Kind.one_to_many", title="Kind")
    viewonly: Optional[bool] = Field(False, title="Viewonly")


class Kind2(Enum):
    Kind_many_to_one = "Kind.many_to_one"


class M2O(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    target: Union[str, List[str]] = Field(..., title="Target")
    backref: Optional[str] = Field(None, title="Backref")
    kind: Optional[Kind2] = Field("Kind.many_to_one", title="Kind")


class Kind3(Enum):
    Kind_one_to_one = "Kind.one_to_one"


class O2O(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    target: Union[str, List[str]] = Field(..., title="Target")
    backref: Optional[str] = Field(None, title="Backref")
    kind: Optional[Kind3] = Field("Kind.one_to_one", title="Kind")


class SQLAModel(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    tablename: str = Field(..., title="Tablename")
    columns: List[SQLAColumn] = Field(..., title="Columns")
    relationships: Optional[List[Union[M2M, O2M, M2O, O2O]]] = Field(
        [], title="Relationships"
    )
    mixins: Optional[List[str]] = Field(
        ["....extensions.appbuilder.Base"], title="Mixins"
    )


class FABAction(BaseModel):
    name: str = Field(..., title="Name")
    description: Optional[str] = Field("", title="Description")
    title: str = Field(..., title="Title")
    icon: Optional[str] = Field("", title="Icon")
    multiple: Optional[bool] = Field(True, title="Multiple")
    single: Optional[bool] = Field(True, title="Single")
    confirmation: Optional[str] = Field("", title="Confirmation")


class FABView(BaseModel):
    name: str = Field(..., title="Name")
    description: Optional[str] = Field("", title="Description")
    model: SQLAModel
    mixins: Optional[List[str]] = Field(["ModelView"], title="Mixins")
    list_columns: Optional[List[str]] = Field([], title="List Columns")
    show_columns: Optional[List[str]] = Field([], title="Show Columns")
    edit_columns: Optional[List[str]] = Field([], title="Edit Columns")
    add_columns: Optional[List[str]] = Field([], title="Add Columns")
    related_views: Optional[List[str]] = Field([], title="Related Views")
    actions: Optional[List[FABAction]] = Field([], title="Actions")


class FABPermission(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")


class DataTypeKind(Enum):
    float = "float"
    int = "int"
    string = "string"
    date = "date"
    datetime = "datetime"
    time = "time"
    boolean = "boolean"
    enum = "enum"
    json = "json"
    uuid = "uuid"
    url = "url"
    email = "email"
    password = "password"
    file = "file"
    image = "image"
    video = "video"
    audio = "audio"
    html = "html"
    markdown = "markdown"
    bb_code = "bb_code"
    xml = "xml"
    yaml = "yaml"
    toml = "toml"
    csv = "csv"
    tsv = "tsv"


class DataType(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    kind: Optional[DataTypeKind] = "string"


class Attribute(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    datatype: Optional[DataType] = Field(
        default_factory=lambda: DataType.parse_obj(
            {"name": "", "description": "", "kind": "string"}
        ),
        title="Datatype",
    )
    default: Optional[Any] = Field(None, title="Default")
    validators: Optional[List] = Field([], title="Validators")


class RelationshipKind(Enum):
    one_to_one = "one_to_one"
    one_to_many = "one_to_many"
    many_to_one = "many_to_one"
    many_to_many = "many_to_many"


class Relationship(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    kind: RelationshipKind
    model: str = Field(..., title="Model")


class Model(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    attributes: Optional[List[Attribute]] = Field([], title="Attributes")
    relationships: Optional[List[Relationship]] = Field([], title="Relationships")


class Action(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    parameters: Optional[Dict[str, Union[Model, str]]] = Field({}, title="Parameters")
    body: str = Field(..., title="Body")
    result: Optional[Model] = None


class Module(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    models: Optional[List[SQLAModel]] = Field([], title="Models")
    views: Optional[List[FABView]] = Field([], title="Views")
    permissions: Optional[List[FABPermission]] = Field([], title="Permissions")
    actions: Optional[List[Action]] = Field([], title="Actions")


class Extension(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    requirements: Optional[List[str]] = Field([], title="Requirements")
    config: Optional[Dict[str, Any]] = Field({}, title="Config")


class FlaskApp(BaseModel):
    name: Optional[str] = Field("", title="Name")
    description: Optional[str] = Field("", title="Description")
    modules: List[Module] = Field(..., title="Modules")
    extensions: List[Extension] = Field(..., title="Extensions")
    config: Optional[Dict[str, Any]] = Field({}, title="Config")
