# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2023-08-06T04:42:09+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel, Field


class Info(BaseModel):
    description: str
    title: str
    version: str


class Field200(BaseModel):
    description: str


class Responses(BaseModel):
    field_200: Field200 = Field(..., alias="200")


class Get(BaseModel):
    tags: List[str]
    summary: str
    produces: List[str]
    responses: Responses


class FieldModel(BaseModel):
    get: Get


class Parameter(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Items(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Schema(BaseModel):
    items: Items
    type: str


class Field2001(BaseModel):
    description: str
    schema_: Schema = Field(..., alias="schema")


class Field206(BaseModel):
    description: str


class Responses1(BaseModel):
    field_200: Field2001 = Field(..., alias="200")
    field_206: Field206 = Field(..., alias="206")


class Get1(BaseModel):
    tags: List[str]
    parameters: List[Parameter]
    responses: Responses1


class Field201(BaseModel):
    description: str


class Responses2(BaseModel):
    field_201: Field201 = Field(..., alias="201")


class Post(BaseModel):
    tags: List[str]
    parameters: List[Parameter]
    responses: Responses2


class Field204(BaseModel):
    description: str


class Responses3(BaseModel):
    field_204: Field204 = Field(..., alias="204")


class Delete(BaseModel):
    tags: List[str]
    parameters: List[Parameter]
    responses: Responses3


class Responses4(BaseModel):
    field_204: Field204 = Field(..., alias="204")


class Patch(BaseModel):
    tags: List[str]
    parameters: List[Parameter]
    responses: Responses4


class FieldTodos(BaseModel):
    get: Get1
    post: Post
    delete: Delete
    patch: Patch


class Paths(BaseModel):
    field_: FieldModel = Field(..., alias="/")
    field_todos: FieldTodos = Field(..., alias="/todos")


class Id(BaseModel):
    description: str
    format: str
    type: str


class Done(BaseModel):
    default: bool
    format: str
    type: str


class Task(BaseModel):
    format: str
    type: str


class Due(BaseModel):
    format: str
    type: str


class Properties(BaseModel):
    id: Id
    done: Done
    task: Task
    due: Due


class Todos(BaseModel):
    required: List[str]
    properties: Properties
    type: str


class Definitions(BaseModel):
    todos: Todos


class PreferParams(BaseModel):
    name: str
    description: str
    required: bool
    enum: List[str]
    in_: str = Field(..., alias="in")
    type: str


class PreferReturn(BaseModel):
    name: str
    description: str
    required: bool
    enum: List[str]
    in_: str = Field(..., alias="in")
    type: str


class PreferCount(BaseModel):
    name: str
    description: str
    required: bool
    enum: List[str]
    in_: str = Field(..., alias="in")
    type: str


class PreferPost(BaseModel):
    name: str
    description: str
    required: bool
    enum: List[str]
    in_: str = Field(..., alias="in")
    type: str


class Select(BaseModel):
    name: str
    description: str
    required: bool
    in_: str = Field(..., alias="in")
    type: str


class OnConflict(BaseModel):
    name: str
    description: str
    required: bool
    in_: str = Field(..., alias="in")
    type: str


class Order(BaseModel):
    name: str
    description: str
    required: bool
    in_: str = Field(..., alias="in")
    type: str


class Range(BaseModel):
    name: str
    description: str
    required: bool
    in_: str = Field(..., alias="in")
    type: str


class RangeUnit(BaseModel):
    name: str
    description: str
    required: bool
    default: str
    in_: str = Field(..., alias="in")
    type: str


class Offset(BaseModel):
    name: str
    description: str
    required: bool
    in_: str = Field(..., alias="in")
    type: str


class Limit(BaseModel):
    name: str
    description: str
    required: bool
    in_: str = Field(..., alias="in")
    type: str


class Schema1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class BodyTodos(BaseModel):
    name: str
    description: str
    required: bool
    in_: str = Field(..., alias="in")
    schema_: Schema1 = Field(..., alias="schema")


class RowFilterTodosId(BaseModel):
    name: str
    required: bool
    format: str
    in_: str = Field(..., alias="in")
    type: str


class RowFilterTodosDone(BaseModel):
    name: str
    required: bool
    format: str
    in_: str = Field(..., alias="in")
    type: str


class RowFilterTodosTask(BaseModel):
    name: str
    required: bool
    format: str
    in_: str = Field(..., alias="in")
    type: str


class RowFilterTodosDue(BaseModel):
    name: str
    required: bool
    format: str
    in_: str = Field(..., alias="in")
    type: str


class Parameters(BaseModel):
    preferParams: PreferParams
    preferReturn: PreferReturn
    preferCount: PreferCount
    preferPost: PreferPost
    select: Select
    on_conflict: OnConflict
    order: Order
    range: Range
    rangeUnit: RangeUnit
    offset: Offset
    limit: Limit
    body_todos: BodyTodos = Field(..., alias="body.todos")
    rowFilter_todos_id: RowFilterTodosId = Field(..., alias="rowFilter.todos.id")
    rowFilter_todos_done: RowFilterTodosDone = Field(..., alias="rowFilter.todos.done")
    rowFilter_todos_task: RowFilterTodosTask = Field(..., alias="rowFilter.todos.task")
    rowFilter_todos_due: RowFilterTodosDue = Field(..., alias="rowFilter.todos.due")


class ExternalDocs(BaseModel):
    description: str
    url: str


class Model(BaseModel):
    swagger: str
    info: Info
    host: str
    basePath: str
    schemes: List[str]
    consumes: List[str]
    produces: List[str]
    paths: Paths
    definitions: Definitions
    parameters: Parameters
    externalDocs: ExternalDocs
