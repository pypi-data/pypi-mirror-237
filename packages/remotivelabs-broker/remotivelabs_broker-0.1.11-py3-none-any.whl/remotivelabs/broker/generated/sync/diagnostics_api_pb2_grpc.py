# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import diagnostics_api_pb2 as diagnostics__api__pb2


class DiagnosticsServiceStub(object):
    """*
    Read data by service identifier

    Data identifiers:
    - 0x22 read data by identinifier (Service id).
    - 0x1f90 DID (Data identifier) for VIN number.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendDiagnosticsQuery = channel.unary_unary(
                '/base.DiagnosticsService/SendDiagnosticsQuery',
                request_serializer=diagnostics__api__pb2.DiagnosticsRequest.SerializeToString,
                response_deserializer=diagnostics__api__pb2.DiagnosticsResponse.FromString,
                )


class DiagnosticsServiceServicer(object):
    """*
    Read data by service identifier

    Data identifiers:
    - 0x22 read data by identinifier (Service id).
    - 0x1f90 DID (Data identifier) for VIN number.
    """

    def SendDiagnosticsQuery(self, request, context):
        """/ Send diagnostics request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiagnosticsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendDiagnosticsQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.SendDiagnosticsQuery,
                    request_deserializer=diagnostics__api__pb2.DiagnosticsRequest.FromString,
                    response_serializer=diagnostics__api__pb2.DiagnosticsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'base.DiagnosticsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DiagnosticsService(object):
    """*
    Read data by service identifier

    Data identifiers:
    - 0x22 read data by identinifier (Service id).
    - 0x1f90 DID (Data identifier) for VIN number.
    """

    @staticmethod
    def SendDiagnosticsQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/base.DiagnosticsService/SendDiagnosticsQuery',
            diagnostics__api__pb2.DiagnosticsRequest.SerializeToString,
            diagnostics__api__pb2.DiagnosticsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
