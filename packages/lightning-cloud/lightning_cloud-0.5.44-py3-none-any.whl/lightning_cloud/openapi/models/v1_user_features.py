# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_cloud.openapi.models import *

class V1UserFeatures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws_trainium': 'bool',
        'b2c_experience': 'bool',
        'byoc_enabled': 'bool',
        'byom': 'bool',
        'cap_add': 'list[str]',
        'cap_drop': 'list[str]',
        'cluster_running_notification': 'bool',
        'code_tab': 'bool',
        'collab_screen_sharing': 'bool',
        'crypto_monitoring': 'bool',
        'custom_app_domain': 'bool',
        'data_prep_app': 'bool',
        'distributed_plugin': 'bool',
        'enable_crypto_crackdown': 'bool',
        'fiftyone_plugin': 'bool',
        'filesystem_optimisation': 'bool',
        'gradio_plugin': 'bool',
        'inference_plugin': 'bool',
        'interruptible_instances': 'bool',
        'jobs_filesystem': 'bool',
        'label_studio_plugin': 'bool',
        'landing_studios': 'bool',
        'langflow_plugin': 'bool',
        'lightning_apps_distributed_plugin': 'bool',
        'lightning_apps_plugin': 'bool',
        'mage_ai_plugin': 'bool',
        'milvus_plugin': 'bool',
        'mmt_app': 'bool',
        'mmt_strategy_selector': 'bool',
        'mountpoint_s3': 'bool',
        'platform_docs': 'bool',
        'plugin_browser': 'bool',
        'pricing_tiers': 'bool',
        'pricing_updates': 'bool',
        'product_generator': 'bool',
        'project_selector': 'bool',
        'publish_ai_app': 'bool',
        'react_plugin': 'bool',
        'restartable_jobs': 'bool',
        'show_dev_admin': 'bool',
        'show_quotas': 'bool',
        'slurm': 'bool',
        'streamlit_plugin': 'bool',
        'studio_about_tab': 'bool',
        'studio_publication': 'bool',
        'sweeps_app': 'bool',
        'tensorboard_plugin': 'bool',
        'tier_override': 'str',
        'tired_proxy_dataconnection': 'bool',
        'weviate_plugin': 'bool',
        'writable_data_connections': 'bool'
    }

    attribute_map = {
        'aws_trainium': 'awsTrainium',
        'b2c_experience': 'b2cExperience',
        'byoc_enabled': 'byocEnabled',
        'byom': 'byom',
        'cap_add': 'capAdd',
        'cap_drop': 'capDrop',
        'cluster_running_notification': 'clusterRunningNotification',
        'code_tab': 'codeTab',
        'collab_screen_sharing': 'collabScreenSharing',
        'crypto_monitoring': 'cryptoMonitoring',
        'custom_app_domain': 'customAppDomain',
        'data_prep_app': 'dataPrepApp',
        'distributed_plugin': 'distributedPlugin',
        'enable_crypto_crackdown': 'enableCryptoCrackdown',
        'fiftyone_plugin': 'fiftyonePlugin',
        'filesystem_optimisation': 'filesystemOptimisation',
        'gradio_plugin': 'gradioPlugin',
        'inference_plugin': 'inferencePlugin',
        'interruptible_instances': 'interruptibleInstances',
        'jobs_filesystem': 'jobsFilesystem',
        'label_studio_plugin': 'labelStudioPlugin',
        'landing_studios': 'landingStudios',
        'langflow_plugin': 'langflowPlugin',
        'lightning_apps_distributed_plugin': 'lightningAppsDistributedPlugin',
        'lightning_apps_plugin': 'lightningAppsPlugin',
        'mage_ai_plugin': 'mageAiPlugin',
        'milvus_plugin': 'milvusPlugin',
        'mmt_app': 'mmtApp',
        'mmt_strategy_selector': 'mmtStrategySelector',
        'mountpoint_s3': 'mountpointS3',
        'platform_docs': 'platformDocs',
        'plugin_browser': 'pluginBrowser',
        'pricing_tiers': 'pricingTiers',
        'pricing_updates': 'pricingUpdates',
        'product_generator': 'productGenerator',
        'project_selector': 'projectSelector',
        'publish_ai_app': 'publishAiApp',
        'react_plugin': 'reactPlugin',
        'restartable_jobs': 'restartableJobs',
        'show_dev_admin': 'showDevAdmin',
        'show_quotas': 'showQuotas',
        'slurm': 'slurm',
        'streamlit_plugin': 'streamlitPlugin',
        'studio_about_tab': 'studioAboutTab',
        'studio_publication': 'studioPublication',
        'sweeps_app': 'sweepsApp',
        'tensorboard_plugin': 'tensorboardPlugin',
        'tier_override': 'tierOverride',
        'tired_proxy_dataconnection': 'tiredProxyDataconnection',
        'weviate_plugin': 'weviatePlugin',
        'writable_data_connections': 'writableDataConnections'
    }

    def __init__(self, aws_trainium: 'bool' =None, b2c_experience: 'bool' =None, byoc_enabled: 'bool' =None, byom: 'bool' =None, cap_add: 'list[str]' =None, cap_drop: 'list[str]' =None, cluster_running_notification: 'bool' =None, code_tab: 'bool' =None, collab_screen_sharing: 'bool' =None, crypto_monitoring: 'bool' =None, custom_app_domain: 'bool' =None, data_prep_app: 'bool' =None, distributed_plugin: 'bool' =None, enable_crypto_crackdown: 'bool' =None, fiftyone_plugin: 'bool' =None, filesystem_optimisation: 'bool' =None, gradio_plugin: 'bool' =None, inference_plugin: 'bool' =None, interruptible_instances: 'bool' =None, jobs_filesystem: 'bool' =None, label_studio_plugin: 'bool' =None, landing_studios: 'bool' =None, langflow_plugin: 'bool' =None, lightning_apps_distributed_plugin: 'bool' =None, lightning_apps_plugin: 'bool' =None, mage_ai_plugin: 'bool' =None, milvus_plugin: 'bool' =None, mmt_app: 'bool' =None, mmt_strategy_selector: 'bool' =None, mountpoint_s3: 'bool' =None, platform_docs: 'bool' =None, plugin_browser: 'bool' =None, pricing_tiers: 'bool' =None, pricing_updates: 'bool' =None, product_generator: 'bool' =None, project_selector: 'bool' =None, publish_ai_app: 'bool' =None, react_plugin: 'bool' =None, restartable_jobs: 'bool' =None, show_dev_admin: 'bool' =None, show_quotas: 'bool' =None, slurm: 'bool' =None, streamlit_plugin: 'bool' =None, studio_about_tab: 'bool' =None, studio_publication: 'bool' =None, sweeps_app: 'bool' =None, tensorboard_plugin: 'bool' =None, tier_override: 'str' =None, tired_proxy_dataconnection: 'bool' =None, weviate_plugin: 'bool' =None, writable_data_connections: 'bool' =None):  # noqa: E501
        """V1UserFeatures - a model defined in Swagger"""  # noqa: E501
        self._aws_trainium = None
        self._b2c_experience = None
        self._byoc_enabled = None
        self._byom = None
        self._cap_add = None
        self._cap_drop = None
        self._cluster_running_notification = None
        self._code_tab = None
        self._collab_screen_sharing = None
        self._crypto_monitoring = None
        self._custom_app_domain = None
        self._data_prep_app = None
        self._distributed_plugin = None
        self._enable_crypto_crackdown = None
        self._fiftyone_plugin = None
        self._filesystem_optimisation = None
        self._gradio_plugin = None
        self._inference_plugin = None
        self._interruptible_instances = None
        self._jobs_filesystem = None
        self._label_studio_plugin = None
        self._landing_studios = None
        self._langflow_plugin = None
        self._lightning_apps_distributed_plugin = None
        self._lightning_apps_plugin = None
        self._mage_ai_plugin = None
        self._milvus_plugin = None
        self._mmt_app = None
        self._mmt_strategy_selector = None
        self._mountpoint_s3 = None
        self._platform_docs = None
        self._plugin_browser = None
        self._pricing_tiers = None
        self._pricing_updates = None
        self._product_generator = None
        self._project_selector = None
        self._publish_ai_app = None
        self._react_plugin = None
        self._restartable_jobs = None
        self._show_dev_admin = None
        self._show_quotas = None
        self._slurm = None
        self._streamlit_plugin = None
        self._studio_about_tab = None
        self._studio_publication = None
        self._sweeps_app = None
        self._tensorboard_plugin = None
        self._tier_override = None
        self._tired_proxy_dataconnection = None
        self._weviate_plugin = None
        self._writable_data_connections = None
        self.discriminator = None
        if aws_trainium is not None:
            self.aws_trainium = aws_trainium
        if b2c_experience is not None:
            self.b2c_experience = b2c_experience
        if byoc_enabled is not None:
            self.byoc_enabled = byoc_enabled
        if byom is not None:
            self.byom = byom
        if cap_add is not None:
            self.cap_add = cap_add
        if cap_drop is not None:
            self.cap_drop = cap_drop
        if cluster_running_notification is not None:
            self.cluster_running_notification = cluster_running_notification
        if code_tab is not None:
            self.code_tab = code_tab
        if collab_screen_sharing is not None:
            self.collab_screen_sharing = collab_screen_sharing
        if crypto_monitoring is not None:
            self.crypto_monitoring = crypto_monitoring
        if custom_app_domain is not None:
            self.custom_app_domain = custom_app_domain
        if data_prep_app is not None:
            self.data_prep_app = data_prep_app
        if distributed_plugin is not None:
            self.distributed_plugin = distributed_plugin
        if enable_crypto_crackdown is not None:
            self.enable_crypto_crackdown = enable_crypto_crackdown
        if fiftyone_plugin is not None:
            self.fiftyone_plugin = fiftyone_plugin
        if filesystem_optimisation is not None:
            self.filesystem_optimisation = filesystem_optimisation
        if gradio_plugin is not None:
            self.gradio_plugin = gradio_plugin
        if inference_plugin is not None:
            self.inference_plugin = inference_plugin
        if interruptible_instances is not None:
            self.interruptible_instances = interruptible_instances
        if jobs_filesystem is not None:
            self.jobs_filesystem = jobs_filesystem
        if label_studio_plugin is not None:
            self.label_studio_plugin = label_studio_plugin
        if landing_studios is not None:
            self.landing_studios = landing_studios
        if langflow_plugin is not None:
            self.langflow_plugin = langflow_plugin
        if lightning_apps_distributed_plugin is not None:
            self.lightning_apps_distributed_plugin = lightning_apps_distributed_plugin
        if lightning_apps_plugin is not None:
            self.lightning_apps_plugin = lightning_apps_plugin
        if mage_ai_plugin is not None:
            self.mage_ai_plugin = mage_ai_plugin
        if milvus_plugin is not None:
            self.milvus_plugin = milvus_plugin
        if mmt_app is not None:
            self.mmt_app = mmt_app
        if mmt_strategy_selector is not None:
            self.mmt_strategy_selector = mmt_strategy_selector
        if mountpoint_s3 is not None:
            self.mountpoint_s3 = mountpoint_s3
        if platform_docs is not None:
            self.platform_docs = platform_docs
        if plugin_browser is not None:
            self.plugin_browser = plugin_browser
        if pricing_tiers is not None:
            self.pricing_tiers = pricing_tiers
        if pricing_updates is not None:
            self.pricing_updates = pricing_updates
        if product_generator is not None:
            self.product_generator = product_generator
        if project_selector is not None:
            self.project_selector = project_selector
        if publish_ai_app is not None:
            self.publish_ai_app = publish_ai_app
        if react_plugin is not None:
            self.react_plugin = react_plugin
        if restartable_jobs is not None:
            self.restartable_jobs = restartable_jobs
        if show_dev_admin is not None:
            self.show_dev_admin = show_dev_admin
        if show_quotas is not None:
            self.show_quotas = show_quotas
        if slurm is not None:
            self.slurm = slurm
        if streamlit_plugin is not None:
            self.streamlit_plugin = streamlit_plugin
        if studio_about_tab is not None:
            self.studio_about_tab = studio_about_tab
        if studio_publication is not None:
            self.studio_publication = studio_publication
        if sweeps_app is not None:
            self.sweeps_app = sweeps_app
        if tensorboard_plugin is not None:
            self.tensorboard_plugin = tensorboard_plugin
        if tier_override is not None:
            self.tier_override = tier_override
        if tired_proxy_dataconnection is not None:
            self.tired_proxy_dataconnection = tired_proxy_dataconnection
        if weviate_plugin is not None:
            self.weviate_plugin = weviate_plugin
        if writable_data_connections is not None:
            self.writable_data_connections = writable_data_connections

    @property
    def aws_trainium(self) -> 'bool':
        """Gets the aws_trainium of this V1UserFeatures.  # noqa: E501


        :return: The aws_trainium of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._aws_trainium

    @aws_trainium.setter
    def aws_trainium(self, aws_trainium: 'bool'):
        """Sets the aws_trainium of this V1UserFeatures.


        :param aws_trainium: The aws_trainium of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._aws_trainium = aws_trainium

    @property
    def b2c_experience(self) -> 'bool':
        """Gets the b2c_experience of this V1UserFeatures.  # noqa: E501


        :return: The b2c_experience of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._b2c_experience

    @b2c_experience.setter
    def b2c_experience(self, b2c_experience: 'bool'):
        """Sets the b2c_experience of this V1UserFeatures.


        :param b2c_experience: The b2c_experience of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._b2c_experience = b2c_experience

    @property
    def byoc_enabled(self) -> 'bool':
        """Gets the byoc_enabled of this V1UserFeatures.  # noqa: E501


        :return: The byoc_enabled of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._byoc_enabled

    @byoc_enabled.setter
    def byoc_enabled(self, byoc_enabled: 'bool'):
        """Sets the byoc_enabled of this V1UserFeatures.


        :param byoc_enabled: The byoc_enabled of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._byoc_enabled = byoc_enabled

    @property
    def byom(self) -> 'bool':
        """Gets the byom of this V1UserFeatures.  # noqa: E501


        :return: The byom of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._byom

    @byom.setter
    def byom(self, byom: 'bool'):
        """Sets the byom of this V1UserFeatures.


        :param byom: The byom of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._byom = byom

    @property
    def cap_add(self) -> 'list[str]':
        """Gets the cap_add of this V1UserFeatures.  # noqa: E501


        :return: The cap_add of this V1UserFeatures.  # noqa: E501
        :rtype: list[str]
        """
        return self._cap_add

    @cap_add.setter
    def cap_add(self, cap_add: 'list[str]'):
        """Sets the cap_add of this V1UserFeatures.


        :param cap_add: The cap_add of this V1UserFeatures.  # noqa: E501
        :type: list[str]
        """

        self._cap_add = cap_add

    @property
    def cap_drop(self) -> 'list[str]':
        """Gets the cap_drop of this V1UserFeatures.  # noqa: E501


        :return: The cap_drop of this V1UserFeatures.  # noqa: E501
        :rtype: list[str]
        """
        return self._cap_drop

    @cap_drop.setter
    def cap_drop(self, cap_drop: 'list[str]'):
        """Sets the cap_drop of this V1UserFeatures.


        :param cap_drop: The cap_drop of this V1UserFeatures.  # noqa: E501
        :type: list[str]
        """

        self._cap_drop = cap_drop

    @property
    def cluster_running_notification(self) -> 'bool':
        """Gets the cluster_running_notification of this V1UserFeatures.  # noqa: E501


        :return: The cluster_running_notification of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._cluster_running_notification

    @cluster_running_notification.setter
    def cluster_running_notification(self, cluster_running_notification: 'bool'):
        """Sets the cluster_running_notification of this V1UserFeatures.


        :param cluster_running_notification: The cluster_running_notification of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._cluster_running_notification = cluster_running_notification

    @property
    def code_tab(self) -> 'bool':
        """Gets the code_tab of this V1UserFeatures.  # noqa: E501


        :return: The code_tab of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._code_tab

    @code_tab.setter
    def code_tab(self, code_tab: 'bool'):
        """Sets the code_tab of this V1UserFeatures.


        :param code_tab: The code_tab of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._code_tab = code_tab

    @property
    def collab_screen_sharing(self) -> 'bool':
        """Gets the collab_screen_sharing of this V1UserFeatures.  # noqa: E501


        :return: The collab_screen_sharing of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._collab_screen_sharing

    @collab_screen_sharing.setter
    def collab_screen_sharing(self, collab_screen_sharing: 'bool'):
        """Sets the collab_screen_sharing of this V1UserFeatures.


        :param collab_screen_sharing: The collab_screen_sharing of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._collab_screen_sharing = collab_screen_sharing

    @property
    def crypto_monitoring(self) -> 'bool':
        """Gets the crypto_monitoring of this V1UserFeatures.  # noqa: E501


        :return: The crypto_monitoring of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._crypto_monitoring

    @crypto_monitoring.setter
    def crypto_monitoring(self, crypto_monitoring: 'bool'):
        """Sets the crypto_monitoring of this V1UserFeatures.


        :param crypto_monitoring: The crypto_monitoring of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._crypto_monitoring = crypto_monitoring

    @property
    def custom_app_domain(self) -> 'bool':
        """Gets the custom_app_domain of this V1UserFeatures.  # noqa: E501


        :return: The custom_app_domain of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._custom_app_domain

    @custom_app_domain.setter
    def custom_app_domain(self, custom_app_domain: 'bool'):
        """Sets the custom_app_domain of this V1UserFeatures.


        :param custom_app_domain: The custom_app_domain of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._custom_app_domain = custom_app_domain

    @property
    def data_prep_app(self) -> 'bool':
        """Gets the data_prep_app of this V1UserFeatures.  # noqa: E501


        :return: The data_prep_app of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._data_prep_app

    @data_prep_app.setter
    def data_prep_app(self, data_prep_app: 'bool'):
        """Sets the data_prep_app of this V1UserFeatures.


        :param data_prep_app: The data_prep_app of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._data_prep_app = data_prep_app

    @property
    def distributed_plugin(self) -> 'bool':
        """Gets the distributed_plugin of this V1UserFeatures.  # noqa: E501


        :return: The distributed_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._distributed_plugin

    @distributed_plugin.setter
    def distributed_plugin(self, distributed_plugin: 'bool'):
        """Sets the distributed_plugin of this V1UserFeatures.


        :param distributed_plugin: The distributed_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._distributed_plugin = distributed_plugin

    @property
    def enable_crypto_crackdown(self) -> 'bool':
        """Gets the enable_crypto_crackdown of this V1UserFeatures.  # noqa: E501


        :return: The enable_crypto_crackdown of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._enable_crypto_crackdown

    @enable_crypto_crackdown.setter
    def enable_crypto_crackdown(self, enable_crypto_crackdown: 'bool'):
        """Sets the enable_crypto_crackdown of this V1UserFeatures.


        :param enable_crypto_crackdown: The enable_crypto_crackdown of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._enable_crypto_crackdown = enable_crypto_crackdown

    @property
    def fiftyone_plugin(self) -> 'bool':
        """Gets the fiftyone_plugin of this V1UserFeatures.  # noqa: E501


        :return: The fiftyone_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._fiftyone_plugin

    @fiftyone_plugin.setter
    def fiftyone_plugin(self, fiftyone_plugin: 'bool'):
        """Sets the fiftyone_plugin of this V1UserFeatures.


        :param fiftyone_plugin: The fiftyone_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._fiftyone_plugin = fiftyone_plugin

    @property
    def filesystem_optimisation(self) -> 'bool':
        """Gets the filesystem_optimisation of this V1UserFeatures.  # noqa: E501


        :return: The filesystem_optimisation of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._filesystem_optimisation

    @filesystem_optimisation.setter
    def filesystem_optimisation(self, filesystem_optimisation: 'bool'):
        """Sets the filesystem_optimisation of this V1UserFeatures.


        :param filesystem_optimisation: The filesystem_optimisation of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._filesystem_optimisation = filesystem_optimisation

    @property
    def gradio_plugin(self) -> 'bool':
        """Gets the gradio_plugin of this V1UserFeatures.  # noqa: E501


        :return: The gradio_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._gradio_plugin

    @gradio_plugin.setter
    def gradio_plugin(self, gradio_plugin: 'bool'):
        """Sets the gradio_plugin of this V1UserFeatures.


        :param gradio_plugin: The gradio_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._gradio_plugin = gradio_plugin

    @property
    def inference_plugin(self) -> 'bool':
        """Gets the inference_plugin of this V1UserFeatures.  # noqa: E501


        :return: The inference_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._inference_plugin

    @inference_plugin.setter
    def inference_plugin(self, inference_plugin: 'bool'):
        """Sets the inference_plugin of this V1UserFeatures.


        :param inference_plugin: The inference_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._inference_plugin = inference_plugin

    @property
    def interruptible_instances(self) -> 'bool':
        """Gets the interruptible_instances of this V1UserFeatures.  # noqa: E501


        :return: The interruptible_instances of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._interruptible_instances

    @interruptible_instances.setter
    def interruptible_instances(self, interruptible_instances: 'bool'):
        """Sets the interruptible_instances of this V1UserFeatures.


        :param interruptible_instances: The interruptible_instances of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._interruptible_instances = interruptible_instances

    @property
    def jobs_filesystem(self) -> 'bool':
        """Gets the jobs_filesystem of this V1UserFeatures.  # noqa: E501


        :return: The jobs_filesystem of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._jobs_filesystem

    @jobs_filesystem.setter
    def jobs_filesystem(self, jobs_filesystem: 'bool'):
        """Sets the jobs_filesystem of this V1UserFeatures.


        :param jobs_filesystem: The jobs_filesystem of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._jobs_filesystem = jobs_filesystem

    @property
    def label_studio_plugin(self) -> 'bool':
        """Gets the label_studio_plugin of this V1UserFeatures.  # noqa: E501


        :return: The label_studio_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._label_studio_plugin

    @label_studio_plugin.setter
    def label_studio_plugin(self, label_studio_plugin: 'bool'):
        """Sets the label_studio_plugin of this V1UserFeatures.


        :param label_studio_plugin: The label_studio_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._label_studio_plugin = label_studio_plugin

    @property
    def landing_studios(self) -> 'bool':
        """Gets the landing_studios of this V1UserFeatures.  # noqa: E501


        :return: The landing_studios of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._landing_studios

    @landing_studios.setter
    def landing_studios(self, landing_studios: 'bool'):
        """Sets the landing_studios of this V1UserFeatures.


        :param landing_studios: The landing_studios of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._landing_studios = landing_studios

    @property
    def langflow_plugin(self) -> 'bool':
        """Gets the langflow_plugin of this V1UserFeatures.  # noqa: E501


        :return: The langflow_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._langflow_plugin

    @langflow_plugin.setter
    def langflow_plugin(self, langflow_plugin: 'bool'):
        """Sets the langflow_plugin of this V1UserFeatures.


        :param langflow_plugin: The langflow_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._langflow_plugin = langflow_plugin

    @property
    def lightning_apps_distributed_plugin(self) -> 'bool':
        """Gets the lightning_apps_distributed_plugin of this V1UserFeatures.  # noqa: E501


        :return: The lightning_apps_distributed_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._lightning_apps_distributed_plugin

    @lightning_apps_distributed_plugin.setter
    def lightning_apps_distributed_plugin(self, lightning_apps_distributed_plugin: 'bool'):
        """Sets the lightning_apps_distributed_plugin of this V1UserFeatures.


        :param lightning_apps_distributed_plugin: The lightning_apps_distributed_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._lightning_apps_distributed_plugin = lightning_apps_distributed_plugin

    @property
    def lightning_apps_plugin(self) -> 'bool':
        """Gets the lightning_apps_plugin of this V1UserFeatures.  # noqa: E501


        :return: The lightning_apps_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._lightning_apps_plugin

    @lightning_apps_plugin.setter
    def lightning_apps_plugin(self, lightning_apps_plugin: 'bool'):
        """Sets the lightning_apps_plugin of this V1UserFeatures.


        :param lightning_apps_plugin: The lightning_apps_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._lightning_apps_plugin = lightning_apps_plugin

    @property
    def mage_ai_plugin(self) -> 'bool':
        """Gets the mage_ai_plugin of this V1UserFeatures.  # noqa: E501


        :return: The mage_ai_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._mage_ai_plugin

    @mage_ai_plugin.setter
    def mage_ai_plugin(self, mage_ai_plugin: 'bool'):
        """Sets the mage_ai_plugin of this V1UserFeatures.


        :param mage_ai_plugin: The mage_ai_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._mage_ai_plugin = mage_ai_plugin

    @property
    def milvus_plugin(self) -> 'bool':
        """Gets the milvus_plugin of this V1UserFeatures.  # noqa: E501


        :return: The milvus_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._milvus_plugin

    @milvus_plugin.setter
    def milvus_plugin(self, milvus_plugin: 'bool'):
        """Sets the milvus_plugin of this V1UserFeatures.


        :param milvus_plugin: The milvus_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._milvus_plugin = milvus_plugin

    @property
    def mmt_app(self) -> 'bool':
        """Gets the mmt_app of this V1UserFeatures.  # noqa: E501


        :return: The mmt_app of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._mmt_app

    @mmt_app.setter
    def mmt_app(self, mmt_app: 'bool'):
        """Sets the mmt_app of this V1UserFeatures.


        :param mmt_app: The mmt_app of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._mmt_app = mmt_app

    @property
    def mmt_strategy_selector(self) -> 'bool':
        """Gets the mmt_strategy_selector of this V1UserFeatures.  # noqa: E501


        :return: The mmt_strategy_selector of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._mmt_strategy_selector

    @mmt_strategy_selector.setter
    def mmt_strategy_selector(self, mmt_strategy_selector: 'bool'):
        """Sets the mmt_strategy_selector of this V1UserFeatures.


        :param mmt_strategy_selector: The mmt_strategy_selector of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._mmt_strategy_selector = mmt_strategy_selector

    @property
    def mountpoint_s3(self) -> 'bool':
        """Gets the mountpoint_s3 of this V1UserFeatures.  # noqa: E501


        :return: The mountpoint_s3 of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._mountpoint_s3

    @mountpoint_s3.setter
    def mountpoint_s3(self, mountpoint_s3: 'bool'):
        """Sets the mountpoint_s3 of this V1UserFeatures.


        :param mountpoint_s3: The mountpoint_s3 of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._mountpoint_s3 = mountpoint_s3

    @property
    def platform_docs(self) -> 'bool':
        """Gets the platform_docs of this V1UserFeatures.  # noqa: E501


        :return: The platform_docs of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._platform_docs

    @platform_docs.setter
    def platform_docs(self, platform_docs: 'bool'):
        """Sets the platform_docs of this V1UserFeatures.


        :param platform_docs: The platform_docs of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._platform_docs = platform_docs

    @property
    def plugin_browser(self) -> 'bool':
        """Gets the plugin_browser of this V1UserFeatures.  # noqa: E501


        :return: The plugin_browser of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._plugin_browser

    @plugin_browser.setter
    def plugin_browser(self, plugin_browser: 'bool'):
        """Sets the plugin_browser of this V1UserFeatures.


        :param plugin_browser: The plugin_browser of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._plugin_browser = plugin_browser

    @property
    def pricing_tiers(self) -> 'bool':
        """Gets the pricing_tiers of this V1UserFeatures.  # noqa: E501


        :return: The pricing_tiers of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._pricing_tiers

    @pricing_tiers.setter
    def pricing_tiers(self, pricing_tiers: 'bool'):
        """Sets the pricing_tiers of this V1UserFeatures.


        :param pricing_tiers: The pricing_tiers of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._pricing_tiers = pricing_tiers

    @property
    def pricing_updates(self) -> 'bool':
        """Gets the pricing_updates of this V1UserFeatures.  # noqa: E501


        :return: The pricing_updates of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._pricing_updates

    @pricing_updates.setter
    def pricing_updates(self, pricing_updates: 'bool'):
        """Sets the pricing_updates of this V1UserFeatures.


        :param pricing_updates: The pricing_updates of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._pricing_updates = pricing_updates

    @property
    def product_generator(self) -> 'bool':
        """Gets the product_generator of this V1UserFeatures.  # noqa: E501


        :return: The product_generator of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._product_generator

    @product_generator.setter
    def product_generator(self, product_generator: 'bool'):
        """Sets the product_generator of this V1UserFeatures.


        :param product_generator: The product_generator of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._product_generator = product_generator

    @property
    def project_selector(self) -> 'bool':
        """Gets the project_selector of this V1UserFeatures.  # noqa: E501


        :return: The project_selector of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._project_selector

    @project_selector.setter
    def project_selector(self, project_selector: 'bool'):
        """Sets the project_selector of this V1UserFeatures.


        :param project_selector: The project_selector of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._project_selector = project_selector

    @property
    def publish_ai_app(self) -> 'bool':
        """Gets the publish_ai_app of this V1UserFeatures.  # noqa: E501


        :return: The publish_ai_app of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._publish_ai_app

    @publish_ai_app.setter
    def publish_ai_app(self, publish_ai_app: 'bool'):
        """Sets the publish_ai_app of this V1UserFeatures.


        :param publish_ai_app: The publish_ai_app of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._publish_ai_app = publish_ai_app

    @property
    def react_plugin(self) -> 'bool':
        """Gets the react_plugin of this V1UserFeatures.  # noqa: E501


        :return: The react_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._react_plugin

    @react_plugin.setter
    def react_plugin(self, react_plugin: 'bool'):
        """Sets the react_plugin of this V1UserFeatures.


        :param react_plugin: The react_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._react_plugin = react_plugin

    @property
    def restartable_jobs(self) -> 'bool':
        """Gets the restartable_jobs of this V1UserFeatures.  # noqa: E501


        :return: The restartable_jobs of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._restartable_jobs

    @restartable_jobs.setter
    def restartable_jobs(self, restartable_jobs: 'bool'):
        """Sets the restartable_jobs of this V1UserFeatures.


        :param restartable_jobs: The restartable_jobs of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._restartable_jobs = restartable_jobs

    @property
    def show_dev_admin(self) -> 'bool':
        """Gets the show_dev_admin of this V1UserFeatures.  # noqa: E501


        :return: The show_dev_admin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._show_dev_admin

    @show_dev_admin.setter
    def show_dev_admin(self, show_dev_admin: 'bool'):
        """Sets the show_dev_admin of this V1UserFeatures.


        :param show_dev_admin: The show_dev_admin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._show_dev_admin = show_dev_admin

    @property
    def show_quotas(self) -> 'bool':
        """Gets the show_quotas of this V1UserFeatures.  # noqa: E501


        :return: The show_quotas of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._show_quotas

    @show_quotas.setter
    def show_quotas(self, show_quotas: 'bool'):
        """Sets the show_quotas of this V1UserFeatures.


        :param show_quotas: The show_quotas of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._show_quotas = show_quotas

    @property
    def slurm(self) -> 'bool':
        """Gets the slurm of this V1UserFeatures.  # noqa: E501


        :return: The slurm of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._slurm

    @slurm.setter
    def slurm(self, slurm: 'bool'):
        """Sets the slurm of this V1UserFeatures.


        :param slurm: The slurm of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._slurm = slurm

    @property
    def streamlit_plugin(self) -> 'bool':
        """Gets the streamlit_plugin of this V1UserFeatures.  # noqa: E501


        :return: The streamlit_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._streamlit_plugin

    @streamlit_plugin.setter
    def streamlit_plugin(self, streamlit_plugin: 'bool'):
        """Sets the streamlit_plugin of this V1UserFeatures.


        :param streamlit_plugin: The streamlit_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._streamlit_plugin = streamlit_plugin

    @property
    def studio_about_tab(self) -> 'bool':
        """Gets the studio_about_tab of this V1UserFeatures.  # noqa: E501


        :return: The studio_about_tab of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._studio_about_tab

    @studio_about_tab.setter
    def studio_about_tab(self, studio_about_tab: 'bool'):
        """Sets the studio_about_tab of this V1UserFeatures.


        :param studio_about_tab: The studio_about_tab of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._studio_about_tab = studio_about_tab

    @property
    def studio_publication(self) -> 'bool':
        """Gets the studio_publication of this V1UserFeatures.  # noqa: E501


        :return: The studio_publication of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._studio_publication

    @studio_publication.setter
    def studio_publication(self, studio_publication: 'bool'):
        """Sets the studio_publication of this V1UserFeatures.


        :param studio_publication: The studio_publication of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._studio_publication = studio_publication

    @property
    def sweeps_app(self) -> 'bool':
        """Gets the sweeps_app of this V1UserFeatures.  # noqa: E501


        :return: The sweeps_app of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._sweeps_app

    @sweeps_app.setter
    def sweeps_app(self, sweeps_app: 'bool'):
        """Sets the sweeps_app of this V1UserFeatures.


        :param sweeps_app: The sweeps_app of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._sweeps_app = sweeps_app

    @property
    def tensorboard_plugin(self) -> 'bool':
        """Gets the tensorboard_plugin of this V1UserFeatures.  # noqa: E501


        :return: The tensorboard_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._tensorboard_plugin

    @tensorboard_plugin.setter
    def tensorboard_plugin(self, tensorboard_plugin: 'bool'):
        """Sets the tensorboard_plugin of this V1UserFeatures.


        :param tensorboard_plugin: The tensorboard_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._tensorboard_plugin = tensorboard_plugin

    @property
    def tier_override(self) -> 'str':
        """Gets the tier_override of this V1UserFeatures.  # noqa: E501


        :return: The tier_override of this V1UserFeatures.  # noqa: E501
        :rtype: str
        """
        return self._tier_override

    @tier_override.setter
    def tier_override(self, tier_override: 'str'):
        """Sets the tier_override of this V1UserFeatures.


        :param tier_override: The tier_override of this V1UserFeatures.  # noqa: E501
        :type: str
        """

        self._tier_override = tier_override

    @property
    def tired_proxy_dataconnection(self) -> 'bool':
        """Gets the tired_proxy_dataconnection of this V1UserFeatures.  # noqa: E501


        :return: The tired_proxy_dataconnection of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._tired_proxy_dataconnection

    @tired_proxy_dataconnection.setter
    def tired_proxy_dataconnection(self, tired_proxy_dataconnection: 'bool'):
        """Sets the tired_proxy_dataconnection of this V1UserFeatures.


        :param tired_proxy_dataconnection: The tired_proxy_dataconnection of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._tired_proxy_dataconnection = tired_proxy_dataconnection

    @property
    def weviate_plugin(self) -> 'bool':
        """Gets the weviate_plugin of this V1UserFeatures.  # noqa: E501


        :return: The weviate_plugin of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._weviate_plugin

    @weviate_plugin.setter
    def weviate_plugin(self, weviate_plugin: 'bool'):
        """Sets the weviate_plugin of this V1UserFeatures.


        :param weviate_plugin: The weviate_plugin of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._weviate_plugin = weviate_plugin

    @property
    def writable_data_connections(self) -> 'bool':
        """Gets the writable_data_connections of this V1UserFeatures.  # noqa: E501


        :return: The writable_data_connections of this V1UserFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._writable_data_connections

    @writable_data_connections.setter
    def writable_data_connections(self, writable_data_connections: 'bool'):
        """Sets the writable_data_connections of this V1UserFeatures.


        :param writable_data_connections: The writable_data_connections of this V1UserFeatures.  # noqa: E501
        :type: bool
        """

        self._writable_data_connections = writable_data_connections

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1UserFeatures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1UserFeatures') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1UserFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1UserFeatures') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
